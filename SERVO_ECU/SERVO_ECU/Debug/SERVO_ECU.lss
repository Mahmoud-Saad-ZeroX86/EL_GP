
SERVO_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d84  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000d84  00000e18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000052  00800068  00800068  00000e20  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e20  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e50  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c0  00000000  00000000  00000e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003f2b  00000000  00000000  0000114c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010ba  00000000  00000000  00005077  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001e08  00000000  00000000  00006131  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000870  00000000  00000000  00007f3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000179c  00000000  00000000  000087ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002f74  00000000  00000000  00009f48  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c8  00000000  00000000  0000cebc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 ba 03 	jmp	0x774	; 0x774 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 30 02 	jmp	0x460	; 0x460 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e8       	ldi	r30, 0x84	; 132
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 3b       	cpi	r26, 0xBA	; 186
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b9 02 	call	0x572	; 0x572 <main>
  8a:	0c 94 c0 06 	jmp	0xd80	; 0xd80 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <pwm_init>:

#define ON_PWM_SRC(PORT,PIN) (PORT |= (1<<PIN) )
#define OFF_PWM_SRC(PORT,PIN) (PORT &=~ (1<<PIN) )

pwm_error_t pwm_init(st_pwm_object *pwm_obj,timer_bases_t pwm_base,pwm_output_mode_t pwm_mode,pwm_operating_mode_t pwm_op_mode,msa_u32 pwm_freq,pwm_duty_cycle_t pwm_duty_cycle)
{
  92:	4f 92       	push	r4
  94:	5f 92       	push	r5
  96:	6f 92       	push	r6
  98:	7f 92       	push	r7
  9a:	9f 92       	push	r9
  9c:	af 92       	push	r10
  9e:	bf 92       	push	r11
  a0:	cf 92       	push	r12
  a2:	df 92       	push	r13
  a4:	ef 92       	push	r14
  a6:	ff 92       	push	r15
  a8:	0f 93       	push	r16
  aa:	1f 93       	push	r17
  ac:	cf 93       	push	r28
  ae:	df 93       	push	r29
  b0:	ec 01       	movw	r28, r24
  b2:	d6 2e       	mov	r13, r22
  b4:	94 2e       	mov	r9, r20
  b6:	c8 01       	movw	r24, r16
  b8:	b7 01       	movw	r22, r14
		 ( (pwm_duty_cycle >= 0) || (pwm_duty_cycle <= 100) )
       )
	{
#endif
		//store data in the reference object
		pwm_obj->pwm_base_obj=pwm_base;
  ba:	d8 82       	st	Y, r13
		pwm_obj->pwm_duty_cycle_obj=pwm_duty_cycle;
  bc:	cf 82       	std	Y+7, r12	; 0x07
		pwm_obj->pwm_freq_obj=pwm_freq;
  be:	eb 82       	std	Y+3, r14	; 0x03
  c0:	fc 82       	std	Y+4, r15	; 0x04
  c2:	0d 83       	std	Y+5, r16	; 0x05
  c4:	1e 83       	std	Y+6, r17	; 0x06
		pwm_obj->pwm_mode_obj=pwm_mode;
  c6:	49 83       	std	Y+1, r20	; 0x01
		pwm_obj->pwm_op_mode_obj=pwm_op_mode;
  c8:	2a 83       	std	Y+2, r18	; 0x02
		pwm_obj->pwm_module_config_state_obj=CONFIGED;
  ca:	31 e0       	ldi	r19, 0x01	; 1
  cc:	39 87       	std	Y+9, r19	; 0x09
		
		//initialization
		msa_u16 OcrRegVal;
		msa_f32  PrescalerNeeded; 
		//getting the prescaler and the OCR register value needed
		if (pwm_op_mode == FAST_PWM)
  ce:	23 30       	cpi	r18, 0x03	; 3
  d0:	51 f5       	brne	.+84     	; 0x126 <pwm_init+0x94>
		{
			PrescalerNeeded=(msa_f32)((msa_f32)Fosc/((msa_f32)pwm_freq*(msa_f32)256));
  d2:	0e 94 74 05 	call	0xae8	; 0xae8 <__floatunsisf>
  d6:	20 e0       	ldi	r18, 0x00	; 0
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	40 e8       	ldi	r20, 0x80	; 128
  dc:	53 e4       	ldi	r21, 0x43	; 67
  de:	0e 94 2b 06 	call	0xc56	; 0xc56 <__mulsf3>
  e2:	9b 01       	movw	r18, r22
  e4:	ac 01       	movw	r20, r24
  e6:	60 e0       	ldi	r22, 0x00	; 0
  e8:	74 e2       	ldi	r23, 0x24	; 36
  ea:	84 ef       	ldi	r24, 0xF4	; 244
  ec:	9a e4       	ldi	r25, 0x4A	; 74
  ee:	0e 94 02 05 	call	0xa04	; 0xa04 <__divsf3>
  f2:	2b 01       	movw	r4, r22
  f4:	3c 01       	movw	r6, r24
			
			if (pwm_mode == NON_INVERTED)
  f6:	22 e0       	ldi	r18, 0x02	; 2
  f8:	92 12       	cpse	r9, r18
  fa:	0a c0       	rjmp	.+20     	; 0x110 <pwm_init+0x7e>
			{
				OcrRegVal=(((pwm_duty_cycle*256)/100)-1);
  fc:	9c 2d       	mov	r25, r12
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	64 e6       	ldi	r22, 0x64	; 100
 102:	70 e0       	ldi	r23, 0x00	; 0
 104:	0e 94 98 06 	call	0xd30	; 0xd30 <__divmodhi4>
 108:	8b 01       	movw	r16, r22
 10a:	01 50       	subi	r16, 0x01	; 1
 10c:	11 09       	sbc	r17, r1
 10e:	36 c0       	rjmp	.+108    	; 0x17c <pwm_init+0xea>
			}
			else //inverted
			{
				OcrRegVal=255-((256*pwm_duty_cycle)/100);
 110:	9c 2d       	mov	r25, r12
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	64 e6       	ldi	r22, 0x64	; 100
 116:	70 e0       	ldi	r23, 0x00	; 0
 118:	0e 94 98 06 	call	0xd30	; 0xd30 <__divmodhi4>
 11c:	0f ef       	ldi	r16, 0xFF	; 255
 11e:	10 e0       	ldi	r17, 0x00	; 0
 120:	06 1b       	sub	r16, r22
 122:	17 0b       	sbc	r17, r23
 124:	2b c0       	rjmp	.+86     	; 0x17c <pwm_init+0xea>
			}
		}
		else //phase_correct
		{
			PrescalerNeeded=(msa_f32)((msa_f32)Fosc/((msa_f32)pwm_freq*(msa_f32)510));
 126:	0e 94 74 05 	call	0xae8	; 0xae8 <__floatunsisf>
 12a:	20 e0       	ldi	r18, 0x00	; 0
 12c:	30 e0       	ldi	r19, 0x00	; 0
 12e:	4f ef       	ldi	r20, 0xFF	; 255
 130:	53 e4       	ldi	r21, 0x43	; 67
 132:	0e 94 2b 06 	call	0xc56	; 0xc56 <__mulsf3>
 136:	9b 01       	movw	r18, r22
 138:	ac 01       	movw	r20, r24
 13a:	60 e0       	ldi	r22, 0x00	; 0
 13c:	74 e2       	ldi	r23, 0x24	; 36
 13e:	84 ef       	ldi	r24, 0xF4	; 244
 140:	9a e4       	ldi	r25, 0x4A	; 74
 142:	0e 94 02 05 	call	0xa04	; 0xa04 <__divsf3>
 146:	2b 01       	movw	r4, r22
 148:	3c 01       	movw	r6, r24
			
			if (pwm_mode == NON_INVERTED)
 14a:	52 e0       	ldi	r21, 0x02	; 2
 14c:	95 12       	cpse	r9, r21
 14e:	0a c0       	rjmp	.+20     	; 0x164 <pwm_init+0xd2>
			{
				OcrRegVal=((pwm_duty_cycle*255)/100);
 150:	2f ef       	ldi	r18, 0xFF	; 255
 152:	c2 9e       	mul	r12, r18
 154:	c0 01       	movw	r24, r0
 156:	11 24       	eor	r1, r1
 158:	64 e6       	ldi	r22, 0x64	; 100
 15a:	70 e0       	ldi	r23, 0x00	; 0
 15c:	0e 94 98 06 	call	0xd30	; 0xd30 <__divmodhi4>
 160:	8b 01       	movw	r16, r22
 162:	0c c0       	rjmp	.+24     	; 0x17c <pwm_init+0xea>
			}
			else //inverted
			{
				OcrRegVal=255-((255*pwm_duty_cycle)/100);
 164:	5f ef       	ldi	r21, 0xFF	; 255
 166:	c5 9e       	mul	r12, r21
 168:	c0 01       	movw	r24, r0
 16a:	11 24       	eor	r1, r1
 16c:	64 e6       	ldi	r22, 0x64	; 100
 16e:	70 e0       	ldi	r23, 0x00	; 0
 170:	0e 94 98 06 	call	0xd30	; 0xd30 <__divmodhi4>
 174:	0f ef       	ldi	r16, 0xFF	; 255
 176:	10 e0       	ldi	r17, 0x00	; 0
 178:	06 1b       	sub	r16, r22
 17a:	17 0b       	sbc	r17, r23
			}
		}
			 if (  PrescalerNeeded < (msa_f32)1.0) pwm_obj->prescaler_obj=NO_PRESCALER;
 17c:	20 e0       	ldi	r18, 0x00	; 0
 17e:	30 e0       	ldi	r19, 0x00	; 0
 180:	40 e8       	ldi	r20, 0x80	; 128
 182:	5f e3       	ldi	r21, 0x3F	; 63
 184:	c3 01       	movw	r24, r6
 186:	b2 01       	movw	r22, r4
 188:	0e 94 fd 04 	call	0x9fa	; 0x9fa <__cmpsf2>
 18c:	88 23       	and	r24, r24
 18e:	24 f4       	brge	.+8      	; 0x198 <pwm_init+0x106>
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	88 87       	std	Y+8, r24	; 0x08
#define ON_PWM_SRC(PORT,PIN) (PORT |= (1<<PIN) )
#define OFF_PWM_SRC(PORT,PIN) (PORT &=~ (1<<PIN) )

pwm_error_t pwm_init(st_pwm_object *pwm_obj,timer_bases_t pwm_base,pwm_output_mode_t pwm_mode,pwm_operating_mode_t pwm_op_mode,msa_u32 pwm_freq,pwm_duty_cycle_t pwm_duty_cycle)
{
	pwm_error_t ret_val=NO_PWM_ERRORS;
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	63 c0       	rjmp	.+198    	; 0x25e <pwm_init+0x1cc>
			{
				OcrRegVal=255-((255*pwm_duty_cycle)/100);
			}
		}
			 if (  PrescalerNeeded < (msa_f32)1.0) pwm_obj->prescaler_obj=NO_PRESCALER;
		else if ( (PrescalerNeeded > (msa_f32)1.0) && (PrescalerNeeded <(msa_f32)8.0) ) pwm_obj->prescaler_obj=PRESCALER_8;
 198:	20 e0       	ldi	r18, 0x00	; 0
 19a:	30 e0       	ldi	r19, 0x00	; 0
 19c:	40 e8       	ldi	r20, 0x80	; 128
 19e:	5f e3       	ldi	r21, 0x3F	; 63
 1a0:	c3 01       	movw	r24, r6
 1a2:	b2 01       	movw	r22, r4
 1a4:	0e 94 26 06 	call	0xc4c	; 0xc4c <__gesf2>
 1a8:	18 16       	cp	r1, r24
 1aa:	74 f4       	brge	.+28     	; 0x1c8 <pwm_init+0x136>
 1ac:	20 e0       	ldi	r18, 0x00	; 0
 1ae:	30 e0       	ldi	r19, 0x00	; 0
 1b0:	40 e0       	ldi	r20, 0x00	; 0
 1b2:	51 e4       	ldi	r21, 0x41	; 65
 1b4:	c3 01       	movw	r24, r6
 1b6:	b2 01       	movw	r22, r4
 1b8:	0e 94 fd 04 	call	0x9fa	; 0x9fa <__cmpsf2>
 1bc:	88 23       	and	r24, r24
 1be:	24 f4       	brge	.+8      	; 0x1c8 <pwm_init+0x136>
 1c0:	82 e0       	ldi	r24, 0x02	; 2
 1c2:	88 87       	std	Y+8, r24	; 0x08
#define ON_PWM_SRC(PORT,PIN) (PORT |= (1<<PIN) )
#define OFF_PWM_SRC(PORT,PIN) (PORT &=~ (1<<PIN) )

pwm_error_t pwm_init(st_pwm_object *pwm_obj,timer_bases_t pwm_base,pwm_output_mode_t pwm_mode,pwm_operating_mode_t pwm_op_mode,msa_u32 pwm_freq,pwm_duty_cycle_t pwm_duty_cycle)
{
	pwm_error_t ret_val=NO_PWM_ERRORS;
 1c4:	80 e0       	ldi	r24, 0x00	; 0
			{
				OcrRegVal=255-((255*pwm_duty_cycle)/100);
			}
		}
			 if (  PrescalerNeeded < (msa_f32)1.0) pwm_obj->prescaler_obj=NO_PRESCALER;
		else if ( (PrescalerNeeded > (msa_f32)1.0) && (PrescalerNeeded <(msa_f32)8.0) ) pwm_obj->prescaler_obj=PRESCALER_8;
 1c6:	4b c0       	rjmp	.+150    	; 0x25e <pwm_init+0x1cc>
		else if ( (PrescalerNeeded > (msa_f32)8.0) && (PrescalerNeeded <(msa_f32)64.0) ) pwm_obj->prescaler_obj=PRESCALER_64;
 1c8:	20 e0       	ldi	r18, 0x00	; 0
 1ca:	30 e0       	ldi	r19, 0x00	; 0
 1cc:	40 e0       	ldi	r20, 0x00	; 0
 1ce:	51 e4       	ldi	r21, 0x41	; 65
 1d0:	c3 01       	movw	r24, r6
 1d2:	b2 01       	movw	r22, r4
 1d4:	0e 94 26 06 	call	0xc4c	; 0xc4c <__gesf2>
 1d8:	18 16       	cp	r1, r24
 1da:	74 f4       	brge	.+28     	; 0x1f8 <pwm_init+0x166>
 1dc:	20 e0       	ldi	r18, 0x00	; 0
 1de:	30 e0       	ldi	r19, 0x00	; 0
 1e0:	40 e8       	ldi	r20, 0x80	; 128
 1e2:	52 e4       	ldi	r21, 0x42	; 66
 1e4:	c3 01       	movw	r24, r6
 1e6:	b2 01       	movw	r22, r4
 1e8:	0e 94 fd 04 	call	0x9fa	; 0x9fa <__cmpsf2>
 1ec:	88 23       	and	r24, r24
 1ee:	24 f4       	brge	.+8      	; 0x1f8 <pwm_init+0x166>
 1f0:	83 e0       	ldi	r24, 0x03	; 3
 1f2:	88 87       	std	Y+8, r24	; 0x08
#define ON_PWM_SRC(PORT,PIN) (PORT |= (1<<PIN) )
#define OFF_PWM_SRC(PORT,PIN) (PORT &=~ (1<<PIN) )

pwm_error_t pwm_init(st_pwm_object *pwm_obj,timer_bases_t pwm_base,pwm_output_mode_t pwm_mode,pwm_operating_mode_t pwm_op_mode,msa_u32 pwm_freq,pwm_duty_cycle_t pwm_duty_cycle)
{
	pwm_error_t ret_val=NO_PWM_ERRORS;
 1f4:	80 e0       	ldi	r24, 0x00	; 0
				OcrRegVal=255-((255*pwm_duty_cycle)/100);
			}
		}
			 if (  PrescalerNeeded < (msa_f32)1.0) pwm_obj->prescaler_obj=NO_PRESCALER;
		else if ( (PrescalerNeeded > (msa_f32)1.0) && (PrescalerNeeded <(msa_f32)8.0) ) pwm_obj->prescaler_obj=PRESCALER_8;
		else if ( (PrescalerNeeded > (msa_f32)8.0) && (PrescalerNeeded <(msa_f32)64.0) ) pwm_obj->prescaler_obj=PRESCALER_64;
 1f6:	33 c0       	rjmp	.+102    	; 0x25e <pwm_init+0x1cc>
		else if ( (PrescalerNeeded > (msa_f32)64.0) && (PrescalerNeeded <(msa_f32)256.0) ) pwm_obj->prescaler_obj=PRESCALER_256;
 1f8:	20 e0       	ldi	r18, 0x00	; 0
 1fa:	30 e0       	ldi	r19, 0x00	; 0
 1fc:	40 e8       	ldi	r20, 0x80	; 128
 1fe:	52 e4       	ldi	r21, 0x42	; 66
 200:	c3 01       	movw	r24, r6
 202:	b2 01       	movw	r22, r4
 204:	0e 94 26 06 	call	0xc4c	; 0xc4c <__gesf2>
 208:	18 16       	cp	r1, r24
 20a:	74 f4       	brge	.+28     	; 0x228 <pwm_init+0x196>
 20c:	20 e0       	ldi	r18, 0x00	; 0
 20e:	30 e0       	ldi	r19, 0x00	; 0
 210:	40 e8       	ldi	r20, 0x80	; 128
 212:	53 e4       	ldi	r21, 0x43	; 67
 214:	c3 01       	movw	r24, r6
 216:	b2 01       	movw	r22, r4
 218:	0e 94 fd 04 	call	0x9fa	; 0x9fa <__cmpsf2>
 21c:	88 23       	and	r24, r24
 21e:	24 f4       	brge	.+8      	; 0x228 <pwm_init+0x196>
 220:	84 e0       	ldi	r24, 0x04	; 4
 222:	88 87       	std	Y+8, r24	; 0x08
#define ON_PWM_SRC(PORT,PIN) (PORT |= (1<<PIN) )
#define OFF_PWM_SRC(PORT,PIN) (PORT &=~ (1<<PIN) )

pwm_error_t pwm_init(st_pwm_object *pwm_obj,timer_bases_t pwm_base,pwm_output_mode_t pwm_mode,pwm_operating_mode_t pwm_op_mode,msa_u32 pwm_freq,pwm_duty_cycle_t pwm_duty_cycle)
{
	pwm_error_t ret_val=NO_PWM_ERRORS;
 224:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
			 if (  PrescalerNeeded < (msa_f32)1.0) pwm_obj->prescaler_obj=NO_PRESCALER;
		else if ( (PrescalerNeeded > (msa_f32)1.0) && (PrescalerNeeded <(msa_f32)8.0) ) pwm_obj->prescaler_obj=PRESCALER_8;
		else if ( (PrescalerNeeded > (msa_f32)8.0) && (PrescalerNeeded <(msa_f32)64.0) ) pwm_obj->prescaler_obj=PRESCALER_64;
		else if ( (PrescalerNeeded > (msa_f32)64.0) && (PrescalerNeeded <(msa_f32)256.0) ) pwm_obj->prescaler_obj=PRESCALER_256;
 226:	1b c0       	rjmp	.+54     	; 0x25e <pwm_init+0x1cc>
		else if ( (PrescalerNeeded > (msa_f32)256.0) && (PrescalerNeeded <(msa_f32)1024.0) ) pwm_obj->prescaler_obj=PRESCALER_1024;
 228:	20 e0       	ldi	r18, 0x00	; 0
 22a:	30 e0       	ldi	r19, 0x00	; 0
 22c:	40 e8       	ldi	r20, 0x80	; 128
 22e:	53 e4       	ldi	r21, 0x43	; 67
 230:	c3 01       	movw	r24, r6
 232:	b2 01       	movw	r22, r4
 234:	0e 94 26 06 	call	0xc4c	; 0xc4c <__gesf2>
 238:	18 16       	cp	r1, r24
 23a:	74 f4       	brge	.+28     	; 0x258 <pwm_init+0x1c6>
 23c:	20 e0       	ldi	r18, 0x00	; 0
 23e:	30 e0       	ldi	r19, 0x00	; 0
 240:	40 e8       	ldi	r20, 0x80	; 128
 242:	54 e4       	ldi	r21, 0x44	; 68
 244:	c3 01       	movw	r24, r6
 246:	b2 01       	movw	r22, r4
 248:	0e 94 fd 04 	call	0x9fa	; 0x9fa <__cmpsf2>
 24c:	88 23       	and	r24, r24
 24e:	34 f4       	brge	.+12     	; 0x25c <pwm_init+0x1ca>
 250:	85 e0       	ldi	r24, 0x05	; 5
 252:	88 87       	std	Y+8, r24	; 0x08
#define ON_PWM_SRC(PORT,PIN) (PORT |= (1<<PIN) )
#define OFF_PWM_SRC(PORT,PIN) (PORT &=~ (1<<PIN) )

pwm_error_t pwm_init(st_pwm_object *pwm_obj,timer_bases_t pwm_base,pwm_output_mode_t pwm_mode,pwm_operating_mode_t pwm_op_mode,msa_u32 pwm_freq,pwm_duty_cycle_t pwm_duty_cycle)
{
	pwm_error_t ret_val=NO_PWM_ERRORS;
 254:	80 e0       	ldi	r24, 0x00	; 0
		}
			 if (  PrescalerNeeded < (msa_f32)1.0) pwm_obj->prescaler_obj=NO_PRESCALER;
		else if ( (PrescalerNeeded > (msa_f32)1.0) && (PrescalerNeeded <(msa_f32)8.0) ) pwm_obj->prescaler_obj=PRESCALER_8;
		else if ( (PrescalerNeeded > (msa_f32)8.0) && (PrescalerNeeded <(msa_f32)64.0) ) pwm_obj->prescaler_obj=PRESCALER_64;
		else if ( (PrescalerNeeded > (msa_f32)64.0) && (PrescalerNeeded <(msa_f32)256.0) ) pwm_obj->prescaler_obj=PRESCALER_256;
		else if ( (PrescalerNeeded > (msa_f32)256.0) && (PrescalerNeeded <(msa_f32)1024.0) ) pwm_obj->prescaler_obj=PRESCALER_1024;
 256:	03 c0       	rjmp	.+6      	; 0x25e <pwm_init+0x1cc>
		else ret_val=THE_NEEDED_PRESCALER_IMPOSSIBLE; 
 258:	82 e0       	ldi	r24, 0x02	; 2
 25a:	01 c0       	rjmp	.+2      	; 0x25e <pwm_init+0x1cc>
 25c:	82 e0       	ldi	r24, 0x02	; 2
		
		
		*(volatile msa_u8*)(pwm_obj->pwm_base_obj)|= pwm_obj->prescaler_obj;
 25e:	ed 2d       	mov	r30, r13
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	20 81       	ld	r18, Z
 264:	98 85       	ldd	r25, Y+8	; 0x08
 266:	92 2b       	or	r25, r18
 268:	90 83       	st	Z, r25
		*(volatile msa_u8*)(pwm_obj->pwm_base_obj)|= ( (( (pwm_obj->pwm_op_mode_obj) & 0x02)<< WGMn1) |((( (pwm_obj->pwm_op_mode_obj) & 0x01)<<WGMn0)) );
 26a:	e8 81       	ld	r30, Y
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	20 81       	ld	r18, Z
 270:	3a 81       	ldd	r19, Y+2	; 0x02
 272:	93 2f       	mov	r25, r19
 274:	92 70       	andi	r25, 0x02	; 2
 276:	99 0f       	add	r25, r25
 278:	99 0f       	add	r25, r25
 27a:	92 2b       	or	r25, r18
 27c:	30 fb       	bst	r19, 0
 27e:	aa 24       	eor	r10, r10
 280:	a0 f8       	bld	r10, 0
 282:	b1 2c       	mov	r11, r1
 284:	00 24       	eor	r0, r0
 286:	b6 94       	lsr	r11
 288:	a7 94       	ror	r10
 28a:	07 94       	ror	r0
 28c:	b6 94       	lsr	r11
 28e:	a7 94       	ror	r10
 290:	07 94       	ror	r0
 292:	ba 2c       	mov	r11, r10
 294:	a0 2c       	mov	r10, r0
 296:	a9 2a       	or	r10, r25
 298:	a0 82       	st	Z, r10
		*(volatile msa_u8*)(pwm_obj->pwm_base_obj)|= ( (pwm_obj->pwm_mode_obj)<<COMn); 
 29a:	e8 81       	ld	r30, Y
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	40 81       	ld	r20, Z
 2a0:	99 81       	ldd	r25, Y+1	; 0x01
 2a2:	50 e1       	ldi	r21, 0x10	; 16
 2a4:	95 9f       	mul	r25, r21
 2a6:	90 01       	movw	r18, r0
 2a8:	11 24       	eor	r1, r1
 2aa:	24 2b       	or	r18, r20
 2ac:	20 83       	st	Z, r18
		if (pwm_base == TIMER_0)
 2ae:	93 e5       	ldi	r25, 0x53	; 83
 2b0:	d9 12       	cpse	r13, r25
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <pwm_init+0x226>
		{
			OCR0=OcrRegVal;
 2b4:	0c bf       	out	0x3c, r16	; 60
 2b6:	04 c0       	rjmp	.+8      	; 0x2c0 <pwm_init+0x22e>
		}
		else if (pwm_base == TIMER_1)
		{
			//timer 1
		}
		else if (pwm_base == TIMER_2)
 2b8:	25 e4       	ldi	r18, 0x45	; 69
 2ba:	d2 12       	cpse	r13, r18
 2bc:	01 c0       	rjmp	.+2      	; 0x2c0 <pwm_init+0x22e>
		{
			OCR2=OcrRegVal;
 2be:	03 bd       	out	0x23, r16	; 35
	{
		ret_val=INVALID_PWM_PARAMS;
	}
#endif
	return ret_val;
}
 2c0:	df 91       	pop	r29
 2c2:	cf 91       	pop	r28
 2c4:	1f 91       	pop	r17
 2c6:	0f 91       	pop	r16
 2c8:	ff 90       	pop	r15
 2ca:	ef 90       	pop	r14
 2cc:	df 90       	pop	r13
 2ce:	cf 90       	pop	r12
 2d0:	bf 90       	pop	r11
 2d2:	af 90       	pop	r10
 2d4:	9f 90       	pop	r9
 2d6:	7f 90       	pop	r7
 2d8:	6f 90       	pop	r6
 2da:	5f 90       	pop	r5
 2dc:	4f 90       	pop	r4
 2de:	08 95       	ret

000002e0 <pwm_edit>:


pwm_error_t pwm_edit(st_pwm_object*pwm_obj,pwm_output_mode_t pwm_mode,pwm_operating_mode_t pwm_op_mode,msa_u32 pwm_freq,pwm_duty_cycle_t pwm_duty_cycle)
{
 2e0:	cf 92       	push	r12
 2e2:	ef 92       	push	r14
 2e4:	ff 92       	push	r15
 2e6:	0f 93       	push	r16
 2e8:	1f 93       	push	r17
	)
	{
		if (pwm_obj->pwm_module_config_state_obj == CONFIGED)
		{
#endif
			ret_val=pwm_init(pwm_obj,pwm_obj->pwm_base_obj,pwm_mode,pwm_op_mode,pwm_freq,pwm_duty_cycle);
 2ea:	ce 2c       	mov	r12, r14
 2ec:	78 01       	movw	r14, r16
 2ee:	89 01       	movw	r16, r18
 2f0:	24 2f       	mov	r18, r20
 2f2:	46 2f       	mov	r20, r22
 2f4:	fc 01       	movw	r30, r24
 2f6:	60 81       	ld	r22, Z
 2f8:	0e 94 49 00 	call	0x92	; 0x92 <pwm_init>
	{
		ret_val=INVALID_PWM_PARAMS;
	}
#endif
	return ret_val;
}
 2fc:	1f 91       	pop	r17
 2fe:	0f 91       	pop	r16
 300:	ff 90       	pop	r15
 302:	ef 90       	pop	r14
 304:	cf 90       	pop	r12
 306:	08 95       	ret

00000308 <hal_spiInit>:

static void (*spi_interrupt_handler)(void);

spi_error_t hal_spiInit(str_spi_objectInfo_t *strg_obj,spi_driver_base_t driver_base,spi_sck_freq_select_t	freq_select,
						spi_operating_mode_t mode,spi_notifcs_mode_t notfics_mode,spi_transfer_modes_t transfer_mode,spi_data_order_t data_order)
{
 308:	cf 92       	push	r12
 30a:	df 92       	push	r13
 30c:	ef 92       	push	r14
 30e:	0f 93       	push	r16
 310:	fc 01       	movw	r30, r24
	     (mode == SLAVE_EN || mode == MASTER_EN) && (notfics_mode == SPI_POLLING || notfics_mode == SPI_INTERRUPTING) &&
		 ((transfer_mode >= MODE_1) && (transfer_mode <= MODE_4) ) && ((data_order == LSB_FIRST)||(data_order == MSB_FIRST)) 
	  )
	{
#endif
		cli();//to finish the driver initializations first
 312:	f8 94       	cli
		//storing data 
		strg_obj->driver_base_obj	=driver_base;
 314:	60 83       	st	Z, r22
		strg_obj->driver_state_obj	=DRIVER_INITIATED;
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	86 83       	std	Z+6, r24	; 0x06
		strg_obj->freq_select_obj	=freq_select;
 31a:	41 83       	std	Z+1, r20	; 0x01
		strg_obj->mode_obj			=mode;
 31c:	22 83       	std	Z+2, r18	; 0x02
		strg_obj->transfer_mode_obj	=transfer_mode;
 31e:	e4 82       	std	Z+4, r14	; 0x04
		strg_obj->notfics_mode_obj	=notfics_mode;
 320:	03 83       	std	Z+3, r16	; 0x03
		strg_obj->data_order_obj	=data_order;
 322:	c5 82       	std	Z+5, r12	; 0x05
		
		//actual initialization
		//&
		//configuring the driver pins
		if (mode == MASTER_EN)
 324:	21 30       	cpi	r18, 0x01	; 1
 326:	19 f5       	brne	.+70     	; 0x36e <hal_spiInit+0x66>
		{
			//again,this is according to the atmega32 mcu
			SET_BIT(DDRB,SPI_PIN_SS);
 328:	bc 9a       	sbi	0x17, 4	; 23
			SET_BIT(DDRB,SPI_PIN_SCK);
 32a:	bf 9a       	sbi	0x17, 7	; 23
			SET_BIT(DDRB,SPI_PIN_MOSI);
 32c:	bd 9a       	sbi	0x17, 5	; 23
			CLEAR_BIT(DDRB,SPI_PIN_MISO);
 32e:	be 98       	cbi	0x17, 6	; 23
			//actual initialization
			*((volatile msa_u8 *)driver_base+CTRL_REG_OFFSET)	|= (freq_select & 0x03)|(transfer_mode<<CPHA)|(mode << MSTR);
 330:	e6 2f       	mov	r30, r22
 332:	f0 e0       	ldi	r31, 0x00	; 0
 334:	90 81       	ld	r25, Z
 336:	8e 2d       	mov	r24, r14
 338:	88 0f       	add	r24, r24
 33a:	88 0f       	add	r24, r24
 33c:	80 61       	ori	r24, 0x10	; 16
 33e:	24 2f       	mov	r18, r20
 340:	23 70       	andi	r18, 0x03	; 3
 342:	82 2b       	or	r24, r18
 344:	89 2b       	or	r24, r25
 346:	80 83       	st	Z, r24
			*((volatile msa_u8 *)driver_base+CTRL_REG_OFFSET)	|= (ENABLE<<SPE)|(notfics_mode<<SPIE)|(data_order<<DORD);
 348:	20 81       	ld	r18, Z
 34a:	30 e2       	ldi	r19, 0x20	; 32
 34c:	c3 9e       	mul	r12, r19
 34e:	c0 01       	movw	r24, r0
 350:	11 24       	eor	r1, r1
 352:	80 64       	ori	r24, 0x40	; 64
 354:	90 e8       	ldi	r25, 0x80	; 128
 356:	09 9f       	mul	r16, r25
 358:	60 01       	movw	r12, r0
 35a:	11 24       	eor	r1, r1
 35c:	8c 29       	or	r24, r12
 35e:	82 2b       	or	r24, r18
 360:	80 83       	st	Z, r24
			*((volatile msa_u8 *)driver_base+STATUS_REG_OFFSET) |= ( (freq_select&0xfcUL)>>2 );	//test the res is -4?? or worked well...>>edited and worked
 362:	81 81       	ldd	r24, Z+1	; 0x01
 364:	46 95       	lsr	r20
 366:	46 95       	lsr	r20
 368:	48 2b       	or	r20, r24
 36a:	41 83       	std	Z+1, r20	; 0x01
 36c:	0f c0       	rjmp	.+30     	; 0x38c <hal_spiInit+0x84>
			
		} 
		else //slave_en
		{
			//again,this is according to the atmega32 mcu
			CLEAR_BIT(DDRB,SPI_PIN_SS);
 36e:	bc 98       	cbi	0x17, 4	; 23
			CLEAR_BIT(DDRB,SPI_PIN_SCK);
 370:	bf 98       	cbi	0x17, 7	; 23
			CLEAR_BIT(DDRB,SPI_PIN_MOSI);
 372:	bd 98       	cbi	0x17, 5	; 23
			SET_BIT  (DDRB,SPI_PIN_MISO);
 374:	be 9a       	sbi	0x17, 6	; 23
			//actual initialization
			*((volatile msa_u8 *)driver_base+CTRL_REG_OFFSET)	|= (ENABLE<<SPE)|(notfics_mode<<SPIE);
 376:	e6 2f       	mov	r30, r22
 378:	f0 e0       	ldi	r31, 0x00	; 0
 37a:	90 81       	ld	r25, Z
 37c:	80 e8       	ldi	r24, 0x80	; 128
 37e:	08 9f       	mul	r16, r24
 380:	90 01       	movw	r18, r0
 382:	11 24       	eor	r1, r1
 384:	82 2f       	mov	r24, r18
 386:	80 64       	ori	r24, 0x40	; 64
 388:	89 2b       	or	r24, r25
 38a:	80 83       	st	Z, r24
			
		}
		if (notfics_mode == SPI_INTERRUPTING) //re-edit not to override the interrupt status,or the condition with the previous interrupt status
 38c:	01 30       	cpi	r16, 0x01	; 1
 38e:	09 f4       	brne	.+2      	; 0x392 <hal_spiInit+0x8a>
		{
			sei();
 390:	78 94       	sei
	{
		ret_val=INVALID_SPI_PARAMS;
	}
#endif
	return ret_val;
}
 392:	80 e0       	ldi	r24, 0x00	; 0
 394:	0f 91       	pop	r16
 396:	ef 90       	pop	r14
 398:	df 90       	pop	r13
 39a:	cf 90       	pop	r12
 39c:	08 95       	ret

0000039e <hal_spiExchangeDATA>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 39e:	25 e0       	ldi	r18, 0x05	; 5
 3a0:	2a 95       	dec	r18
 3a2:	f1 f7       	brne	.-4      	; 0x3a0 <hal_spiExchangeDATA+0x2>
 3a4:	00 00       	nop
		if (strg_obj->driver_state_obj == DRIVER_INITIATED)
		{
#endif
			_delay_us(2);////for safety but edit if made an error with the CAN Driver
			//put the outgoing byte to be sent
			(*(volatile msa_u8*)(strg_obj->driver_base_obj+DATA_REG_OFFSET))=*ByteOUT;
 3a6:	dc 01       	movw	r26, r24
 3a8:	ec 91       	ld	r30, X
 3aa:	f0 e0       	ldi	r31, 0x00	; 0
 3ac:	db 01       	movw	r26, r22
 3ae:	2c 91       	ld	r18, X
 3b0:	22 83       	std	Z+2, r18	; 0x02
			//wait the exchange completion
			while(!((*(volatile msa_u8*)(strg_obj->driver_base_obj+STATUS_REG_OFFSET)) & (1<<SPIF)))//fixed an error,was testing the 7th bit in the data reg wich is wrong
 3b2:	fc 01       	movw	r30, r24
 3b4:	a0 81       	ld	r26, Z
 3b6:	b0 e0       	ldi	r27, 0x00	; 0
 3b8:	fd 01       	movw	r30, r26
 3ba:	31 96       	adiw	r30, 0x01	; 1
 3bc:	80 81       	ld	r24, Z
 3be:	88 23       	and	r24, r24
 3c0:	ec f7       	brge	.-6      	; 0x3bc <hal_spiExchangeDATA+0x1e>
			;
			//take the incoming byte that was received
			*ByteIN=(*(volatile msa_u8*)(strg_obj->driver_base_obj+DATA_REG_OFFSET));
 3c2:	12 96       	adiw	r26, 0x02	; 2
 3c4:	8c 91       	ld	r24, X
 3c6:	da 01       	movw	r26, r20
 3c8:	8c 93       	st	X, r24
		ret_val=INVALID_SPI_PARAMS;
	}
#endif
	return ret_val;
	
}
 3ca:	80 e0       	ldi	r24, 0x00	; 0
 3cc:	08 95       	ret

000003ce <usart_init>:
	}
#endif
	return ret_val;
	
	
}
 3ce:	cf 92       	push	r12
 3d0:	ef 92       	push	r14
 3d2:	0f 93       	push	r16
 3d4:	fc 01       	movw	r30, r24
 3d6:	e1 10       	cpse	r14, r1
 3d8:	0c c0       	rjmp	.+24     	; 0x3f2 <usart_init+0x24>
 3da:	f8 94       	cli
 3dc:	61 30       	cpi	r22, 0x01	; 1
 3de:	11 f4       	brne	.+4      	; 0x3e4 <usart_init+0x16>
 3e0:	55 9a       	sbi	0x0a, 5	; 10
 3e2:	07 c0       	rjmp	.+14     	; 0x3f2 <usart_init+0x24>
 3e4:	62 30       	cpi	r22, 0x02	; 2
 3e6:	11 f4       	brne	.+4      	; 0x3ec <usart_init+0x1e>
 3e8:	57 9a       	sbi	0x0a, 7	; 10
 3ea:	03 c0       	rjmp	.+6      	; 0x3f2 <usart_init+0x24>
 3ec:	8a b1       	in	r24, 0x0a	; 10
 3ee:	80 6a       	ori	r24, 0xA0	; 160
 3f0:	8a b9       	out	0x0a, r24	; 10
 3f2:	03 83       	std	Z+3, r16	; 0x03
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	85 83       	std	Z+5, r24	; 0x05
 3f8:	e4 82       	std	Z+4, r14	; 0x04
 3fa:	61 83       	std	Z+1, r22	; 0x01
 3fc:	22 83       	std	Z+2, r18	; 0x02
 3fe:	40 83       	st	Z, r20
 400:	9a b1       	in	r25, 0x0a	; 10
 402:	80 2f       	mov	r24, r16
 404:	84 70       	andi	r24, 0x04	; 4
 406:	88 0f       	add	r24, r24
 408:	88 0f       	add	r24, r24
 40a:	89 2b       	or	r24, r25
 40c:	66 0f       	add	r22, r22
 40e:	66 0f       	add	r22, r22
 410:	66 0f       	add	r22, r22
 412:	68 2b       	or	r22, r24
 414:	6a b9       	out	0x0a, r22	; 10
 416:	44 0f       	add	r20, r20
 418:	44 0f       	add	r20, r20
 41a:	44 0f       	add	r20, r20
 41c:	8c 2d       	mov	r24, r12
 41e:	80 68       	ori	r24, 0x80	; 128
 420:	c4 2e       	mov	r12, r20
 422:	c8 2a       	or	r12, r24
 424:	80 e1       	ldi	r24, 0x10	; 16
 426:	28 9f       	mul	r18, r24
 428:	90 01       	movw	r18, r0
 42a:	11 24       	eor	r1, r1
 42c:	2c 29       	or	r18, r12
 42e:	03 70       	andi	r16, 0x03	; 3
 430:	00 0f       	add	r16, r16
 432:	20 2b       	or	r18, r16
 434:	20 bd       	out	0x20, r18	; 32
 436:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <UBRR_VAL>
 43a:	89 b9       	out	0x09, r24	; 9
 43c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <UBRR_VAL+0x1>
 440:	8f 77       	andi	r24, 0x7F	; 127
 442:	80 bd       	out	0x20, r24	; 32
 444:	e1 10       	cpse	r14, r1
 446:	01 c0       	rjmp	.+2      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 448:	78 94       	sei
 44a:	85 e1       	ldi	r24, 0x15	; 21
 44c:	0f 91       	pop	r16
 44e:	ef 90       	pop	r14
 450:	cf 90       	pop	r12
 452:	08 95       	ret

00000454 <usart_set_isr_RXC_callback>:
 454:	70 93 69 00 	sts	0x0069, r23	; 0x800069 <__data_end+0x1>
 458:	60 93 68 00 	sts	0x0068, r22	; 0x800068 <__data_end>
 45c:	85 e1       	ldi	r24, 0x15	; 21
 45e:	08 95       	ret

00000460 <__vector_13>:
//TEST LATER THE FUNCTION
ISR(USART_RXC_vect)
{
 460:	1f 92       	push	r1
 462:	0f 92       	push	r0
 464:	0f b6       	in	r0, 0x3f	; 63
 466:	0f 92       	push	r0
 468:	11 24       	eor	r1, r1
 46a:	2f 93       	push	r18
 46c:	3f 93       	push	r19
 46e:	4f 93       	push	r20
 470:	5f 93       	push	r21
 472:	6f 93       	push	r22
 474:	7f 93       	push	r23
 476:	8f 93       	push	r24
 478:	9f 93       	push	r25
 47a:	af 93       	push	r26
 47c:	bf 93       	push	r27
 47e:	ef 93       	push	r30
 480:	ff 93       	push	r31
	if (vptr_RXC_cb)
 482:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <__data_end>
 486:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <__data_end+0x1>
 48a:	30 97       	sbiw	r30, 0x00	; 0
 48c:	09 f0       	breq	.+2      	; 0x490 <__vector_13+0x30>
	{
		vptr_RXC_cb();
 48e:	09 95       	icall
	}
		
}
 490:	ff 91       	pop	r31
 492:	ef 91       	pop	r30
 494:	bf 91       	pop	r27
 496:	af 91       	pop	r26
 498:	9f 91       	pop	r25
 49a:	8f 91       	pop	r24
 49c:	7f 91       	pop	r23
 49e:	6f 91       	pop	r22
 4a0:	5f 91       	pop	r21
 4a2:	4f 91       	pop	r20
 4a4:	3f 91       	pop	r19
 4a6:	2f 91       	pop	r18
 4a8:	0f 90       	pop	r0
 4aa:	0f be       	out	0x3f, r0	; 63
 4ac:	0f 90       	pop	r0
 4ae:	1f 90       	pop	r1
 4b0:	18 95       	reti

000004b2 <usart_listen>:
}

//these will occur only if there is an emergency call from the tiva controller
void usart_listen(void)
{
	uart_data_got=UDR;
 4b2:	8c b1       	in	r24, 0x0c	; 12
 4b4:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <uart_data_got>
	PORTA=uart_data_got;
 4b8:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <uart_data_got>
 4bc:	8b bb       	out	0x1b, r24	; 27
 4be:	08 95       	ret

000004c0 <system_init>:
	return 0;
}


void system_init(void)
{
 4c0:	cf 92       	push	r12
 4c2:	ef 92       	push	r14
 4c4:	ff 92       	push	r15
 4c6:	0f 93       	push	r16
 4c8:	1f 93       	push	r17
	//LED PINS
	SET_BIT(DDRA,LED_PIN);
 4ca:	d0 9a       	sbi	0x1a, 0	; 26
	SET_BIT(DDRA,BUZ_PIN);
 4cc:	d1 9a       	sbi	0x1a, 1	; 26
	//uart init
	usart_init(&uart_obj,A_RECEIVER,ONE_STP_BIT,NO_PARITY,EIGHT,INTERRUPT_DRIVEN,FALLING_EDGE);
 4ce:	cc 24       	eor	r12, r12
 4d0:	c3 94       	inc	r12
 4d2:	e1 2c       	mov	r14, r1
 4d4:	03 e0       	ldi	r16, 0x03	; 3
 4d6:	20 e0       	ldi	r18, 0x00	; 0
 4d8:	40 e0       	ldi	r20, 0x00	; 0
 4da:	62 e0       	ldi	r22, 0x02	; 2
 4dc:	8f e9       	ldi	r24, 0x9F	; 159
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	0e 94 e7 01 	call	0x3ce	; 0x3ce <usart_init>
	usart_set_isr_RXC_callback(&uart_obj,usart_listen);
 4e4:	69 e5       	ldi	r22, 0x59	; 89
 4e6:	72 e0       	ldi	r23, 0x02	; 2
 4e8:	8f e9       	ldi	r24, 0x9F	; 159
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	0e 94 2a 02 	call	0x454	; 0x454 <usart_set_isr_RXC_callback>
		//spi init...try polling i.e wait 10 m s or the time the longest scanning task will take plus some 
	//time then ask for the status if reading is done or not
				//try to make the delay decreases by time :D 
	hal_spiInit(&spi_obj,SPI_1_base,FREQ_BY_4,MASTER_EN,SPI_POLLING,MODE_1,MSB_FIRST);
 4f0:	c1 2c       	mov	r12, r1
 4f2:	00 e0       	ldi	r16, 0x00	; 0
 4f4:	21 e0       	ldi	r18, 0x01	; 1
 4f6:	40 e0       	ldi	r20, 0x00	; 0
 4f8:	6d e2       	ldi	r22, 0x2D	; 45
 4fa:	88 e9       	ldi	r24, 0x98	; 152
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	0e 94 84 01 	call	0x308	; 0x308 <hal_spiInit>
	//pwm init
	SET_BIT(DDRB,PWM_PIN);
 502:	bb 9a       	sbi	0x17, 3	; 23
	SET_BIT(PORTB,PWM_PIN);
 504:	c3 9a       	sbi	0x18, 3	; 24
	pwm_init(&pwm_obj,TIMER_0,INVERTED,FAST_PWM,SERVO_CTRL_FREQ,1);
 506:	cc 24       	eor	r12, r12
 508:	c3 94       	inc	r12
 50a:	12 e3       	ldi	r17, 0x32	; 50
 50c:	e1 2e       	mov	r14, r17
 50e:	f1 2c       	mov	r15, r1
 510:	00 e0       	ldi	r16, 0x00	; 0
 512:	10 e0       	ldi	r17, 0x00	; 0
 514:	23 e0       	ldi	r18, 0x03	; 3
 516:	43 e0       	ldi	r20, 0x03	; 3
 518:	63 e5       	ldi	r22, 0x53	; 83
 51a:	8e e8       	ldi	r24, 0x8E	; 142
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	0e 94 49 00 	call	0x92	; 0x92 <pwm_init>
}
 522:	1f 91       	pop	r17
 524:	0f 91       	pop	r16
 526:	ff 90       	pop	r15
 528:	ef 90       	pop	r14
 52a:	cf 90       	pop	r12
 52c:	08 95       	ret

0000052e <uart_check>:

void uart_check(void)	//will be a task with a semaphore depends on the isr
{
	if(uart_data_got == STOP_SERVO)
 52e:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <uart_data_got>
 532:	8e 34       	cpi	r24, 0x4E	; 78
 534:	e1 f4       	brne	.+56     	; 0x56e <uart_check+0x40>
	{
		while (uart_data_got != RESUME_SERVO)	//will be changed by the isr
 536:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <uart_data_got>
 53a:	8f 34       	cpi	r24, 0x4F	; 79
 53c:	c1 f0       	breq	.+48     	; 0x56e <uart_check+0x40>
		{
			//uart_data_got=UDR;
			//red led on
			RED_LED_ON();
 53e:	d8 9a       	sbi	0x1b, 0	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 540:	2f e7       	ldi	r18, 0x7F	; 127
 542:	8a e1       	ldi	r24, 0x1A	; 26
 544:	96 e0       	ldi	r25, 0x06	; 6
 546:	21 50       	subi	r18, 0x01	; 1
 548:	80 40       	sbci	r24, 0x00	; 0
 54a:	90 40       	sbci	r25, 0x00	; 0
 54c:	e1 f7       	brne	.-8      	; 0x546 <uart_check+0x18>
 54e:	00 c0       	rjmp	.+0      	; 0x550 <uart_check+0x22>
 550:	00 00       	nop
			//delay 250
			_delay_ms(250);
			//red led off
			RED_LED_OF();
 552:	d8 98       	cbi	0x1b, 0	; 27
 554:	2f e7       	ldi	r18, 0x7F	; 127
 556:	8a e1       	ldi	r24, 0x1A	; 26
 558:	96 e0       	ldi	r25, 0x06	; 6
 55a:	21 50       	subi	r18, 0x01	; 1
 55c:	80 40       	sbci	r24, 0x00	; 0
 55e:	90 40       	sbci	r25, 0x00	; 0
 560:	e1 f7       	brne	.-8      	; 0x55a <uart_check+0x2c>
 562:	00 c0       	rjmp	.+0      	; 0x564 <uart_check+0x36>
 564:	00 00       	nop

void uart_check(void)	//will be a task with a semaphore depends on the isr
{
	if(uart_data_got == STOP_SERVO)
	{
		while (uart_data_got != RESUME_SERVO)	//will be changed by the isr
 566:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <uart_data_got>
 56a:	8f 34       	cpi	r24, 0x4F	; 79
 56c:	41 f7       	brne	.-48     	; 0x53e <uart_check+0x10>
			_delay_ms(250);
		}
	
	}
	//red led off
	RED_LED_OF();
 56e:	d8 98       	cbi	0x1b, 0	; 27
 570:	08 95       	ret

00000572 <main>:
volatile msa_u8 spi_temp_inn=0;
volatile msa_u8 uart_temp=0;

int main(void)
{
	system_init();
 572:	0e 94 60 02 	call	0x4c0	; 0x4c0 <system_init>
	sei();
 576:	78 94       	sei
			//pwm
			pwm_edit(&pwm_obj,INVERTED,FAST_PWM,SERVO_CTRL_FREQ,servo_direction[iteration_counter]);
			//check if uart_stop
			uart_check();
			//spi_scan ya atmega
			spi_temp_out = SCAN_YA_MEGA;
 578:	0f 2e       	mov	r0, r31
 57a:	f0 e5       	ldi	r31, 0x50	; 80
 57c:	ff 2e       	mov	r15, r31
 57e:	f0 2d       	mov	r31, r0
volatile msa_u8 spi_temp_out=0;
volatile msa_u8 spi_temp_inn=0;
volatile msa_u8 uart_temp=0;

int main(void)
{
 580:	c0 e0       	ldi	r28, 0x00	; 0
 582:	d0 e0       	ldi	r29, 0x00	; 0
	{
		// 0:1 Servo direction
		for (msa_u8 iteration_counter=0; iteration_counter < 3; iteration_counter++)
		{
			//check if uart_stop
			uart_check();
 584:	0e 94 97 02 	call	0x52e	; 0x52e <uart_check>
			//pwm
			pwm_edit(&pwm_obj,INVERTED,FAST_PWM,SERVO_CTRL_FREQ,servo_direction[iteration_counter]);
 588:	fe 01       	movw	r30, r28
 58a:	ec 59       	subi	r30, 0x9C	; 156
 58c:	ff 4f       	sbci	r31, 0xFF	; 255
 58e:	e0 80       	ld	r14, Z
 590:	02 e3       	ldi	r16, 0x32	; 50
 592:	10 e0       	ldi	r17, 0x00	; 0
 594:	20 e0       	ldi	r18, 0x00	; 0
 596:	30 e0       	ldi	r19, 0x00	; 0
 598:	43 e0       	ldi	r20, 0x03	; 3
 59a:	63 e0       	ldi	r22, 0x03	; 3
 59c:	8e e8       	ldi	r24, 0x8E	; 142
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	0e 94 70 01 	call	0x2e0	; 0x2e0 <pwm_edit>
			//check if uart_stop
			uart_check();
 5a4:	0e 94 97 02 	call	0x52e	; 0x52e <uart_check>
			//spi_scan ya atmega
			spi_temp_out = SCAN_YA_MEGA;
 5a8:	f0 92 6b 00 	sts	0x006B, r15	; 0x80006b <spi_temp_out>
			hal_spiExchangeDATA(&spi_obj,&spi_temp_out,&spi_temp_inn);
 5ac:	4a e6       	ldi	r20, 0x6A	; 106
 5ae:	50 e0       	ldi	r21, 0x00	; 0
 5b0:	6b e6       	ldi	r22, 0x6B	; 107
 5b2:	70 e0       	ldi	r23, 0x00	; 0
 5b4:	88 e9       	ldi	r24, 0x98	; 152
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	0e 94 cf 01 	call	0x39e	; 0x39e <hal_spiExchangeDATA>
			//check if uart_stop
			uart_check();
 5bc:	0e 94 97 02 	call	0x52e	; 0x52e <uart_check>
 5c0:	2f ef       	ldi	r18, 0xFF	; 255
 5c2:	84 e3       	ldi	r24, 0x34	; 52
 5c4:	9c e0       	ldi	r25, 0x0C	; 12
 5c6:	21 50       	subi	r18, 0x01	; 1
 5c8:	80 40       	sbci	r24, 0x00	; 0
 5ca:	90 40       	sbci	r25, 0x00	; 0
 5cc:	e1 f7       	brne	.-8      	; 0x5c6 <main+0x54>
 5ce:	00 c0       	rjmp	.+0      	; 0x5d0 <main+0x5e>
 5d0:	00 00       	nop
 5d2:	21 96       	adiw	r28, 0x01	; 1
	system_init();
	sei();
	while (1)
	{
		// 0:1 Servo direction
		for (msa_u8 iteration_counter=0; iteration_counter < 3; iteration_counter++)
 5d4:	c3 30       	cpi	r28, 0x03	; 3
 5d6:	d1 05       	cpc	r29, r1
 5d8:	a9 f6       	brne	.-86     	; 0x584 <main+0x12>
		}
		//2:1 servo direction
		for (msa_u8 iteration_counter=3; iteration_counter > 0; iteration_counter--)
		{
			//check if uart_stop
			uart_check();
 5da:	0e 94 97 02 	call	0x52e	; 0x52e <uart_check>
			//pwm
			pwm_edit(&pwm_obj,INVERTED,FAST_PWM,SERVO_CTRL_FREQ,servo_direction[iteration_counter]);
 5de:	fe 01       	movw	r30, r28
 5e0:	ec 59       	subi	r30, 0x9C	; 156
 5e2:	ff 4f       	sbci	r31, 0xFF	; 255
 5e4:	e0 80       	ld	r14, Z
 5e6:	02 e3       	ldi	r16, 0x32	; 50
 5e8:	10 e0       	ldi	r17, 0x00	; 0
 5ea:	20 e0       	ldi	r18, 0x00	; 0
 5ec:	30 e0       	ldi	r19, 0x00	; 0
 5ee:	43 e0       	ldi	r20, 0x03	; 3
 5f0:	63 e0       	ldi	r22, 0x03	; 3
 5f2:	8e e8       	ldi	r24, 0x8E	; 142
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	0e 94 70 01 	call	0x2e0	; 0x2e0 <pwm_edit>
			//check if uart_stop
			uart_check();
 5fa:	0e 94 97 02 	call	0x52e	; 0x52e <uart_check>
			//spi_scan ya atmega
			spi_temp_out = SCAN_YA_MEGA;
 5fe:	f0 92 6b 00 	sts	0x006B, r15	; 0x80006b <spi_temp_out>
			hal_spiExchangeDATA(&spi_obj,&spi_temp_out,&spi_temp_inn);
 602:	4a e6       	ldi	r20, 0x6A	; 106
 604:	50 e0       	ldi	r21, 0x00	; 0
 606:	6b e6       	ldi	r22, 0x6B	; 107
 608:	70 e0       	ldi	r23, 0x00	; 0
 60a:	88 e9       	ldi	r24, 0x98	; 152
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	0e 94 cf 01 	call	0x39e	; 0x39e <hal_spiExchangeDATA>
			//check if uart_stop
			uart_check();
 612:	0e 94 97 02 	call	0x52e	; 0x52e <uart_check>
 616:	2f ef       	ldi	r18, 0xFF	; 255
 618:	84 e3       	ldi	r24, 0x34	; 52
 61a:	9c e0       	ldi	r25, 0x0C	; 12
 61c:	21 50       	subi	r18, 0x01	; 1
 61e:	80 40       	sbci	r24, 0x00	; 0
 620:	90 40       	sbci	r25, 0x00	; 0
 622:	e1 f7       	brne	.-8      	; 0x61c <main+0xaa>
 624:	00 c0       	rjmp	.+0      	; 0x626 <main+0xb4>
 626:	00 00       	nop
 628:	21 97       	sbiw	r28, 0x01	; 1
			//sys_test(iteration_counter,servo_direction[iteration_counter]); 
			//wait el confirmation counter to be two 
			_delay_ms(SERVO_DELAY_VAL);//use the rtos delay instead or wait the confirm cntr to be 2
		}
		//2:1 servo direction
		for (msa_u8 iteration_counter=3; iteration_counter > 0; iteration_counter--)
 62a:	b9 f6       	brne	.-82     	; 0x5da <main+0x68>
 62c:	a9 cf       	rjmp	.-174    	; 0x580 <main+0xe>

0000062e <vListInsertEnd>:
	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
}
 62e:	cf 93       	push	r28
 630:	df 93       	push	r29
 632:	9c 01       	movw	r18, r24
 634:	fb 01       	movw	r30, r22
 636:	dc 01       	movw	r26, r24
 638:	11 96       	adiw	r26, 0x01	; 1
 63a:	cd 91       	ld	r28, X+
 63c:	dc 91       	ld	r29, X
 63e:	12 97       	sbiw	r26, 0x02	; 2
 640:	d3 83       	std	Z+3, r29	; 0x03
 642:	c2 83       	std	Z+2, r28	; 0x02
 644:	8c 81       	ldd	r24, Y+4	; 0x04
 646:	9d 81       	ldd	r25, Y+5	; 0x05
 648:	95 83       	std	Z+5, r25	; 0x05
 64a:	84 83       	std	Z+4, r24	; 0x04
 64c:	8c 81       	ldd	r24, Y+4	; 0x04
 64e:	9d 81       	ldd	r25, Y+5	; 0x05
 650:	dc 01       	movw	r26, r24
 652:	13 96       	adiw	r26, 0x03	; 3
 654:	7c 93       	st	X, r23
 656:	6e 93       	st	-X, r22
 658:	12 97       	sbiw	r26, 0x02	; 2
 65a:	7d 83       	std	Y+5, r23	; 0x05
 65c:	6c 83       	std	Y+4, r22	; 0x04
 65e:	31 87       	std	Z+9, r19	; 0x09
 660:	20 87       	std	Z+8, r18	; 0x08
 662:	f9 01       	movw	r30, r18
 664:	80 81       	ld	r24, Z
 666:	8f 5f       	subi	r24, 0xFF	; 255
 668:	80 83       	st	Z, r24
 66a:	df 91       	pop	r29
 66c:	cf 91       	pop	r28
 66e:	08 95       	ret

00000670 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 670:	cf 93       	push	r28
 672:	df 93       	push	r29
 674:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 676:	a0 85       	ldd	r26, Z+8	; 0x08
 678:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 67a:	c2 81       	ldd	r28, Z+2	; 0x02
 67c:	d3 81       	ldd	r29, Z+3	; 0x03
 67e:	84 81       	ldd	r24, Z+4	; 0x04
 680:	95 81       	ldd	r25, Z+5	; 0x05
 682:	9d 83       	std	Y+5, r25	; 0x05
 684:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 686:	c4 81       	ldd	r28, Z+4	; 0x04
 688:	d5 81       	ldd	r29, Z+5	; 0x05
 68a:	82 81       	ldd	r24, Z+2	; 0x02
 68c:	93 81       	ldd	r25, Z+3	; 0x03
 68e:	9b 83       	std	Y+3, r25	; 0x03
 690:	8a 83       	std	Y+2, r24	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 692:	11 96       	adiw	r26, 0x01	; 1
 694:	8d 91       	ld	r24, X+
 696:	9c 91       	ld	r25, X
 698:	12 97       	sbiw	r26, 0x02	; 2
 69a:	e8 17       	cp	r30, r24
 69c:	f9 07       	cpc	r31, r25
 69e:	31 f4       	brne	.+12     	; 0x6ac <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 6a0:	84 81       	ldd	r24, Z+4	; 0x04
 6a2:	95 81       	ldd	r25, Z+5	; 0x05
 6a4:	12 96       	adiw	r26, 0x02	; 2
 6a6:	9c 93       	st	X, r25
 6a8:	8e 93       	st	-X, r24
 6aa:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 6ac:	11 86       	std	Z+9, r1	; 0x09
 6ae:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
 6b0:	8c 91       	ld	r24, X
 6b2:	81 50       	subi	r24, 0x01	; 1
 6b4:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
}
 6b6:	df 91       	pop	r29
 6b8:	cf 91       	pop	r28
 6ba:	08 95       	ret

000006bc <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
 6bc:	0f 92       	push	r0
 6be:	0f b6       	in	r0, 0x3f	; 63
 6c0:	f8 94       	cli
 6c2:	0f 92       	push	r0
 6c4:	1f 92       	push	r1
 6c6:	11 24       	eor	r1, r1
 6c8:	2f 92       	push	r2
 6ca:	3f 92       	push	r3
 6cc:	4f 92       	push	r4
 6ce:	5f 92       	push	r5
 6d0:	6f 92       	push	r6
 6d2:	7f 92       	push	r7
 6d4:	8f 92       	push	r8
 6d6:	9f 92       	push	r9
 6d8:	af 92       	push	r10
 6da:	bf 92       	push	r11
 6dc:	cf 92       	push	r12
 6de:	df 92       	push	r13
 6e0:	ef 92       	push	r14
 6e2:	ff 92       	push	r15
 6e4:	0f 93       	push	r16
 6e6:	1f 93       	push	r17
 6e8:	2f 93       	push	r18
 6ea:	3f 93       	push	r19
 6ec:	4f 93       	push	r20
 6ee:	5f 93       	push	r21
 6f0:	6f 93       	push	r22
 6f2:	7f 93       	push	r23
 6f4:	8f 93       	push	r24
 6f6:	9f 93       	push	r25
 6f8:	af 93       	push	r26
 6fa:	bf 93       	push	r27
 6fc:	cf 93       	push	r28
 6fe:	df 93       	push	r29
 700:	ef 93       	push	r30
 702:	ff 93       	push	r31
 704:	a0 91 8c 00 	lds	r26, 0x008C	; 0x80008c <pxCurrentTCB>
 708:	b0 91 8d 00 	lds	r27, 0x008D	; 0x80008d <pxCurrentTCB+0x1>
 70c:	0d b6       	in	r0, 0x3d	; 61
 70e:	0d 92       	st	X+, r0
 710:	0e b6       	in	r0, 0x3e	; 62
 712:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
 714:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <xTaskIncrementTick>
 718:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
 71a:	0e 94 97 04 	call	0x92e	; 0x92e <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
 71e:	a0 91 8c 00 	lds	r26, 0x008C	; 0x80008c <pxCurrentTCB>
 722:	b0 91 8d 00 	lds	r27, 0x008D	; 0x80008d <pxCurrentTCB+0x1>
 726:	cd 91       	ld	r28, X+
 728:	cd bf       	out	0x3d, r28	; 61
 72a:	dd 91       	ld	r29, X+
 72c:	de bf       	out	0x3e, r29	; 62
 72e:	ff 91       	pop	r31
 730:	ef 91       	pop	r30
 732:	df 91       	pop	r29
 734:	cf 91       	pop	r28
 736:	bf 91       	pop	r27
 738:	af 91       	pop	r26
 73a:	9f 91       	pop	r25
 73c:	8f 91       	pop	r24
 73e:	7f 91       	pop	r23
 740:	6f 91       	pop	r22
 742:	5f 91       	pop	r21
 744:	4f 91       	pop	r20
 746:	3f 91       	pop	r19
 748:	2f 91       	pop	r18
 74a:	1f 91       	pop	r17
 74c:	0f 91       	pop	r16
 74e:	ff 90       	pop	r15
 750:	ef 90       	pop	r14
 752:	df 90       	pop	r13
 754:	cf 90       	pop	r12
 756:	bf 90       	pop	r11
 758:	af 90       	pop	r10
 75a:	9f 90       	pop	r9
 75c:	8f 90       	pop	r8
 75e:	7f 90       	pop	r7
 760:	6f 90       	pop	r6
 762:	5f 90       	pop	r5
 764:	4f 90       	pop	r4
 766:	3f 90       	pop	r3
 768:	2f 90       	pop	r2
 76a:	1f 90       	pop	r1
 76c:	0f 90       	pop	r0
 76e:	0f be       	out	0x3f, r0	; 63
 770:	0f 90       	pop	r0

	asm volatile ( "ret" );
 772:	08 95       	ret

00000774 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
 774:	0e 94 5e 03 	call	0x6bc	; 0x6bc <vPortYieldFromTick>
		asm volatile ( "reti" );
 778:	18 95       	reti

0000077a <prvResetNextTaskUnblockTime>:
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 77a:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <pxDelayedTaskList>
 77e:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <pxDelayedTaskList+0x1>
 782:	80 81       	ld	r24, Z
 784:	81 11       	cpse	r24, r1
 786:	07 c0       	rjmp	.+14     	; 0x796 <prvResetNextTaskUnblockTime+0x1c>
 788:	8f ef       	ldi	r24, 0xFF	; 255
 78a:	9f ef       	ldi	r25, 0xFF	; 255
 78c:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <xNextTaskUnblockTime+0x1>
 790:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <xNextTaskUnblockTime>
 794:	08 95       	ret
 796:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <pxDelayedTaskList>
 79a:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <pxDelayedTaskList+0x1>
 79e:	05 80       	ldd	r0, Z+5	; 0x05
 7a0:	f6 81       	ldd	r31, Z+6	; 0x06
 7a2:	e0 2d       	mov	r30, r0
 7a4:	06 80       	ldd	r0, Z+6	; 0x06
 7a6:	f7 81       	ldd	r31, Z+7	; 0x07
 7a8:	e0 2d       	mov	r30, r0
 7aa:	82 81       	ldd	r24, Z+2	; 0x02
 7ac:	93 81       	ldd	r25, Z+3	; 0x03
 7ae:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <xNextTaskUnblockTime+0x1>
 7b2:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <xNextTaskUnblockTime>
 7b6:	08 95       	ret

000007b8 <xTaskIncrementTick>:
 7b8:	cf 92       	push	r12
 7ba:	df 92       	push	r13
 7bc:	ef 92       	push	r14
 7be:	ff 92       	push	r15
 7c0:	0f 93       	push	r16
 7c2:	1f 93       	push	r17
 7c4:	cf 93       	push	r28
 7c6:	df 93       	push	r29
 7c8:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <uxSchedulerSuspended>
 7cc:	81 11       	cpse	r24, r1
 7ce:	99 c0       	rjmp	.+306    	; 0x902 <__stack+0xa3>
 7d0:	e0 90 74 00 	lds	r14, 0x0074	; 0x800074 <xTickCount>
 7d4:	f0 90 75 00 	lds	r15, 0x0075	; 0x800075 <xTickCount+0x1>
 7d8:	8f ef       	ldi	r24, 0xFF	; 255
 7da:	e8 1a       	sub	r14, r24
 7dc:	f8 0a       	sbc	r15, r24
 7de:	f0 92 75 00 	sts	0x0075, r15	; 0x800075 <xTickCount+0x1>
 7e2:	e0 92 74 00 	sts	0x0074, r14	; 0x800074 <xTickCount>
 7e6:	e1 14       	cp	r14, r1
 7e8:	f1 04       	cpc	r15, r1
 7ea:	b9 f4       	brne	.+46     	; 0x81a <xTaskIncrementTick+0x62>
 7ec:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <pxDelayedTaskList>
 7f0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <pxDelayedTaskList+0x1>
 7f4:	20 91 76 00 	lds	r18, 0x0076	; 0x800076 <pxOverflowDelayedTaskList>
 7f8:	30 91 77 00 	lds	r19, 0x0077	; 0x800077 <pxOverflowDelayedTaskList+0x1>
 7fc:	30 93 79 00 	sts	0x0079, r19	; 0x800079 <pxDelayedTaskList+0x1>
 800:	20 93 78 00 	sts	0x0078, r18	; 0x800078 <pxDelayedTaskList>
 804:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <pxOverflowDelayedTaskList+0x1>
 808:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <pxOverflowDelayedTaskList>
 80c:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <xNumOfOverflows>
 810:	8f 5f       	subi	r24, 0xFF	; 255
 812:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <xNumOfOverflows>
 816:	0e 94 bd 03 	call	0x77a	; 0x77a <prvResetNextTaskUnblockTime>
 81a:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <xNextTaskUnblockTime>
 81e:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <xNextTaskUnblockTime+0x1>
 822:	e8 16       	cp	r14, r24
 824:	f9 06       	cpc	r15, r25
 826:	10 f4       	brcc	.+4      	; 0x82c <xTaskIncrementTick+0x74>
 828:	d1 2c       	mov	r13, r1
 82a:	53 c0       	rjmp	.+166    	; 0x8d2 <__stack+0x73>
 82c:	d1 2c       	mov	r13, r1
 82e:	cc 24       	eor	r12, r12
 830:	c3 94       	inc	r12
 832:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <pxDelayedTaskList>
 836:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <pxDelayedTaskList+0x1>
 83a:	80 81       	ld	r24, Z
 83c:	81 11       	cpse	r24, r1
 83e:	07 c0       	rjmp	.+14     	; 0x84e <xTaskIncrementTick+0x96>
 840:	8f ef       	ldi	r24, 0xFF	; 255
 842:	9f ef       	ldi	r25, 0xFF	; 255
 844:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <xNextTaskUnblockTime+0x1>
 848:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <xNextTaskUnblockTime>
 84c:	42 c0       	rjmp	.+132    	; 0x8d2 <__stack+0x73>
 84e:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <pxDelayedTaskList>
 852:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <pxDelayedTaskList+0x1>
 856:	05 80       	ldd	r0, Z+5	; 0x05
 858:	f6 81       	ldd	r31, Z+6	; 0x06
 85a:	e0 2d       	mov	r30, r0
 85c:	c6 81       	ldd	r28, Z+6	; 0x06
 85e:	d7 81       	ldd	r29, Z+7	; 0x07
 860:	8a 81       	ldd	r24, Y+2	; 0x02
 862:	9b 81       	ldd	r25, Y+3	; 0x03
 864:	e8 16       	cp	r14, r24
 866:	f9 06       	cpc	r15, r25
 868:	28 f4       	brcc	.+10     	; 0x874 <__stack+0x15>
 86a:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <xNextTaskUnblockTime+0x1>
 86e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <xNextTaskUnblockTime>
 872:	2f c0       	rjmp	.+94     	; 0x8d2 <__stack+0x73>
 874:	8e 01       	movw	r16, r28
 876:	0e 5f       	subi	r16, 0xFE	; 254
 878:	1f 4f       	sbci	r17, 0xFF	; 255
 87a:	c8 01       	movw	r24, r16
 87c:	0e 94 38 03 	call	0x670	; 0x670 <uxListRemove>
 880:	8c 89       	ldd	r24, Y+20	; 0x14
 882:	9d 89       	ldd	r25, Y+21	; 0x15
 884:	89 2b       	or	r24, r25
 886:	21 f0       	breq	.+8      	; 0x890 <__stack+0x31>
 888:	ce 01       	movw	r24, r28
 88a:	0c 96       	adiw	r24, 0x0c	; 12
 88c:	0e 94 38 03 	call	0x670	; 0x670 <uxListRemove>
 890:	8e 89       	ldd	r24, Y+22	; 0x16
 892:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <uxTopReadyPriority>
 896:	98 17       	cp	r25, r24
 898:	10 f4       	brcc	.+4      	; 0x89e <__stack+0x3f>
 89a:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <uxTopReadyPriority>
 89e:	90 e0       	ldi	r25, 0x00	; 0
 8a0:	9c 01       	movw	r18, r24
 8a2:	22 0f       	add	r18, r18
 8a4:	33 1f       	adc	r19, r19
 8a6:	22 0f       	add	r18, r18
 8a8:	33 1f       	adc	r19, r19
 8aa:	22 0f       	add	r18, r18
 8ac:	33 1f       	adc	r19, r19
 8ae:	82 0f       	add	r24, r18
 8b0:	93 1f       	adc	r25, r19
 8b2:	b8 01       	movw	r22, r16
 8b4:	86 58       	subi	r24, 0x86	; 134
 8b6:	9f 4f       	sbci	r25, 0xFF	; 255
 8b8:	0e 94 17 03 	call	0x62e	; 0x62e <vListInsertEnd>
 8bc:	e0 91 8c 00 	lds	r30, 0x008C	; 0x80008c <pxCurrentTCB>
 8c0:	f0 91 8d 00 	lds	r31, 0x008D	; 0x80008d <pxCurrentTCB+0x1>
 8c4:	9e 89       	ldd	r25, Y+22	; 0x16
 8c6:	86 89       	ldd	r24, Z+22	; 0x16
 8c8:	98 17       	cp	r25, r24
 8ca:	08 f4       	brcc	.+2      	; 0x8ce <__stack+0x6f>
 8cc:	b2 cf       	rjmp	.-156    	; 0x832 <xTaskIncrementTick+0x7a>
 8ce:	dc 2c       	mov	r13, r12
 8d0:	b0 cf       	rjmp	.-160    	; 0x832 <xTaskIncrementTick+0x7a>
 8d2:	e0 91 8c 00 	lds	r30, 0x008C	; 0x80008c <pxCurrentTCB>
 8d6:	f0 91 8d 00 	lds	r31, 0x008D	; 0x80008d <pxCurrentTCB+0x1>
 8da:	86 89       	ldd	r24, Z+22	; 0x16
 8dc:	90 e0       	ldi	r25, 0x00	; 0
 8de:	fc 01       	movw	r30, r24
 8e0:	ee 0f       	add	r30, r30
 8e2:	ff 1f       	adc	r31, r31
 8e4:	ee 0f       	add	r30, r30
 8e6:	ff 1f       	adc	r31, r31
 8e8:	ee 0f       	add	r30, r30
 8ea:	ff 1f       	adc	r31, r31
 8ec:	8e 0f       	add	r24, r30
 8ee:	9f 1f       	adc	r25, r31
 8f0:	fc 01       	movw	r30, r24
 8f2:	e6 58       	subi	r30, 0x86	; 134
 8f4:	ff 4f       	sbci	r31, 0xFF	; 255
 8f6:	80 81       	ld	r24, Z
 8f8:	82 30       	cpi	r24, 0x02	; 2
 8fa:	48 f0       	brcs	.+18     	; 0x90e <__stack+0xaf>
 8fc:	dd 24       	eor	r13, r13
 8fe:	d3 94       	inc	r13
 900:	06 c0       	rjmp	.+12     	; 0x90e <__stack+0xaf>
 902:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <uxPendedTicks>
 906:	8f 5f       	subi	r24, 0xFF	; 255
 908:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <uxPendedTicks>
 90c:	d1 2c       	mov	r13, r1
 90e:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <xYieldPending>
 912:	88 23       	and	r24, r24
 914:	11 f0       	breq	.+4      	; 0x91a <__stack+0xbb>
 916:	dd 24       	eor	r13, r13
 918:	d3 94       	inc	r13
 91a:	8d 2d       	mov	r24, r13
 91c:	df 91       	pop	r29
 91e:	cf 91       	pop	r28
 920:	1f 91       	pop	r17
 922:	0f 91       	pop	r16
 924:	ff 90       	pop	r15
 926:	ef 90       	pop	r14
 928:	df 90       	pop	r13
 92a:	cf 90       	pop	r12
 92c:	08 95       	ret

0000092e <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 92e:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <uxSchedulerSuspended>
 932:	88 23       	and	r24, r24
 934:	21 f0       	breq	.+8      	; 0x93e <vTaskSwitchContext+0x10>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 936:	81 e0       	ldi	r24, 0x01	; 1
 938:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <xYieldPending>
 93c:	08 95       	ret
	}
	else
	{
		xYieldPending = pdFALSE;
 93e:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <xYieldPending>
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 942:	20 91 73 00 	lds	r18, 0x0073	; 0x800073 <uxTopReadyPriority>
 946:	82 2f       	mov	r24, r18
 948:	90 e0       	ldi	r25, 0x00	; 0
 94a:	fc 01       	movw	r30, r24
 94c:	ee 0f       	add	r30, r30
 94e:	ff 1f       	adc	r31, r31
 950:	ee 0f       	add	r30, r30
 952:	ff 1f       	adc	r31, r31
 954:	ee 0f       	add	r30, r30
 956:	ff 1f       	adc	r31, r31
 958:	e8 0f       	add	r30, r24
 95a:	f9 1f       	adc	r31, r25
 95c:	e6 58       	subi	r30, 0x86	; 134
 95e:	ff 4f       	sbci	r31, 0xFF	; 255
 960:	30 81       	ld	r19, Z
 962:	31 11       	cpse	r19, r1
 964:	11 c0       	rjmp	.+34     	; 0x988 <vTaskSwitchContext+0x5a>
 966:	21 50       	subi	r18, 0x01	; 1
 968:	82 2f       	mov	r24, r18
 96a:	90 e0       	ldi	r25, 0x00	; 0
 96c:	fc 01       	movw	r30, r24
 96e:	ee 0f       	add	r30, r30
 970:	ff 1f       	adc	r31, r31
 972:	ee 0f       	add	r30, r30
 974:	ff 1f       	adc	r31, r31
 976:	ee 0f       	add	r30, r30
 978:	ff 1f       	adc	r31, r31
 97a:	e8 0f       	add	r30, r24
 97c:	f9 1f       	adc	r31, r25
 97e:	e6 58       	subi	r30, 0x86	; 134
 980:	ff 4f       	sbci	r31, 0xFF	; 255
 982:	30 81       	ld	r19, Z
 984:	33 23       	and	r19, r19
 986:	79 f3       	breq	.-34     	; 0x966 <vTaskSwitchContext+0x38>
 988:	ac 01       	movw	r20, r24
 98a:	44 0f       	add	r20, r20
 98c:	55 1f       	adc	r21, r21
 98e:	44 0f       	add	r20, r20
 990:	55 1f       	adc	r21, r21
 992:	44 0f       	add	r20, r20
 994:	55 1f       	adc	r21, r21
 996:	48 0f       	add	r20, r24
 998:	59 1f       	adc	r21, r25
 99a:	da 01       	movw	r26, r20
 99c:	a6 58       	subi	r26, 0x86	; 134
 99e:	bf 4f       	sbci	r27, 0xFF	; 255
 9a0:	11 96       	adiw	r26, 0x01	; 1
 9a2:	ed 91       	ld	r30, X+
 9a4:	fc 91       	ld	r31, X
 9a6:	12 97       	sbiw	r26, 0x02	; 2
 9a8:	02 80       	ldd	r0, Z+2	; 0x02
 9aa:	f3 81       	ldd	r31, Z+3	; 0x03
 9ac:	e0 2d       	mov	r30, r0
 9ae:	12 96       	adiw	r26, 0x02	; 2
 9b0:	fc 93       	st	X, r31
 9b2:	ee 93       	st	-X, r30
 9b4:	11 97       	sbiw	r26, 0x01	; 1
 9b6:	43 58       	subi	r20, 0x83	; 131
 9b8:	5f 4f       	sbci	r21, 0xFF	; 255
 9ba:	e4 17       	cp	r30, r20
 9bc:	f5 07       	cpc	r31, r21
 9be:	29 f4       	brne	.+10     	; 0x9ca <vTaskSwitchContext+0x9c>
 9c0:	42 81       	ldd	r20, Z+2	; 0x02
 9c2:	53 81       	ldd	r21, Z+3	; 0x03
 9c4:	fd 01       	movw	r30, r26
 9c6:	52 83       	std	Z+2, r21	; 0x02
 9c8:	41 83       	std	Z+1, r20	; 0x01
 9ca:	fc 01       	movw	r30, r24
 9cc:	ee 0f       	add	r30, r30
 9ce:	ff 1f       	adc	r31, r31
 9d0:	ee 0f       	add	r30, r30
 9d2:	ff 1f       	adc	r31, r31
 9d4:	ee 0f       	add	r30, r30
 9d6:	ff 1f       	adc	r31, r31
 9d8:	8e 0f       	add	r24, r30
 9da:	9f 1f       	adc	r25, r31
 9dc:	fc 01       	movw	r30, r24
 9de:	e6 58       	subi	r30, 0x86	; 134
 9e0:	ff 4f       	sbci	r31, 0xFF	; 255
 9e2:	01 80       	ldd	r0, Z+1	; 0x01
 9e4:	f2 81       	ldd	r31, Z+2	; 0x02
 9e6:	e0 2d       	mov	r30, r0
 9e8:	86 81       	ldd	r24, Z+6	; 0x06
 9ea:	97 81       	ldd	r25, Z+7	; 0x07
 9ec:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <pxCurrentTCB+0x1>
 9f0:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <pxCurrentTCB>
 9f4:	20 93 73 00 	sts	0x0073, r18	; 0x800073 <uxTopReadyPriority>
 9f8:	08 95       	ret

000009fa <__cmpsf2>:
 9fa:	0e 94 b1 05 	call	0xb62	; 0xb62 <__fp_cmp>
 9fe:	08 f4       	brcc	.+2      	; 0xa02 <__cmpsf2+0x8>
 a00:	81 e0       	ldi	r24, 0x01	; 1
 a02:	08 95       	ret

00000a04 <__divsf3>:
 a04:	0e 94 16 05 	call	0xa2c	; 0xa2c <__divsf3x>
 a08:	0c 94 ec 05 	jmp	0xbd8	; 0xbd8 <__fp_round>
 a0c:	0e 94 e5 05 	call	0xbca	; 0xbca <__fp_pscB>
 a10:	58 f0       	brcs	.+22     	; 0xa28 <__divsf3+0x24>
 a12:	0e 94 de 05 	call	0xbbc	; 0xbbc <__fp_pscA>
 a16:	40 f0       	brcs	.+16     	; 0xa28 <__divsf3+0x24>
 a18:	29 f4       	brne	.+10     	; 0xa24 <__divsf3+0x20>
 a1a:	5f 3f       	cpi	r21, 0xFF	; 255
 a1c:	29 f0       	breq	.+10     	; 0xa28 <__divsf3+0x24>
 a1e:	0c 94 d5 05 	jmp	0xbaa	; 0xbaa <__fp_inf>
 a22:	51 11       	cpse	r21, r1
 a24:	0c 94 20 06 	jmp	0xc40	; 0xc40 <__fp_szero>
 a28:	0c 94 db 05 	jmp	0xbb6	; 0xbb6 <__fp_nan>

00000a2c <__divsf3x>:
 a2c:	0e 94 fd 05 	call	0xbfa	; 0xbfa <__fp_split3>
 a30:	68 f3       	brcs	.-38     	; 0xa0c <__divsf3+0x8>

00000a32 <__divsf3_pse>:
 a32:	99 23       	and	r25, r25
 a34:	b1 f3       	breq	.-20     	; 0xa22 <__divsf3+0x1e>
 a36:	55 23       	and	r21, r21
 a38:	91 f3       	breq	.-28     	; 0xa1e <__divsf3+0x1a>
 a3a:	95 1b       	sub	r25, r21
 a3c:	55 0b       	sbc	r21, r21
 a3e:	bb 27       	eor	r27, r27
 a40:	aa 27       	eor	r26, r26
 a42:	62 17       	cp	r22, r18
 a44:	73 07       	cpc	r23, r19
 a46:	84 07       	cpc	r24, r20
 a48:	38 f0       	brcs	.+14     	; 0xa58 <__divsf3_pse+0x26>
 a4a:	9f 5f       	subi	r25, 0xFF	; 255
 a4c:	5f 4f       	sbci	r21, 0xFF	; 255
 a4e:	22 0f       	add	r18, r18
 a50:	33 1f       	adc	r19, r19
 a52:	44 1f       	adc	r20, r20
 a54:	aa 1f       	adc	r26, r26
 a56:	a9 f3       	breq	.-22     	; 0xa42 <__divsf3_pse+0x10>
 a58:	35 d0       	rcall	.+106    	; 0xac4 <__divsf3_pse+0x92>
 a5a:	0e 2e       	mov	r0, r30
 a5c:	3a f0       	brmi	.+14     	; 0xa6c <__divsf3_pse+0x3a>
 a5e:	e0 e8       	ldi	r30, 0x80	; 128
 a60:	32 d0       	rcall	.+100    	; 0xac6 <__divsf3_pse+0x94>
 a62:	91 50       	subi	r25, 0x01	; 1
 a64:	50 40       	sbci	r21, 0x00	; 0
 a66:	e6 95       	lsr	r30
 a68:	00 1c       	adc	r0, r0
 a6a:	ca f7       	brpl	.-14     	; 0xa5e <__divsf3_pse+0x2c>
 a6c:	2b d0       	rcall	.+86     	; 0xac4 <__divsf3_pse+0x92>
 a6e:	fe 2f       	mov	r31, r30
 a70:	29 d0       	rcall	.+82     	; 0xac4 <__divsf3_pse+0x92>
 a72:	66 0f       	add	r22, r22
 a74:	77 1f       	adc	r23, r23
 a76:	88 1f       	adc	r24, r24
 a78:	bb 1f       	adc	r27, r27
 a7a:	26 17       	cp	r18, r22
 a7c:	37 07       	cpc	r19, r23
 a7e:	48 07       	cpc	r20, r24
 a80:	ab 07       	cpc	r26, r27
 a82:	b0 e8       	ldi	r27, 0x80	; 128
 a84:	09 f0       	breq	.+2      	; 0xa88 <__divsf3_pse+0x56>
 a86:	bb 0b       	sbc	r27, r27
 a88:	80 2d       	mov	r24, r0
 a8a:	bf 01       	movw	r22, r30
 a8c:	ff 27       	eor	r31, r31
 a8e:	93 58       	subi	r25, 0x83	; 131
 a90:	5f 4f       	sbci	r21, 0xFF	; 255
 a92:	3a f0       	brmi	.+14     	; 0xaa2 <__divsf3_pse+0x70>
 a94:	9e 3f       	cpi	r25, 0xFE	; 254
 a96:	51 05       	cpc	r21, r1
 a98:	78 f0       	brcs	.+30     	; 0xab8 <__divsf3_pse+0x86>
 a9a:	0c 94 d5 05 	jmp	0xbaa	; 0xbaa <__fp_inf>
 a9e:	0c 94 20 06 	jmp	0xc40	; 0xc40 <__fp_szero>
 aa2:	5f 3f       	cpi	r21, 0xFF	; 255
 aa4:	e4 f3       	brlt	.-8      	; 0xa9e <__divsf3_pse+0x6c>
 aa6:	98 3e       	cpi	r25, 0xE8	; 232
 aa8:	d4 f3       	brlt	.-12     	; 0xa9e <__divsf3_pse+0x6c>
 aaa:	86 95       	lsr	r24
 aac:	77 95       	ror	r23
 aae:	67 95       	ror	r22
 ab0:	b7 95       	ror	r27
 ab2:	f7 95       	ror	r31
 ab4:	9f 5f       	subi	r25, 0xFF	; 255
 ab6:	c9 f7       	brne	.-14     	; 0xaaa <__divsf3_pse+0x78>
 ab8:	88 0f       	add	r24, r24
 aba:	91 1d       	adc	r25, r1
 abc:	96 95       	lsr	r25
 abe:	87 95       	ror	r24
 ac0:	97 f9       	bld	r25, 7
 ac2:	08 95       	ret
 ac4:	e1 e0       	ldi	r30, 0x01	; 1
 ac6:	66 0f       	add	r22, r22
 ac8:	77 1f       	adc	r23, r23
 aca:	88 1f       	adc	r24, r24
 acc:	bb 1f       	adc	r27, r27
 ace:	62 17       	cp	r22, r18
 ad0:	73 07       	cpc	r23, r19
 ad2:	84 07       	cpc	r24, r20
 ad4:	ba 07       	cpc	r27, r26
 ad6:	20 f0       	brcs	.+8      	; 0xae0 <__divsf3_pse+0xae>
 ad8:	62 1b       	sub	r22, r18
 ada:	73 0b       	sbc	r23, r19
 adc:	84 0b       	sbc	r24, r20
 ade:	ba 0b       	sbc	r27, r26
 ae0:	ee 1f       	adc	r30, r30
 ae2:	88 f7       	brcc	.-30     	; 0xac6 <__divsf3_pse+0x94>
 ae4:	e0 95       	com	r30
 ae6:	08 95       	ret

00000ae8 <__floatunsisf>:
 ae8:	e8 94       	clt
 aea:	09 c0       	rjmp	.+18     	; 0xafe <__floatsisf+0x12>

00000aec <__floatsisf>:
 aec:	97 fb       	bst	r25, 7
 aee:	3e f4       	brtc	.+14     	; 0xafe <__floatsisf+0x12>
 af0:	90 95       	com	r25
 af2:	80 95       	com	r24
 af4:	70 95       	com	r23
 af6:	61 95       	neg	r22
 af8:	7f 4f       	sbci	r23, 0xFF	; 255
 afa:	8f 4f       	sbci	r24, 0xFF	; 255
 afc:	9f 4f       	sbci	r25, 0xFF	; 255
 afe:	99 23       	and	r25, r25
 b00:	a9 f0       	breq	.+42     	; 0xb2c <__floatsisf+0x40>
 b02:	f9 2f       	mov	r31, r25
 b04:	96 e9       	ldi	r25, 0x96	; 150
 b06:	bb 27       	eor	r27, r27
 b08:	93 95       	inc	r25
 b0a:	f6 95       	lsr	r31
 b0c:	87 95       	ror	r24
 b0e:	77 95       	ror	r23
 b10:	67 95       	ror	r22
 b12:	b7 95       	ror	r27
 b14:	f1 11       	cpse	r31, r1
 b16:	f8 cf       	rjmp	.-16     	; 0xb08 <__floatsisf+0x1c>
 b18:	fa f4       	brpl	.+62     	; 0xb58 <__floatsisf+0x6c>
 b1a:	bb 0f       	add	r27, r27
 b1c:	11 f4       	brne	.+4      	; 0xb22 <__floatsisf+0x36>
 b1e:	60 ff       	sbrs	r22, 0
 b20:	1b c0       	rjmp	.+54     	; 0xb58 <__floatsisf+0x6c>
 b22:	6f 5f       	subi	r22, 0xFF	; 255
 b24:	7f 4f       	sbci	r23, 0xFF	; 255
 b26:	8f 4f       	sbci	r24, 0xFF	; 255
 b28:	9f 4f       	sbci	r25, 0xFF	; 255
 b2a:	16 c0       	rjmp	.+44     	; 0xb58 <__floatsisf+0x6c>
 b2c:	88 23       	and	r24, r24
 b2e:	11 f0       	breq	.+4      	; 0xb34 <__floatsisf+0x48>
 b30:	96 e9       	ldi	r25, 0x96	; 150
 b32:	11 c0       	rjmp	.+34     	; 0xb56 <__floatsisf+0x6a>
 b34:	77 23       	and	r23, r23
 b36:	21 f0       	breq	.+8      	; 0xb40 <__floatsisf+0x54>
 b38:	9e e8       	ldi	r25, 0x8E	; 142
 b3a:	87 2f       	mov	r24, r23
 b3c:	76 2f       	mov	r23, r22
 b3e:	05 c0       	rjmp	.+10     	; 0xb4a <__floatsisf+0x5e>
 b40:	66 23       	and	r22, r22
 b42:	71 f0       	breq	.+28     	; 0xb60 <__floatsisf+0x74>
 b44:	96 e8       	ldi	r25, 0x86	; 134
 b46:	86 2f       	mov	r24, r22
 b48:	70 e0       	ldi	r23, 0x00	; 0
 b4a:	60 e0       	ldi	r22, 0x00	; 0
 b4c:	2a f0       	brmi	.+10     	; 0xb58 <__floatsisf+0x6c>
 b4e:	9a 95       	dec	r25
 b50:	66 0f       	add	r22, r22
 b52:	77 1f       	adc	r23, r23
 b54:	88 1f       	adc	r24, r24
 b56:	da f7       	brpl	.-10     	; 0xb4e <__floatsisf+0x62>
 b58:	88 0f       	add	r24, r24
 b5a:	96 95       	lsr	r25
 b5c:	87 95       	ror	r24
 b5e:	97 f9       	bld	r25, 7
 b60:	08 95       	ret

00000b62 <__fp_cmp>:
 b62:	99 0f       	add	r25, r25
 b64:	00 08       	sbc	r0, r0
 b66:	55 0f       	add	r21, r21
 b68:	aa 0b       	sbc	r26, r26
 b6a:	e0 e8       	ldi	r30, 0x80	; 128
 b6c:	fe ef       	ldi	r31, 0xFE	; 254
 b6e:	16 16       	cp	r1, r22
 b70:	17 06       	cpc	r1, r23
 b72:	e8 07       	cpc	r30, r24
 b74:	f9 07       	cpc	r31, r25
 b76:	c0 f0       	brcs	.+48     	; 0xba8 <__fp_cmp+0x46>
 b78:	12 16       	cp	r1, r18
 b7a:	13 06       	cpc	r1, r19
 b7c:	e4 07       	cpc	r30, r20
 b7e:	f5 07       	cpc	r31, r21
 b80:	98 f0       	brcs	.+38     	; 0xba8 <__fp_cmp+0x46>
 b82:	62 1b       	sub	r22, r18
 b84:	73 0b       	sbc	r23, r19
 b86:	84 0b       	sbc	r24, r20
 b88:	95 0b       	sbc	r25, r21
 b8a:	39 f4       	brne	.+14     	; 0xb9a <__fp_cmp+0x38>
 b8c:	0a 26       	eor	r0, r26
 b8e:	61 f0       	breq	.+24     	; 0xba8 <__fp_cmp+0x46>
 b90:	23 2b       	or	r18, r19
 b92:	24 2b       	or	r18, r20
 b94:	25 2b       	or	r18, r21
 b96:	21 f4       	brne	.+8      	; 0xba0 <__fp_cmp+0x3e>
 b98:	08 95       	ret
 b9a:	0a 26       	eor	r0, r26
 b9c:	09 f4       	brne	.+2      	; 0xba0 <__fp_cmp+0x3e>
 b9e:	a1 40       	sbci	r26, 0x01	; 1
 ba0:	a6 95       	lsr	r26
 ba2:	8f ef       	ldi	r24, 0xFF	; 255
 ba4:	81 1d       	adc	r24, r1
 ba6:	81 1d       	adc	r24, r1
 ba8:	08 95       	ret

00000baa <__fp_inf>:
 baa:	97 f9       	bld	r25, 7
 bac:	9f 67       	ori	r25, 0x7F	; 127
 bae:	80 e8       	ldi	r24, 0x80	; 128
 bb0:	70 e0       	ldi	r23, 0x00	; 0
 bb2:	60 e0       	ldi	r22, 0x00	; 0
 bb4:	08 95       	ret

00000bb6 <__fp_nan>:
 bb6:	9f ef       	ldi	r25, 0xFF	; 255
 bb8:	80 ec       	ldi	r24, 0xC0	; 192
 bba:	08 95       	ret

00000bbc <__fp_pscA>:
 bbc:	00 24       	eor	r0, r0
 bbe:	0a 94       	dec	r0
 bc0:	16 16       	cp	r1, r22
 bc2:	17 06       	cpc	r1, r23
 bc4:	18 06       	cpc	r1, r24
 bc6:	09 06       	cpc	r0, r25
 bc8:	08 95       	ret

00000bca <__fp_pscB>:
 bca:	00 24       	eor	r0, r0
 bcc:	0a 94       	dec	r0
 bce:	12 16       	cp	r1, r18
 bd0:	13 06       	cpc	r1, r19
 bd2:	14 06       	cpc	r1, r20
 bd4:	05 06       	cpc	r0, r21
 bd6:	08 95       	ret

00000bd8 <__fp_round>:
 bd8:	09 2e       	mov	r0, r25
 bda:	03 94       	inc	r0
 bdc:	00 0c       	add	r0, r0
 bde:	11 f4       	brne	.+4      	; 0xbe4 <__fp_round+0xc>
 be0:	88 23       	and	r24, r24
 be2:	52 f0       	brmi	.+20     	; 0xbf8 <__fp_round+0x20>
 be4:	bb 0f       	add	r27, r27
 be6:	40 f4       	brcc	.+16     	; 0xbf8 <__fp_round+0x20>
 be8:	bf 2b       	or	r27, r31
 bea:	11 f4       	brne	.+4      	; 0xbf0 <__fp_round+0x18>
 bec:	60 ff       	sbrs	r22, 0
 bee:	04 c0       	rjmp	.+8      	; 0xbf8 <__fp_round+0x20>
 bf0:	6f 5f       	subi	r22, 0xFF	; 255
 bf2:	7f 4f       	sbci	r23, 0xFF	; 255
 bf4:	8f 4f       	sbci	r24, 0xFF	; 255
 bf6:	9f 4f       	sbci	r25, 0xFF	; 255
 bf8:	08 95       	ret

00000bfa <__fp_split3>:
 bfa:	57 fd       	sbrc	r21, 7
 bfc:	90 58       	subi	r25, 0x80	; 128
 bfe:	44 0f       	add	r20, r20
 c00:	55 1f       	adc	r21, r21
 c02:	59 f0       	breq	.+22     	; 0xc1a <__fp_splitA+0x10>
 c04:	5f 3f       	cpi	r21, 0xFF	; 255
 c06:	71 f0       	breq	.+28     	; 0xc24 <__fp_splitA+0x1a>
 c08:	47 95       	ror	r20

00000c0a <__fp_splitA>:
 c0a:	88 0f       	add	r24, r24
 c0c:	97 fb       	bst	r25, 7
 c0e:	99 1f       	adc	r25, r25
 c10:	61 f0       	breq	.+24     	; 0xc2a <__fp_splitA+0x20>
 c12:	9f 3f       	cpi	r25, 0xFF	; 255
 c14:	79 f0       	breq	.+30     	; 0xc34 <__fp_splitA+0x2a>
 c16:	87 95       	ror	r24
 c18:	08 95       	ret
 c1a:	12 16       	cp	r1, r18
 c1c:	13 06       	cpc	r1, r19
 c1e:	14 06       	cpc	r1, r20
 c20:	55 1f       	adc	r21, r21
 c22:	f2 cf       	rjmp	.-28     	; 0xc08 <__fp_split3+0xe>
 c24:	46 95       	lsr	r20
 c26:	f1 df       	rcall	.-30     	; 0xc0a <__fp_splitA>
 c28:	08 c0       	rjmp	.+16     	; 0xc3a <__fp_splitA+0x30>
 c2a:	16 16       	cp	r1, r22
 c2c:	17 06       	cpc	r1, r23
 c2e:	18 06       	cpc	r1, r24
 c30:	99 1f       	adc	r25, r25
 c32:	f1 cf       	rjmp	.-30     	; 0xc16 <__fp_splitA+0xc>
 c34:	86 95       	lsr	r24
 c36:	71 05       	cpc	r23, r1
 c38:	61 05       	cpc	r22, r1
 c3a:	08 94       	sec
 c3c:	08 95       	ret

00000c3e <__fp_zero>:
 c3e:	e8 94       	clt

00000c40 <__fp_szero>:
 c40:	bb 27       	eor	r27, r27
 c42:	66 27       	eor	r22, r22
 c44:	77 27       	eor	r23, r23
 c46:	cb 01       	movw	r24, r22
 c48:	97 f9       	bld	r25, 7
 c4a:	08 95       	ret

00000c4c <__gesf2>:
 c4c:	0e 94 b1 05 	call	0xb62	; 0xb62 <__fp_cmp>
 c50:	08 f4       	brcc	.+2      	; 0xc54 <__gesf2+0x8>
 c52:	8f ef       	ldi	r24, 0xFF	; 255
 c54:	08 95       	ret

00000c56 <__mulsf3>:
 c56:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__mulsf3x>
 c5a:	0c 94 ec 05 	jmp	0xbd8	; 0xbd8 <__fp_round>
 c5e:	0e 94 de 05 	call	0xbbc	; 0xbbc <__fp_pscA>
 c62:	38 f0       	brcs	.+14     	; 0xc72 <__mulsf3+0x1c>
 c64:	0e 94 e5 05 	call	0xbca	; 0xbca <__fp_pscB>
 c68:	20 f0       	brcs	.+8      	; 0xc72 <__mulsf3+0x1c>
 c6a:	95 23       	and	r25, r21
 c6c:	11 f0       	breq	.+4      	; 0xc72 <__mulsf3+0x1c>
 c6e:	0c 94 d5 05 	jmp	0xbaa	; 0xbaa <__fp_inf>
 c72:	0c 94 db 05 	jmp	0xbb6	; 0xbb6 <__fp_nan>
 c76:	11 24       	eor	r1, r1
 c78:	0c 94 20 06 	jmp	0xc40	; 0xc40 <__fp_szero>

00000c7c <__mulsf3x>:
 c7c:	0e 94 fd 05 	call	0xbfa	; 0xbfa <__fp_split3>
 c80:	70 f3       	brcs	.-36     	; 0xc5e <__mulsf3+0x8>

00000c82 <__mulsf3_pse>:
 c82:	95 9f       	mul	r25, r21
 c84:	c1 f3       	breq	.-16     	; 0xc76 <__mulsf3+0x20>
 c86:	95 0f       	add	r25, r21
 c88:	50 e0       	ldi	r21, 0x00	; 0
 c8a:	55 1f       	adc	r21, r21
 c8c:	62 9f       	mul	r22, r18
 c8e:	f0 01       	movw	r30, r0
 c90:	72 9f       	mul	r23, r18
 c92:	bb 27       	eor	r27, r27
 c94:	f0 0d       	add	r31, r0
 c96:	b1 1d       	adc	r27, r1
 c98:	63 9f       	mul	r22, r19
 c9a:	aa 27       	eor	r26, r26
 c9c:	f0 0d       	add	r31, r0
 c9e:	b1 1d       	adc	r27, r1
 ca0:	aa 1f       	adc	r26, r26
 ca2:	64 9f       	mul	r22, r20
 ca4:	66 27       	eor	r22, r22
 ca6:	b0 0d       	add	r27, r0
 ca8:	a1 1d       	adc	r26, r1
 caa:	66 1f       	adc	r22, r22
 cac:	82 9f       	mul	r24, r18
 cae:	22 27       	eor	r18, r18
 cb0:	b0 0d       	add	r27, r0
 cb2:	a1 1d       	adc	r26, r1
 cb4:	62 1f       	adc	r22, r18
 cb6:	73 9f       	mul	r23, r19
 cb8:	b0 0d       	add	r27, r0
 cba:	a1 1d       	adc	r26, r1
 cbc:	62 1f       	adc	r22, r18
 cbe:	83 9f       	mul	r24, r19
 cc0:	a0 0d       	add	r26, r0
 cc2:	61 1d       	adc	r22, r1
 cc4:	22 1f       	adc	r18, r18
 cc6:	74 9f       	mul	r23, r20
 cc8:	33 27       	eor	r19, r19
 cca:	a0 0d       	add	r26, r0
 ccc:	61 1d       	adc	r22, r1
 cce:	23 1f       	adc	r18, r19
 cd0:	84 9f       	mul	r24, r20
 cd2:	60 0d       	add	r22, r0
 cd4:	21 1d       	adc	r18, r1
 cd6:	82 2f       	mov	r24, r18
 cd8:	76 2f       	mov	r23, r22
 cda:	6a 2f       	mov	r22, r26
 cdc:	11 24       	eor	r1, r1
 cde:	9f 57       	subi	r25, 0x7F	; 127
 ce0:	50 40       	sbci	r21, 0x00	; 0
 ce2:	9a f0       	brmi	.+38     	; 0xd0a <__mulsf3_pse+0x88>
 ce4:	f1 f0       	breq	.+60     	; 0xd22 <__mulsf3_pse+0xa0>
 ce6:	88 23       	and	r24, r24
 ce8:	4a f0       	brmi	.+18     	; 0xcfc <__mulsf3_pse+0x7a>
 cea:	ee 0f       	add	r30, r30
 cec:	ff 1f       	adc	r31, r31
 cee:	bb 1f       	adc	r27, r27
 cf0:	66 1f       	adc	r22, r22
 cf2:	77 1f       	adc	r23, r23
 cf4:	88 1f       	adc	r24, r24
 cf6:	91 50       	subi	r25, 0x01	; 1
 cf8:	50 40       	sbci	r21, 0x00	; 0
 cfa:	a9 f7       	brne	.-22     	; 0xce6 <__mulsf3_pse+0x64>
 cfc:	9e 3f       	cpi	r25, 0xFE	; 254
 cfe:	51 05       	cpc	r21, r1
 d00:	80 f0       	brcs	.+32     	; 0xd22 <__mulsf3_pse+0xa0>
 d02:	0c 94 d5 05 	jmp	0xbaa	; 0xbaa <__fp_inf>
 d06:	0c 94 20 06 	jmp	0xc40	; 0xc40 <__fp_szero>
 d0a:	5f 3f       	cpi	r21, 0xFF	; 255
 d0c:	e4 f3       	brlt	.-8      	; 0xd06 <__mulsf3_pse+0x84>
 d0e:	98 3e       	cpi	r25, 0xE8	; 232
 d10:	d4 f3       	brlt	.-12     	; 0xd06 <__mulsf3_pse+0x84>
 d12:	86 95       	lsr	r24
 d14:	77 95       	ror	r23
 d16:	67 95       	ror	r22
 d18:	b7 95       	ror	r27
 d1a:	f7 95       	ror	r31
 d1c:	e7 95       	ror	r30
 d1e:	9f 5f       	subi	r25, 0xFF	; 255
 d20:	c1 f7       	brne	.-16     	; 0xd12 <__mulsf3_pse+0x90>
 d22:	fe 2b       	or	r31, r30
 d24:	88 0f       	add	r24, r24
 d26:	91 1d       	adc	r25, r1
 d28:	96 95       	lsr	r25
 d2a:	87 95       	ror	r24
 d2c:	97 f9       	bld	r25, 7
 d2e:	08 95       	ret

00000d30 <__divmodhi4>:
 d30:	97 fb       	bst	r25, 7
 d32:	07 2e       	mov	r0, r23
 d34:	16 f4       	brtc	.+4      	; 0xd3a <__divmodhi4+0xa>
 d36:	00 94       	com	r0
 d38:	07 d0       	rcall	.+14     	; 0xd48 <__divmodhi4_neg1>
 d3a:	77 fd       	sbrc	r23, 7
 d3c:	09 d0       	rcall	.+18     	; 0xd50 <__divmodhi4_neg2>
 d3e:	0e 94 ac 06 	call	0xd58	; 0xd58 <__udivmodhi4>
 d42:	07 fc       	sbrc	r0, 7
 d44:	05 d0       	rcall	.+10     	; 0xd50 <__divmodhi4_neg2>
 d46:	3e f4       	brtc	.+14     	; 0xd56 <__divmodhi4_exit>

00000d48 <__divmodhi4_neg1>:
 d48:	90 95       	com	r25
 d4a:	81 95       	neg	r24
 d4c:	9f 4f       	sbci	r25, 0xFF	; 255
 d4e:	08 95       	ret

00000d50 <__divmodhi4_neg2>:
 d50:	70 95       	com	r23
 d52:	61 95       	neg	r22
 d54:	7f 4f       	sbci	r23, 0xFF	; 255

00000d56 <__divmodhi4_exit>:
 d56:	08 95       	ret

00000d58 <__udivmodhi4>:
 d58:	aa 1b       	sub	r26, r26
 d5a:	bb 1b       	sub	r27, r27
 d5c:	51 e1       	ldi	r21, 0x11	; 17
 d5e:	07 c0       	rjmp	.+14     	; 0xd6e <__udivmodhi4_ep>

00000d60 <__udivmodhi4_loop>:
 d60:	aa 1f       	adc	r26, r26
 d62:	bb 1f       	adc	r27, r27
 d64:	a6 17       	cp	r26, r22
 d66:	b7 07       	cpc	r27, r23
 d68:	10 f0       	brcs	.+4      	; 0xd6e <__udivmodhi4_ep>
 d6a:	a6 1b       	sub	r26, r22
 d6c:	b7 0b       	sbc	r27, r23

00000d6e <__udivmodhi4_ep>:
 d6e:	88 1f       	adc	r24, r24
 d70:	99 1f       	adc	r25, r25
 d72:	5a 95       	dec	r21
 d74:	a9 f7       	brne	.-22     	; 0xd60 <__udivmodhi4_loop>
 d76:	80 95       	com	r24
 d78:	90 95       	com	r25
 d7a:	bc 01       	movw	r22, r24
 d7c:	cd 01       	movw	r24, r26
 d7e:	08 95       	ret

00000d80 <_exit>:
 d80:	f8 94       	cli

00000d82 <__stop_program>:
 d82:	ff cf       	rjmp	.-2      	; 0xd82 <__stop_program>
