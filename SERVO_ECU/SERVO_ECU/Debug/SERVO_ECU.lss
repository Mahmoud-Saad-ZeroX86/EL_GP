
SERVO_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001186  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000150  00800060  00001186  0000121a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000056  008001b0  008001b0  0000136a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000136a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000139c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000350  00000000  00000000  000013d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004a00  00000000  00000000  00001728  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011ae  00000000  00000000  00006128  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002381  00000000  00000000  000072d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009dc  00000000  00000000  00009658  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000197b  00000000  00000000  0000a034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003355  00000000  00000000  0000b9af  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000320  00000000  00000000  0000ed04  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 ee 03 	jmp	0x7dc	; 0x7dc <__vector_1>
       8:	0c 94 30 04 	jmp	0x860	; 0x860 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 15 05 	jmp	0xa2a	; 0xa2a <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 c4 02 	jmp	0x588	; 0x588 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e8       	ldi	r30, 0x86	; 134
      68:	f1 e1       	ldi	r31, 0x11	; 17
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a0 3b       	cpi	r26, 0xB0	; 176
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	22 e0       	ldi	r18, 0x02	; 2
      78:	a0 eb       	ldi	r26, 0xB0	; 176
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 30       	cpi	r26, 0x06	; 6
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ed 02 	call	0x5da	; 0x5da <main>
      8a:	0c 94 c1 08 	jmp	0x1182	; 0x1182 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <init_interrrupts>:
static unsigned char isr_status=NOT_CONFIGED;

INT_ERRORS init_interrrupts(void)
{	
	INT_ERRORS ret_val=NO_ERRORS;
	if(isr_status == NOT_CONFIGED)
      92:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <__data_end>
      96:	81 11       	cpse	r24, r1
      98:	06 c0       	rjmp	.+12     	; 0xa6 <init_interrrupts+0x14>
	{
	*((volatile unsigned char *)0x5f)|=(1<<G_INTERRUPTS_msa);			//Global Interrupt Enable
      9a:	8f b7       	in	r24, 0x3f	; 63
      9c:	80 68       	ori	r24, 0x80	; 128
      9e:	8f bf       	out	0x3f, r24	; 63
	isr_status=CONFIGED;
      a0:	81 e0       	ldi	r24, 0x01	; 1
      a2:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <__data_end>
	}
	return ret_val;
}
      a6:	80 e0       	ldi	r24, 0x00	; 0
      a8:	08 95       	ret

000000aa <set_interrupt>:
INT_ERRORS set_interrupt(INT_NAMES int_name,INT_MODES int_mode)
{
	INT_ERRORS ret_val=NO_ERRORS;
	if ( isr_status == CONFIGED )
      aa:	90 91 b0 01 	lds	r25, 0x01B0	; 0x8001b0 <__data_end>
      ae:	91 30       	cpi	r25, 0x01	; 1
      b0:	09 f0       	breq	.+2      	; 0xb4 <set_interrupt+0xa>
      b2:	4e c0       	rjmp	.+156    	; 0x150 <set_interrupt+0xa6>
	{
		if ( ((int_name >= INTERRUPT2)&&(int_name <= INTERRUPT1)) 
      b4:	9b ef       	ldi	r25, 0xFB	; 251
      b6:	98 0f       	add	r25, r24
      b8:	93 30       	cpi	r25, 0x03	; 3
      ba:	08 f0       	brcs	.+2      	; 0xbe <set_interrupt+0x14>
      bc:	4b c0       	rjmp	.+150    	; 0x154 <set_interrupt+0xaa>
		  && ((int_mode >= LOW_LEVEL)&&(int_mode <= RISING_EDGE)) )
      be:	64 30       	cpi	r22, 0x04	; 4
      c0:	08 f0       	brcs	.+2      	; 0xc4 <set_interrupt+0x1a>
      c2:	4a c0       	rjmp	.+148    	; 0x158 <set_interrupt+0xae>
		{
			*((volatile unsigned char *)0x5B)|=(1<<int_name);	//enabling Interrupt X
      c4:	9b b7       	in	r25, 0x3b	; 59
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	30 e0       	ldi	r19, 0x00	; 0
      ca:	08 2e       	mov	r0, r24
      cc:	02 c0       	rjmp	.+4      	; 0xd2 <set_interrupt+0x28>
      ce:	22 0f       	add	r18, r18
      d0:	33 1f       	adc	r19, r19
      d2:	0a 94       	dec	r0
      d4:	e2 f7       	brpl	.-8      	; 0xce <set_interrupt+0x24>
      d6:	29 2b       	or	r18, r25
      d8:	2b bf       	out	0x3b, r18	; 59
			if (int_name == INTERRUPT0)
      da:	86 30       	cpi	r24, 0x06	; 6
      dc:	c1 f4       	brne	.+48     	; 0x10e <set_interrupt+0x64>
			{
				if ( int_mode == FALLING_OR_RISING_EDGE)
      de:	61 30       	cpi	r22, 0x01	; 1
      e0:	29 f4       	brne	.+10     	; 0xec <set_interrupt+0x42>
				{
					*((volatile unsigned char *)0x55)|=(1<<ISC00);
      e2:	85 b7       	in	r24, 0x35	; 53
      e4:	81 60       	ori	r24, 0x01	; 1
      e6:	85 bf       	out	0x35, r24	; 53
	}
	return ret_val;
}
INT_ERRORS set_interrupt(INT_NAMES int_name,INT_MODES int_mode)
{
	INT_ERRORS ret_val=NO_ERRORS;
      e8:	80 e0       	ldi	r24, 0x00	; 0
      ea:	08 95       	ret
			{
				if ( int_mode == FALLING_OR_RISING_EDGE)
				{
					*((volatile unsigned char *)0x55)|=(1<<ISC00);
				} 
				else if ( int_mode == FALLING_EDGE)
      ec:	62 30       	cpi	r22, 0x02	; 2
      ee:	29 f4       	brne	.+10     	; 0xfa <set_interrupt+0x50>
				{
					*((volatile unsigned char *)0x55)|=(1<<ISC01);
      f0:	85 b7       	in	r24, 0x35	; 53
      f2:	82 60       	ori	r24, 0x02	; 2
      f4:	85 bf       	out	0x35, r24	; 53
	}
	return ret_val;
}
INT_ERRORS set_interrupt(INT_NAMES int_name,INT_MODES int_mode)
{
	INT_ERRORS ret_val=NO_ERRORS;
      f6:	80 e0       	ldi	r24, 0x00	; 0
      f8:	08 95       	ret
				} 
				else if ( int_mode == FALLING_EDGE)
				{
					*((volatile unsigned char *)0x55)|=(1<<ISC01);
				} 
				else if (int_mode == RISING_EDGE)
      fa:	63 30       	cpi	r22, 0x03	; 3
      fc:	29 f4       	brne	.+10     	; 0x108 <set_interrupt+0x5e>
				{
					*((volatile unsigned char *)0x55)|=(1<<ISC00)|(1<<ISC01);
      fe:	85 b7       	in	r24, 0x35	; 53
     100:	83 60       	ori	r24, 0x03	; 3
     102:	85 bf       	out	0x35, r24	; 53
	}
	return ret_val;
}
INT_ERRORS set_interrupt(INT_NAMES int_name,INT_MODES int_mode)
{
	INT_ERRORS ret_val=NO_ERRORS;
     104:	80 e0       	ldi	r24, 0x00	; 0
     106:	08 95       	ret
				} 
				else
				{
					//doNothing cause the low level interrupt just puts nothing
					//or i must enable the pull up res!!!
					*((volatile unsigned char *)0x32)|=(1<<2); //enabling the pull up res for INT0 //###test
     108:	92 9a       	sbi	0x12, 2	; 18
	}
	return ret_val;
}
INT_ERRORS set_interrupt(INT_NAMES int_name,INT_MODES int_mode)
{
	INT_ERRORS ret_val=NO_ERRORS;
     10a:	80 e0       	ldi	r24, 0x00	; 0
     10c:	08 95       	ret
					//doNothing cause the low level interrupt just puts nothing
					//or i must enable the pull up res!!!
					*((volatile unsigned char *)0x32)|=(1<<2); //enabling the pull up res for INT0 //###test
				}
			} 
			else if (int_name == INTERRUPT1)
     10e:	87 30       	cpi	r24, 0x07	; 7
     110:	c1 f4       	brne	.+48     	; 0x142 <set_interrupt+0x98>
			{
				if ( int_mode == FALLING_OR_RISING_EDGE)
     112:	61 30       	cpi	r22, 0x01	; 1
     114:	29 f4       	brne	.+10     	; 0x120 <set_interrupt+0x76>
				{
					*((volatile unsigned char *)0x55)|=(1<<ISC10);
     116:	85 b7       	in	r24, 0x35	; 53
     118:	84 60       	ori	r24, 0x04	; 4
     11a:	85 bf       	out	0x35, r24	; 53
	}
	return ret_val;
}
INT_ERRORS set_interrupt(INT_NAMES int_name,INT_MODES int_mode)
{
	INT_ERRORS ret_val=NO_ERRORS;
     11c:	80 e0       	ldi	r24, 0x00	; 0
     11e:	08 95       	ret
			{
				if ( int_mode == FALLING_OR_RISING_EDGE)
				{
					*((volatile unsigned char *)0x55)|=(1<<ISC10);
				}
				else if ( int_mode == FALLING_EDGE)
     120:	62 30       	cpi	r22, 0x02	; 2
     122:	29 f4       	brne	.+10     	; 0x12e <set_interrupt+0x84>
				{
					*((volatile unsigned char *)0x55)|=(1<<ISC11);
     124:	85 b7       	in	r24, 0x35	; 53
     126:	88 60       	ori	r24, 0x08	; 8
     128:	85 bf       	out	0x35, r24	; 53
	}
	return ret_val;
}
INT_ERRORS set_interrupt(INT_NAMES int_name,INT_MODES int_mode)
{
	INT_ERRORS ret_val=NO_ERRORS;
     12a:	80 e0       	ldi	r24, 0x00	; 0
     12c:	08 95       	ret
				}
				else if ( int_mode == FALLING_EDGE)
				{
					*((volatile unsigned char *)0x55)|=(1<<ISC11);
				}
				else if (int_mode == RISING_EDGE)
     12e:	63 30       	cpi	r22, 0x03	; 3
     130:	29 f4       	brne	.+10     	; 0x13c <set_interrupt+0x92>
				{
					*((volatile unsigned char *)0x55)|=(1<<ISC10)|(1<<ISC11);
     132:	85 b7       	in	r24, 0x35	; 53
     134:	8c 60       	ori	r24, 0x0C	; 12
     136:	85 bf       	out	0x35, r24	; 53
	}
	return ret_val;
}
INT_ERRORS set_interrupt(INT_NAMES int_name,INT_MODES int_mode)
{
	INT_ERRORS ret_val=NO_ERRORS;
     138:	80 e0       	ldi	r24, 0x00	; 0
     13a:	08 95       	ret
				}
				else
				{
					//doNothing cause the low level interrupt just puts nothing
					//or i must enable the pull up res!!!
					*((volatile unsigned char *)0x32)|=(1<<3); //enabling the pull up res for INT1  //###test
     13c:	93 9a       	sbi	0x12, 3	; 18
	}
	return ret_val;
}
INT_ERRORS set_interrupt(INT_NAMES int_name,INT_MODES int_mode)
{
	INT_ERRORS ret_val=NO_ERRORS;
     13e:	80 e0       	ldi	r24, 0x00	; 0
     140:	08 95       	ret
					*((volatile unsigned char *)0x32)|=(1<<3); //enabling the pull up res for INT1  //###test
				}
			} 
			else        //interrupt2
			{
				if (int_mode == FALLING_EDGE)
     142:	62 30       	cpi	r22, 0x02	; 2
     144:	59 f4       	brne	.+22     	; 0x15c <set_interrupt+0xb2>
				{
					*((volatile unsigned char *)0x54)&=~(1<<ISC2);
     146:	84 b7       	in	r24, 0x34	; 52
     148:	8f 7b       	andi	r24, 0xBF	; 191
     14a:	84 bf       	out	0x34, r24	; 52
	}
	return ret_val;
}
INT_ERRORS set_interrupt(INT_NAMES int_name,INT_MODES int_mode)
{
	INT_ERRORS ret_val=NO_ERRORS;
     14c:	80 e0       	ldi	r24, 0x00	; 0
     14e:	08 95       	ret
			ret_val=INVALID_PARAMS;
		}
	} 
	else
	{
		ret_val=NOT_INITIALIZED;
     150:	82 e0       	ldi	r24, 0x02	; 2
     152:	08 95       	ret
				}	
			}
		} 
		else
		{
			ret_val=INVALID_PARAMS;
     154:	81 e0       	ldi	r24, 0x01	; 1
     156:	08 95       	ret
     158:	81 e0       	ldi	r24, 0x01	; 1
     15a:	08 95       	ret
				{
					*((volatile unsigned char *)0x54)=(1<<ISC2);
				}
				else
				{
					ret_val=INVALID_MODE_FOR_INT2;
     15c:	83 e0       	ldi	r24, 0x03	; 3
	{
		ret_val=NOT_INITIALIZED;
	}

	return ret_val;
}
     15e:	08 95       	ret

00000160 <pwm_init>:

#define ON_PWM_SRC(PORT,PIN) (PORT |= (1<<PIN) )
#define OFF_PWM_SRC(PORT,PIN) (PORT &=~ (1<<PIN) )

pwm_error_t pwm_init(st_pwm_object *pwm_obj,timer_bases_t pwm_base,pwm_output_mode_t pwm_mode,pwm_operating_mode_t pwm_op_mode,msa_u32 pwm_freq,pwm_duty_cycle_t pwm_duty_cycle)
{
     160:	4f 92       	push	r4
     162:	5f 92       	push	r5
     164:	6f 92       	push	r6
     166:	7f 92       	push	r7
     168:	9f 92       	push	r9
     16a:	af 92       	push	r10
     16c:	bf 92       	push	r11
     16e:	cf 92       	push	r12
     170:	df 92       	push	r13
     172:	ef 92       	push	r14
     174:	ff 92       	push	r15
     176:	0f 93       	push	r16
     178:	1f 93       	push	r17
     17a:	cf 93       	push	r28
     17c:	df 93       	push	r29
     17e:	ec 01       	movw	r28, r24
     180:	d6 2e       	mov	r13, r22
     182:	94 2e       	mov	r9, r20
     184:	c8 01       	movw	r24, r16
     186:	b7 01       	movw	r22, r14
		 ( (pwm_duty_cycle >= 0) || (pwm_duty_cycle <= 100) )
       )
	{
#endif
		//store data in the reference object
		pwm_obj->pwm_base_obj=pwm_base;
     188:	d8 82       	st	Y, r13
		pwm_obj->pwm_duty_cycle_obj=pwm_duty_cycle;
     18a:	cf 82       	std	Y+7, r12	; 0x07
		pwm_obj->pwm_freq_obj=pwm_freq;
     18c:	eb 82       	std	Y+3, r14	; 0x03
     18e:	fc 82       	std	Y+4, r15	; 0x04
     190:	0d 83       	std	Y+5, r16	; 0x05
     192:	1e 83       	std	Y+6, r17	; 0x06
		pwm_obj->pwm_mode_obj=pwm_mode;
     194:	49 83       	std	Y+1, r20	; 0x01
		pwm_obj->pwm_op_mode_obj=pwm_op_mode;
     196:	2a 83       	std	Y+2, r18	; 0x02
		pwm_obj->pwm_module_config_state_obj=CONFIGED;
     198:	31 e0       	ldi	r19, 0x01	; 1
     19a:	39 87       	std	Y+9, r19	; 0x09
		
		//initialization
		msa_u16 OcrRegVal;
		msa_f32  PrescalerNeeded; 
		//getting the prescaler and the OCR register value needed
		if (pwm_op_mode == FAST_PWM)
     19c:	23 30       	cpi	r18, 0x03	; 3
     19e:	51 f5       	brne	.+84     	; 0x1f4 <pwm_init+0x94>
		{
			PrescalerNeeded=(msa_f32)((msa_f32)Fosc/((msa_f32)pwm_freq*(msa_f32)256));
     1a0:	0e 94 75 07 	call	0xeea	; 0xeea <__floatunsisf>
     1a4:	20 e0       	ldi	r18, 0x00	; 0
     1a6:	30 e0       	ldi	r19, 0x00	; 0
     1a8:	40 e8       	ldi	r20, 0x80	; 128
     1aa:	53 e4       	ldi	r21, 0x43	; 67
     1ac:	0e 94 2c 08 	call	0x1058	; 0x1058 <__mulsf3>
     1b0:	9b 01       	movw	r18, r22
     1b2:	ac 01       	movw	r20, r24
     1b4:	60 e0       	ldi	r22, 0x00	; 0
     1b6:	74 e2       	ldi	r23, 0x24	; 36
     1b8:	84 ef       	ldi	r24, 0xF4	; 244
     1ba:	9a e4       	ldi	r25, 0x4A	; 74
     1bc:	0e 94 03 07 	call	0xe06	; 0xe06 <__divsf3>
     1c0:	2b 01       	movw	r4, r22
     1c2:	3c 01       	movw	r6, r24
			
			if (pwm_mode == NON_INVERTED)
     1c4:	22 e0       	ldi	r18, 0x02	; 2
     1c6:	92 12       	cpse	r9, r18
     1c8:	0a c0       	rjmp	.+20     	; 0x1de <pwm_init+0x7e>
			{
				OcrRegVal=(((pwm_duty_cycle*256)/100)-1);
     1ca:	9c 2d       	mov	r25, r12
     1cc:	80 e0       	ldi	r24, 0x00	; 0
     1ce:	64 e6       	ldi	r22, 0x64	; 100
     1d0:	70 e0       	ldi	r23, 0x00	; 0
     1d2:	0e 94 99 08 	call	0x1132	; 0x1132 <__divmodhi4>
     1d6:	8b 01       	movw	r16, r22
     1d8:	01 50       	subi	r16, 0x01	; 1
     1da:	11 09       	sbc	r17, r1
     1dc:	36 c0       	rjmp	.+108    	; 0x24a <pwm_init+0xea>
			}
			else //inverted
			{
				OcrRegVal=255-((256*pwm_duty_cycle)/100);
     1de:	9c 2d       	mov	r25, r12
     1e0:	80 e0       	ldi	r24, 0x00	; 0
     1e2:	64 e6       	ldi	r22, 0x64	; 100
     1e4:	70 e0       	ldi	r23, 0x00	; 0
     1e6:	0e 94 99 08 	call	0x1132	; 0x1132 <__divmodhi4>
     1ea:	0f ef       	ldi	r16, 0xFF	; 255
     1ec:	10 e0       	ldi	r17, 0x00	; 0
     1ee:	06 1b       	sub	r16, r22
     1f0:	17 0b       	sbc	r17, r23
     1f2:	2b c0       	rjmp	.+86     	; 0x24a <pwm_init+0xea>
			}
		}
		else //phase_correct
		{
			PrescalerNeeded=(msa_f32)((msa_f32)Fosc/((msa_f32)pwm_freq*(msa_f32)510));
     1f4:	0e 94 75 07 	call	0xeea	; 0xeea <__floatunsisf>
     1f8:	20 e0       	ldi	r18, 0x00	; 0
     1fa:	30 e0       	ldi	r19, 0x00	; 0
     1fc:	4f ef       	ldi	r20, 0xFF	; 255
     1fe:	53 e4       	ldi	r21, 0x43	; 67
     200:	0e 94 2c 08 	call	0x1058	; 0x1058 <__mulsf3>
     204:	9b 01       	movw	r18, r22
     206:	ac 01       	movw	r20, r24
     208:	60 e0       	ldi	r22, 0x00	; 0
     20a:	74 e2       	ldi	r23, 0x24	; 36
     20c:	84 ef       	ldi	r24, 0xF4	; 244
     20e:	9a e4       	ldi	r25, 0x4A	; 74
     210:	0e 94 03 07 	call	0xe06	; 0xe06 <__divsf3>
     214:	2b 01       	movw	r4, r22
     216:	3c 01       	movw	r6, r24
			
			if (pwm_mode == NON_INVERTED)
     218:	52 e0       	ldi	r21, 0x02	; 2
     21a:	95 12       	cpse	r9, r21
     21c:	0a c0       	rjmp	.+20     	; 0x232 <pwm_init+0xd2>
			{
				OcrRegVal=((pwm_duty_cycle*255)/100);
     21e:	2f ef       	ldi	r18, 0xFF	; 255
     220:	c2 9e       	mul	r12, r18
     222:	c0 01       	movw	r24, r0
     224:	11 24       	eor	r1, r1
     226:	64 e6       	ldi	r22, 0x64	; 100
     228:	70 e0       	ldi	r23, 0x00	; 0
     22a:	0e 94 99 08 	call	0x1132	; 0x1132 <__divmodhi4>
     22e:	8b 01       	movw	r16, r22
     230:	0c c0       	rjmp	.+24     	; 0x24a <pwm_init+0xea>
			}
			else //inverted
			{
				OcrRegVal=255-((255*pwm_duty_cycle)/100);
     232:	5f ef       	ldi	r21, 0xFF	; 255
     234:	c5 9e       	mul	r12, r21
     236:	c0 01       	movw	r24, r0
     238:	11 24       	eor	r1, r1
     23a:	64 e6       	ldi	r22, 0x64	; 100
     23c:	70 e0       	ldi	r23, 0x00	; 0
     23e:	0e 94 99 08 	call	0x1132	; 0x1132 <__divmodhi4>
     242:	0f ef       	ldi	r16, 0xFF	; 255
     244:	10 e0       	ldi	r17, 0x00	; 0
     246:	06 1b       	sub	r16, r22
     248:	17 0b       	sbc	r17, r23
			}
		}
			 if (  PrescalerNeeded < (msa_f32)1.0) pwm_obj->prescaler_obj=NO_PRESCALER;
     24a:	20 e0       	ldi	r18, 0x00	; 0
     24c:	30 e0       	ldi	r19, 0x00	; 0
     24e:	40 e8       	ldi	r20, 0x80	; 128
     250:	5f e3       	ldi	r21, 0x3F	; 63
     252:	c3 01       	movw	r24, r6
     254:	b2 01       	movw	r22, r4
     256:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__cmpsf2>
     25a:	88 23       	and	r24, r24
     25c:	24 f4       	brge	.+8      	; 0x266 <pwm_init+0x106>
     25e:	81 e0       	ldi	r24, 0x01	; 1
     260:	88 87       	std	Y+8, r24	; 0x08
#define ON_PWM_SRC(PORT,PIN) (PORT |= (1<<PIN) )
#define OFF_PWM_SRC(PORT,PIN) (PORT &=~ (1<<PIN) )

pwm_error_t pwm_init(st_pwm_object *pwm_obj,timer_bases_t pwm_base,pwm_output_mode_t pwm_mode,pwm_operating_mode_t pwm_op_mode,msa_u32 pwm_freq,pwm_duty_cycle_t pwm_duty_cycle)
{
	pwm_error_t ret_val=NO_PWM_ERRORS;
     262:	80 e0       	ldi	r24, 0x00	; 0
     264:	63 c0       	rjmp	.+198    	; 0x32c <pwm_init+0x1cc>
			{
				OcrRegVal=255-((255*pwm_duty_cycle)/100);
			}
		}
			 if (  PrescalerNeeded < (msa_f32)1.0) pwm_obj->prescaler_obj=NO_PRESCALER;
		else if ( (PrescalerNeeded > (msa_f32)1.0) && (PrescalerNeeded <(msa_f32)8.0) ) pwm_obj->prescaler_obj=PRESCALER_8;
     266:	20 e0       	ldi	r18, 0x00	; 0
     268:	30 e0       	ldi	r19, 0x00	; 0
     26a:	40 e8       	ldi	r20, 0x80	; 128
     26c:	5f e3       	ldi	r21, 0x3F	; 63
     26e:	c3 01       	movw	r24, r6
     270:	b2 01       	movw	r22, r4
     272:	0e 94 27 08 	call	0x104e	; 0x104e <__gesf2>
     276:	18 16       	cp	r1, r24
     278:	74 f4       	brge	.+28     	; 0x296 <pwm_init+0x136>
     27a:	20 e0       	ldi	r18, 0x00	; 0
     27c:	30 e0       	ldi	r19, 0x00	; 0
     27e:	40 e0       	ldi	r20, 0x00	; 0
     280:	51 e4       	ldi	r21, 0x41	; 65
     282:	c3 01       	movw	r24, r6
     284:	b2 01       	movw	r22, r4
     286:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__cmpsf2>
     28a:	88 23       	and	r24, r24
     28c:	24 f4       	brge	.+8      	; 0x296 <pwm_init+0x136>
     28e:	82 e0       	ldi	r24, 0x02	; 2
     290:	88 87       	std	Y+8, r24	; 0x08
#define ON_PWM_SRC(PORT,PIN) (PORT |= (1<<PIN) )
#define OFF_PWM_SRC(PORT,PIN) (PORT &=~ (1<<PIN) )

pwm_error_t pwm_init(st_pwm_object *pwm_obj,timer_bases_t pwm_base,pwm_output_mode_t pwm_mode,pwm_operating_mode_t pwm_op_mode,msa_u32 pwm_freq,pwm_duty_cycle_t pwm_duty_cycle)
{
	pwm_error_t ret_val=NO_PWM_ERRORS;
     292:	80 e0       	ldi	r24, 0x00	; 0
			{
				OcrRegVal=255-((255*pwm_duty_cycle)/100);
			}
		}
			 if (  PrescalerNeeded < (msa_f32)1.0) pwm_obj->prescaler_obj=NO_PRESCALER;
		else if ( (PrescalerNeeded > (msa_f32)1.0) && (PrescalerNeeded <(msa_f32)8.0) ) pwm_obj->prescaler_obj=PRESCALER_8;
     294:	4b c0       	rjmp	.+150    	; 0x32c <pwm_init+0x1cc>
		else if ( (PrescalerNeeded > (msa_f32)8.0) && (PrescalerNeeded <(msa_f32)64.0) ) pwm_obj->prescaler_obj=PRESCALER_64;
     296:	20 e0       	ldi	r18, 0x00	; 0
     298:	30 e0       	ldi	r19, 0x00	; 0
     29a:	40 e0       	ldi	r20, 0x00	; 0
     29c:	51 e4       	ldi	r21, 0x41	; 65
     29e:	c3 01       	movw	r24, r6
     2a0:	b2 01       	movw	r22, r4
     2a2:	0e 94 27 08 	call	0x104e	; 0x104e <__gesf2>
     2a6:	18 16       	cp	r1, r24
     2a8:	74 f4       	brge	.+28     	; 0x2c6 <pwm_init+0x166>
     2aa:	20 e0       	ldi	r18, 0x00	; 0
     2ac:	30 e0       	ldi	r19, 0x00	; 0
     2ae:	40 e8       	ldi	r20, 0x80	; 128
     2b0:	52 e4       	ldi	r21, 0x42	; 66
     2b2:	c3 01       	movw	r24, r6
     2b4:	b2 01       	movw	r22, r4
     2b6:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__cmpsf2>
     2ba:	88 23       	and	r24, r24
     2bc:	24 f4       	brge	.+8      	; 0x2c6 <pwm_init+0x166>
     2be:	83 e0       	ldi	r24, 0x03	; 3
     2c0:	88 87       	std	Y+8, r24	; 0x08
#define ON_PWM_SRC(PORT,PIN) (PORT |= (1<<PIN) )
#define OFF_PWM_SRC(PORT,PIN) (PORT &=~ (1<<PIN) )

pwm_error_t pwm_init(st_pwm_object *pwm_obj,timer_bases_t pwm_base,pwm_output_mode_t pwm_mode,pwm_operating_mode_t pwm_op_mode,msa_u32 pwm_freq,pwm_duty_cycle_t pwm_duty_cycle)
{
	pwm_error_t ret_val=NO_PWM_ERRORS;
     2c2:	80 e0       	ldi	r24, 0x00	; 0
				OcrRegVal=255-((255*pwm_duty_cycle)/100);
			}
		}
			 if (  PrescalerNeeded < (msa_f32)1.0) pwm_obj->prescaler_obj=NO_PRESCALER;
		else if ( (PrescalerNeeded > (msa_f32)1.0) && (PrescalerNeeded <(msa_f32)8.0) ) pwm_obj->prescaler_obj=PRESCALER_8;
		else if ( (PrescalerNeeded > (msa_f32)8.0) && (PrescalerNeeded <(msa_f32)64.0) ) pwm_obj->prescaler_obj=PRESCALER_64;
     2c4:	33 c0       	rjmp	.+102    	; 0x32c <pwm_init+0x1cc>
		else if ( (PrescalerNeeded > (msa_f32)64.0) && (PrescalerNeeded <(msa_f32)256.0) ) pwm_obj->prescaler_obj=PRESCALER_256;
     2c6:	20 e0       	ldi	r18, 0x00	; 0
     2c8:	30 e0       	ldi	r19, 0x00	; 0
     2ca:	40 e8       	ldi	r20, 0x80	; 128
     2cc:	52 e4       	ldi	r21, 0x42	; 66
     2ce:	c3 01       	movw	r24, r6
     2d0:	b2 01       	movw	r22, r4
     2d2:	0e 94 27 08 	call	0x104e	; 0x104e <__gesf2>
     2d6:	18 16       	cp	r1, r24
     2d8:	74 f4       	brge	.+28     	; 0x2f6 <pwm_init+0x196>
     2da:	20 e0       	ldi	r18, 0x00	; 0
     2dc:	30 e0       	ldi	r19, 0x00	; 0
     2de:	40 e8       	ldi	r20, 0x80	; 128
     2e0:	53 e4       	ldi	r21, 0x43	; 67
     2e2:	c3 01       	movw	r24, r6
     2e4:	b2 01       	movw	r22, r4
     2e6:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__cmpsf2>
     2ea:	88 23       	and	r24, r24
     2ec:	24 f4       	brge	.+8      	; 0x2f6 <pwm_init+0x196>
     2ee:	84 e0       	ldi	r24, 0x04	; 4
     2f0:	88 87       	std	Y+8, r24	; 0x08
#define ON_PWM_SRC(PORT,PIN) (PORT |= (1<<PIN) )
#define OFF_PWM_SRC(PORT,PIN) (PORT &=~ (1<<PIN) )

pwm_error_t pwm_init(st_pwm_object *pwm_obj,timer_bases_t pwm_base,pwm_output_mode_t pwm_mode,pwm_operating_mode_t pwm_op_mode,msa_u32 pwm_freq,pwm_duty_cycle_t pwm_duty_cycle)
{
	pwm_error_t ret_val=NO_PWM_ERRORS;
     2f2:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
			 if (  PrescalerNeeded < (msa_f32)1.0) pwm_obj->prescaler_obj=NO_PRESCALER;
		else if ( (PrescalerNeeded > (msa_f32)1.0) && (PrescalerNeeded <(msa_f32)8.0) ) pwm_obj->prescaler_obj=PRESCALER_8;
		else if ( (PrescalerNeeded > (msa_f32)8.0) && (PrescalerNeeded <(msa_f32)64.0) ) pwm_obj->prescaler_obj=PRESCALER_64;
		else if ( (PrescalerNeeded > (msa_f32)64.0) && (PrescalerNeeded <(msa_f32)256.0) ) pwm_obj->prescaler_obj=PRESCALER_256;
     2f4:	1b c0       	rjmp	.+54     	; 0x32c <pwm_init+0x1cc>
		else if ( (PrescalerNeeded > (msa_f32)256.0) && (PrescalerNeeded <(msa_f32)1024.0) ) pwm_obj->prescaler_obj=PRESCALER_1024;
     2f6:	20 e0       	ldi	r18, 0x00	; 0
     2f8:	30 e0       	ldi	r19, 0x00	; 0
     2fa:	40 e8       	ldi	r20, 0x80	; 128
     2fc:	53 e4       	ldi	r21, 0x43	; 67
     2fe:	c3 01       	movw	r24, r6
     300:	b2 01       	movw	r22, r4
     302:	0e 94 27 08 	call	0x104e	; 0x104e <__gesf2>
     306:	18 16       	cp	r1, r24
     308:	74 f4       	brge	.+28     	; 0x326 <pwm_init+0x1c6>
     30a:	20 e0       	ldi	r18, 0x00	; 0
     30c:	30 e0       	ldi	r19, 0x00	; 0
     30e:	40 e8       	ldi	r20, 0x80	; 128
     310:	54 e4       	ldi	r21, 0x44	; 68
     312:	c3 01       	movw	r24, r6
     314:	b2 01       	movw	r22, r4
     316:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__cmpsf2>
     31a:	88 23       	and	r24, r24
     31c:	34 f4       	brge	.+12     	; 0x32a <pwm_init+0x1ca>
     31e:	85 e0       	ldi	r24, 0x05	; 5
     320:	88 87       	std	Y+8, r24	; 0x08
#define ON_PWM_SRC(PORT,PIN) (PORT |= (1<<PIN) )
#define OFF_PWM_SRC(PORT,PIN) (PORT &=~ (1<<PIN) )

pwm_error_t pwm_init(st_pwm_object *pwm_obj,timer_bases_t pwm_base,pwm_output_mode_t pwm_mode,pwm_operating_mode_t pwm_op_mode,msa_u32 pwm_freq,pwm_duty_cycle_t pwm_duty_cycle)
{
	pwm_error_t ret_val=NO_PWM_ERRORS;
     322:	80 e0       	ldi	r24, 0x00	; 0
		}
			 if (  PrescalerNeeded < (msa_f32)1.0) pwm_obj->prescaler_obj=NO_PRESCALER;
		else if ( (PrescalerNeeded > (msa_f32)1.0) && (PrescalerNeeded <(msa_f32)8.0) ) pwm_obj->prescaler_obj=PRESCALER_8;
		else if ( (PrescalerNeeded > (msa_f32)8.0) && (PrescalerNeeded <(msa_f32)64.0) ) pwm_obj->prescaler_obj=PRESCALER_64;
		else if ( (PrescalerNeeded > (msa_f32)64.0) && (PrescalerNeeded <(msa_f32)256.0) ) pwm_obj->prescaler_obj=PRESCALER_256;
		else if ( (PrescalerNeeded > (msa_f32)256.0) && (PrescalerNeeded <(msa_f32)1024.0) ) pwm_obj->prescaler_obj=PRESCALER_1024;
     324:	03 c0       	rjmp	.+6      	; 0x32c <pwm_init+0x1cc>
		else ret_val=THE_NEEDED_PRESCALER_IMPOSSIBLE; 
     326:	82 e0       	ldi	r24, 0x02	; 2
     328:	01 c0       	rjmp	.+2      	; 0x32c <pwm_init+0x1cc>
     32a:	82 e0       	ldi	r24, 0x02	; 2
		
		
		*(volatile msa_u8*)(pwm_obj->pwm_base_obj)|= pwm_obj->prescaler_obj;
     32c:	ed 2d       	mov	r30, r13
     32e:	f0 e0       	ldi	r31, 0x00	; 0
     330:	20 81       	ld	r18, Z
     332:	98 85       	ldd	r25, Y+8	; 0x08
     334:	92 2b       	or	r25, r18
     336:	90 83       	st	Z, r25
		*(volatile msa_u8*)(pwm_obj->pwm_base_obj)|= ( (( (pwm_obj->pwm_op_mode_obj) & 0x02)<< WGMn1) |((( (pwm_obj->pwm_op_mode_obj) & 0x01)<<WGMn0)) );
     338:	e8 81       	ld	r30, Y
     33a:	f0 e0       	ldi	r31, 0x00	; 0
     33c:	20 81       	ld	r18, Z
     33e:	3a 81       	ldd	r19, Y+2	; 0x02
     340:	93 2f       	mov	r25, r19
     342:	92 70       	andi	r25, 0x02	; 2
     344:	99 0f       	add	r25, r25
     346:	99 0f       	add	r25, r25
     348:	92 2b       	or	r25, r18
     34a:	30 fb       	bst	r19, 0
     34c:	aa 24       	eor	r10, r10
     34e:	a0 f8       	bld	r10, 0
     350:	b1 2c       	mov	r11, r1
     352:	00 24       	eor	r0, r0
     354:	b6 94       	lsr	r11
     356:	a7 94       	ror	r10
     358:	07 94       	ror	r0
     35a:	b6 94       	lsr	r11
     35c:	a7 94       	ror	r10
     35e:	07 94       	ror	r0
     360:	ba 2c       	mov	r11, r10
     362:	a0 2c       	mov	r10, r0
     364:	a9 2a       	or	r10, r25
     366:	a0 82       	st	Z, r10
		*(volatile msa_u8*)(pwm_obj->pwm_base_obj)|= ( (pwm_obj->pwm_mode_obj)<<COMn); 
     368:	e8 81       	ld	r30, Y
     36a:	f0 e0       	ldi	r31, 0x00	; 0
     36c:	40 81       	ld	r20, Z
     36e:	99 81       	ldd	r25, Y+1	; 0x01
     370:	50 e1       	ldi	r21, 0x10	; 16
     372:	95 9f       	mul	r25, r21
     374:	90 01       	movw	r18, r0
     376:	11 24       	eor	r1, r1
     378:	24 2b       	or	r18, r20
     37a:	20 83       	st	Z, r18
		if (pwm_base == TIMER_0)
     37c:	93 e5       	ldi	r25, 0x53	; 83
     37e:	d9 12       	cpse	r13, r25
     380:	02 c0       	rjmp	.+4      	; 0x386 <pwm_init+0x226>
		{
			OCR0=OcrRegVal;
     382:	0c bf       	out	0x3c, r16	; 60
     384:	04 c0       	rjmp	.+8      	; 0x38e <pwm_init+0x22e>
		}
		else if (pwm_base == TIMER_1)
		{
			//timer 1
		}
		else if (pwm_base == TIMER_2)
     386:	25 e4       	ldi	r18, 0x45	; 69
     388:	d2 12       	cpse	r13, r18
     38a:	01 c0       	rjmp	.+2      	; 0x38e <pwm_init+0x22e>
		{
			OCR2=OcrRegVal;
     38c:	03 bd       	out	0x23, r16	; 35
	{
		ret_val=INVALID_PWM_PARAMS;
	}
#endif
	return ret_val;
}
     38e:	df 91       	pop	r29
     390:	cf 91       	pop	r28
     392:	1f 91       	pop	r17
     394:	0f 91       	pop	r16
     396:	ff 90       	pop	r15
     398:	ef 90       	pop	r14
     39a:	df 90       	pop	r13
     39c:	cf 90       	pop	r12
     39e:	bf 90       	pop	r11
     3a0:	af 90       	pop	r10
     3a2:	9f 90       	pop	r9
     3a4:	7f 90       	pop	r7
     3a6:	6f 90       	pop	r6
     3a8:	5f 90       	pop	r5
     3aa:	4f 90       	pop	r4
     3ac:	08 95       	ret

000003ae <pwm_edit>:


pwm_error_t pwm_edit(st_pwm_object*pwm_obj,pwm_output_mode_t pwm_mode,pwm_operating_mode_t pwm_op_mode,msa_u32 pwm_freq,pwm_duty_cycle_t pwm_duty_cycle)
{
     3ae:	cf 92       	push	r12
     3b0:	ef 92       	push	r14
     3b2:	ff 92       	push	r15
     3b4:	0f 93       	push	r16
     3b6:	1f 93       	push	r17
	)
	{
		if (pwm_obj->pwm_module_config_state_obj == CONFIGED)
		{
#endif
			ret_val=pwm_init(pwm_obj,pwm_obj->pwm_base_obj,pwm_mode,pwm_op_mode,pwm_freq,pwm_duty_cycle);
     3b8:	ce 2c       	mov	r12, r14
     3ba:	78 01       	movw	r14, r16
     3bc:	89 01       	movw	r16, r18
     3be:	24 2f       	mov	r18, r20
     3c0:	46 2f       	mov	r20, r22
     3c2:	fc 01       	movw	r30, r24
     3c4:	60 81       	ld	r22, Z
     3c6:	0e 94 b0 00 	call	0x160	; 0x160 <pwm_init>
	{
		ret_val=INVALID_PWM_PARAMS;
	}
#endif
	return ret_val;
}
     3ca:	1f 91       	pop	r17
     3cc:	0f 91       	pop	r16
     3ce:	ff 90       	pop	r15
     3d0:	ef 90       	pop	r14
     3d2:	cf 90       	pop	r12
     3d4:	08 95       	ret

000003d6 <hal_spiInit>:

static void (*spi_interrupt_handler)(void);

spi_error_t hal_spiInit(str_spi_objectInfo_t *strg_obj,spi_driver_base_t driver_base,spi_sck_freq_select_t	freq_select,
						spi_operating_mode_t mode,spi_notifcs_mode_t notfics_mode,spi_transfer_modes_t transfer_mode,spi_data_order_t data_order)
{
     3d6:	cf 92       	push	r12
     3d8:	df 92       	push	r13
     3da:	ef 92       	push	r14
     3dc:	0f 93       	push	r16
     3de:	fc 01       	movw	r30, r24
	     (mode == SLAVE_EN || mode == MASTER_EN) && (notfics_mode == SPI_POLLING || notfics_mode == SPI_INTERRUPTING) &&
		 ((transfer_mode >= MODE_1) && (transfer_mode <= MODE_4) ) && ((data_order == LSB_FIRST)||(data_order == MSB_FIRST)) 
	  )
	{
#endif
		cli();//to finish the driver initializations first
     3e0:	f8 94       	cli
		//storing data 
		strg_obj->driver_base_obj	=driver_base;
     3e2:	60 83       	st	Z, r22
		strg_obj->driver_state_obj	=DRIVER_INITIATED;
     3e4:	81 e0       	ldi	r24, 0x01	; 1
     3e6:	86 83       	std	Z+6, r24	; 0x06
		strg_obj->freq_select_obj	=freq_select;
     3e8:	41 83       	std	Z+1, r20	; 0x01
		strg_obj->mode_obj			=mode;
     3ea:	22 83       	std	Z+2, r18	; 0x02
		strg_obj->transfer_mode_obj	=transfer_mode;
     3ec:	e4 82       	std	Z+4, r14	; 0x04
		strg_obj->notfics_mode_obj	=notfics_mode;
     3ee:	03 83       	std	Z+3, r16	; 0x03
		strg_obj->data_order_obj	=data_order;
     3f0:	c5 82       	std	Z+5, r12	; 0x05
		
		//actual initialization
		//&
		//configuring the driver pins
		if (mode == MASTER_EN)
     3f2:	21 30       	cpi	r18, 0x01	; 1
     3f4:	19 f5       	brne	.+70     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
		{
			//again,this is according to the atmega32 mcu
			SET_BIT(DDRB,SPI_PIN_SS);
     3f6:	bc 9a       	sbi	0x17, 4	; 23
			SET_BIT(DDRB,SPI_PIN_SCK);
     3f8:	bf 9a       	sbi	0x17, 7	; 23
			SET_BIT(DDRB,SPI_PIN_MOSI);
     3fa:	bd 9a       	sbi	0x17, 5	; 23
			CLEAR_BIT(DDRB,SPI_PIN_MISO);
     3fc:	be 98       	cbi	0x17, 6	; 23
			//actual initialization
			*((volatile msa_u8 *)driver_base+CTRL_REG_OFFSET)	|= (freq_select & 0x03)|(transfer_mode<<CPHA)|(mode << MSTR);
     3fe:	e6 2f       	mov	r30, r22
     400:	f0 e0       	ldi	r31, 0x00	; 0
     402:	90 81       	ld	r25, Z
     404:	8e 2d       	mov	r24, r14
     406:	88 0f       	add	r24, r24
     408:	88 0f       	add	r24, r24
     40a:	80 61       	ori	r24, 0x10	; 16
     40c:	24 2f       	mov	r18, r20
     40e:	23 70       	andi	r18, 0x03	; 3
     410:	82 2b       	or	r24, r18
     412:	89 2b       	or	r24, r25
     414:	80 83       	st	Z, r24
			*((volatile msa_u8 *)driver_base+CTRL_REG_OFFSET)	|= (ENABLE<<SPE)|(notfics_mode<<SPIE)|(data_order<<DORD);
     416:	20 81       	ld	r18, Z
     418:	30 e2       	ldi	r19, 0x20	; 32
     41a:	c3 9e       	mul	r12, r19
     41c:	c0 01       	movw	r24, r0
     41e:	11 24       	eor	r1, r1
     420:	80 64       	ori	r24, 0x40	; 64
     422:	90 e8       	ldi	r25, 0x80	; 128
     424:	09 9f       	mul	r16, r25
     426:	60 01       	movw	r12, r0
     428:	11 24       	eor	r1, r1
     42a:	8c 29       	or	r24, r12
     42c:	82 2b       	or	r24, r18
     42e:	80 83       	st	Z, r24
			*((volatile msa_u8 *)driver_base+STATUS_REG_OFFSET) |= ( (freq_select&0xfcUL)>>2 );	//test the res is -4?? or worked well...>>edited and worked
     430:	81 81       	ldd	r24, Z+1	; 0x01
     432:	46 95       	lsr	r20
     434:	46 95       	lsr	r20
     436:	48 2b       	or	r20, r24
     438:	41 83       	std	Z+1, r20	; 0x01
     43a:	0f c0       	rjmp	.+30     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
			
		} 
		else //slave_en
		{
			//again,this is according to the atmega32 mcu
			CLEAR_BIT(DDRB,SPI_PIN_SS);
     43c:	bc 98       	cbi	0x17, 4	; 23
			CLEAR_BIT(DDRB,SPI_PIN_SCK);
     43e:	bf 98       	cbi	0x17, 7	; 23
			CLEAR_BIT(DDRB,SPI_PIN_MOSI);
     440:	bd 98       	cbi	0x17, 5	; 23
			SET_BIT  (DDRB,SPI_PIN_MISO);
     442:	be 9a       	sbi	0x17, 6	; 23
			//actual initialization
			*((volatile msa_u8 *)driver_base+CTRL_REG_OFFSET)	|= (ENABLE<<SPE)|(notfics_mode<<SPIE);
     444:	e6 2f       	mov	r30, r22
     446:	f0 e0       	ldi	r31, 0x00	; 0
     448:	90 81       	ld	r25, Z
     44a:	80 e8       	ldi	r24, 0x80	; 128
     44c:	08 9f       	mul	r16, r24
     44e:	90 01       	movw	r18, r0
     450:	11 24       	eor	r1, r1
     452:	82 2f       	mov	r24, r18
     454:	80 64       	ori	r24, 0x40	; 64
     456:	89 2b       	or	r24, r25
     458:	80 83       	st	Z, r24
			
		}
		if (notfics_mode == SPI_INTERRUPTING) //re-edit not to override the interrupt status,or the condition with the previous interrupt status
     45a:	01 30       	cpi	r16, 0x01	; 1
     45c:	09 f4       	brne	.+2      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
		{
			sei();
     45e:	78 94       	sei
	{
		ret_val=INVALID_SPI_PARAMS;
	}
#endif
	return ret_val;
}
     460:	80 e0       	ldi	r24, 0x00	; 0
     462:	0f 91       	pop	r16
     464:	ef 90       	pop	r14
     466:	df 90       	pop	r13
     468:	cf 90       	pop	r12
     46a:	08 95       	ret

0000046c <hal_spiExchangeDATA>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     46c:	25 e0       	ldi	r18, 0x05	; 5
     46e:	2a 95       	dec	r18
     470:	f1 f7       	brne	.-4      	; 0x46e <hal_spiExchangeDATA+0x2>
     472:	00 00       	nop
		if (strg_obj->driver_state_obj == DRIVER_INITIATED)
		{
#endif
			_delay_us(2);////for safety but edit if made an error with the CAN Driver
			//put the outgoing byte to be sent
			(*(volatile msa_u8*)(strg_obj->driver_base_obj+DATA_REG_OFFSET))=*ByteOUT;
     474:	dc 01       	movw	r26, r24
     476:	ec 91       	ld	r30, X
     478:	f0 e0       	ldi	r31, 0x00	; 0
     47a:	db 01       	movw	r26, r22
     47c:	2c 91       	ld	r18, X
     47e:	22 83       	std	Z+2, r18	; 0x02
			//wait the exchange completion
			while(!((*(volatile msa_u8*)(strg_obj->driver_base_obj+STATUS_REG_OFFSET)) & (1<<SPIF)))//fixed an error,was testing the 7th bit in the data reg wich is wrong
     480:	fc 01       	movw	r30, r24
     482:	a0 81       	ld	r26, Z
     484:	b0 e0       	ldi	r27, 0x00	; 0
     486:	fd 01       	movw	r30, r26
     488:	31 96       	adiw	r30, 0x01	; 1
     48a:	80 81       	ld	r24, Z
     48c:	88 23       	and	r24, r24
     48e:	ec f7       	brge	.-6      	; 0x48a <hal_spiExchangeDATA+0x1e>
			;
			//take the incoming byte that was received
			*ByteIN=(*(volatile msa_u8*)(strg_obj->driver_base_obj+DATA_REG_OFFSET));
     490:	12 96       	adiw	r26, 0x02	; 2
     492:	8c 91       	ld	r24, X
     494:	da 01       	movw	r26, r20
     496:	8c 93       	st	X, r24
		ret_val=INVALID_SPI_PARAMS;
	}
#endif
	return ret_val;
	
}
     498:	80 e0       	ldi	r24, 0x00	; 0
     49a:	08 95       	ret

0000049c <usart_init>:
	}
#endif
	return ret_val;
	
	
}
     49c:	cf 92       	push	r12
     49e:	ef 92       	push	r14
     4a0:	0f 93       	push	r16
     4a2:	fc 01       	movw	r30, r24
     4a4:	e1 10       	cpse	r14, r1
     4a6:	0c c0       	rjmp	.+24     	; 0x4c0 <usart_init+0x24>
     4a8:	f8 94       	cli
     4aa:	61 30       	cpi	r22, 0x01	; 1
     4ac:	11 f4       	brne	.+4      	; 0x4b2 <usart_init+0x16>
     4ae:	55 9a       	sbi	0x0a, 5	; 10
     4b0:	07 c0       	rjmp	.+14     	; 0x4c0 <usart_init+0x24>
     4b2:	62 30       	cpi	r22, 0x02	; 2
     4b4:	11 f4       	brne	.+4      	; 0x4ba <usart_init+0x1e>
     4b6:	57 9a       	sbi	0x0a, 7	; 10
     4b8:	03 c0       	rjmp	.+6      	; 0x4c0 <usart_init+0x24>
     4ba:	8a b1       	in	r24, 0x0a	; 10
     4bc:	80 6a       	ori	r24, 0xA0	; 160
     4be:	8a b9       	out	0x0a, r24	; 10
     4c0:	03 83       	std	Z+3, r16	; 0x03
     4c2:	81 e0       	ldi	r24, 0x01	; 1
     4c4:	85 83       	std	Z+5, r24	; 0x05
     4c6:	e4 82       	std	Z+4, r14	; 0x04
     4c8:	61 83       	std	Z+1, r22	; 0x01
     4ca:	22 83       	std	Z+2, r18	; 0x02
     4cc:	40 83       	st	Z, r20
     4ce:	9a b1       	in	r25, 0x0a	; 10
     4d0:	80 2f       	mov	r24, r16
     4d2:	84 70       	andi	r24, 0x04	; 4
     4d4:	88 0f       	add	r24, r24
     4d6:	88 0f       	add	r24, r24
     4d8:	89 2b       	or	r24, r25
     4da:	66 0f       	add	r22, r22
     4dc:	66 0f       	add	r22, r22
     4de:	66 0f       	add	r22, r22
     4e0:	68 2b       	or	r22, r24
     4e2:	6a b9       	out	0x0a, r22	; 10
     4e4:	44 0f       	add	r20, r20
     4e6:	44 0f       	add	r20, r20
     4e8:	44 0f       	add	r20, r20
     4ea:	8c 2d       	mov	r24, r12
     4ec:	80 68       	ori	r24, 0x80	; 128
     4ee:	c4 2e       	mov	r12, r20
     4f0:	c8 2a       	or	r12, r24
     4f2:	80 e1       	ldi	r24, 0x10	; 16
     4f4:	28 9f       	mul	r18, r24
     4f6:	90 01       	movw	r18, r0
     4f8:	11 24       	eor	r1, r1
     4fa:	2c 29       	or	r18, r12
     4fc:	03 70       	andi	r16, 0x03	; 3
     4fe:	00 0f       	add	r16, r16
     500:	20 2b       	or	r18, r16
     502:	20 bd       	out	0x20, r18	; 32
     504:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <UBRR_VAL>
     508:	89 b9       	out	0x09, r24	; 9
     50a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <UBRR_VAL+0x1>
     50e:	8f 77       	andi	r24, 0x7F	; 127
     510:	80 bd       	out	0x20, r24	; 32
     512:	e1 10       	cpse	r14, r1
     514:	01 c0       	rjmp	.+2      	; 0x518 <usart_init+0x7c>
     516:	78 94       	sei
     518:	85 e1       	ldi	r24, 0x15	; 21
     51a:	0f 91       	pop	r16
     51c:	ef 90       	pop	r14
     51e:	cf 90       	pop	r12
     520:	08 95       	ret

00000522 <usart_receive_byte>:
     522:	5f 9b       	sbis	0x0b, 7	; 11
     524:	fe cf       	rjmp	.-4      	; 0x522 <usart_receive_byte>
     526:	8c b1       	in	r24, 0x0c	; 12
     528:	fb 01       	movw	r30, r22
     52a:	80 83       	st	Z, r24
     52c:	5f 9a       	sbi	0x0b, 7	; 11
     52e:	85 e1       	ldi	r24, 0x15	; 21
     530:	08 95       	ret

00000532 <usart_send_arr>:
     532:	cf 93       	push	r28
     534:	df 93       	push	r29
     536:	1f 92       	push	r1
     538:	cd b7       	in	r28, 0x3d	; 61
     53a:	de b7       	in	r29, 0x3e	; 62
     53c:	19 82       	std	Y+1, r1	; 0x01
     53e:	19 82       	std	Y+1, r1	; 0x01
     540:	89 81       	ldd	r24, Y+1	; 0x01
     542:	fb 01       	movw	r30, r22
     544:	e8 0f       	add	r30, r24
     546:	f1 1d       	adc	r31, r1
     548:	80 81       	ld	r24, Z
     54a:	88 23       	and	r24, r24
     54c:	91 f0       	breq	.+36     	; 0x572 <usart_send_arr+0x40>
     54e:	5d 9b       	sbis	0x0b, 5	; 11
     550:	fe cf       	rjmp	.-4      	; 0x54e <usart_send_arr+0x1c>
     552:	89 81       	ldd	r24, Y+1	; 0x01
     554:	fb 01       	movw	r30, r22
     556:	e8 0f       	add	r30, r24
     558:	f1 1d       	adc	r31, r1
     55a:	80 81       	ld	r24, Z
     55c:	8c b9       	out	0x0c, r24	; 12
     55e:	89 81       	ldd	r24, Y+1	; 0x01
     560:	8f 5f       	subi	r24, 0xFF	; 255
     562:	89 83       	std	Y+1, r24	; 0x01
     564:	89 81       	ldd	r24, Y+1	; 0x01
     566:	fb 01       	movw	r30, r22
     568:	e8 0f       	add	r30, r24
     56a:	f1 1d       	adc	r31, r1
     56c:	80 81       	ld	r24, Z
     56e:	81 11       	cpse	r24, r1
     570:	ee cf       	rjmp	.-36     	; 0x54e <usart_send_arr+0x1c>
     572:	85 e1       	ldi	r24, 0x15	; 21
     574:	0f 90       	pop	r0
     576:	df 91       	pop	r29
     578:	cf 91       	pop	r28
     57a:	08 95       	ret

0000057c <usart_set_isr_RXC_callback>:
     57c:	70 93 b2 01 	sts	0x01B2, r23	; 0x8001b2 <vptr_RXC_cb+0x1>
     580:	60 93 b1 01 	sts	0x01B1, r22	; 0x8001b1 <vptr_RXC_cb>
     584:	85 e1       	ldi	r24, 0x15	; 21
     586:	08 95       	ret

00000588 <__vector_13>:
//TEST LATER THE FUNCTION
ISR(USART_RXC_vect)
{
     588:	1f 92       	push	r1
     58a:	0f 92       	push	r0
     58c:	0f b6       	in	r0, 0x3f	; 63
     58e:	0f 92       	push	r0
     590:	11 24       	eor	r1, r1
     592:	2f 93       	push	r18
     594:	3f 93       	push	r19
     596:	4f 93       	push	r20
     598:	5f 93       	push	r21
     59a:	6f 93       	push	r22
     59c:	7f 93       	push	r23
     59e:	8f 93       	push	r24
     5a0:	9f 93       	push	r25
     5a2:	af 93       	push	r26
     5a4:	bf 93       	push	r27
     5a6:	ef 93       	push	r30
     5a8:	ff 93       	push	r31
	if (vptr_RXC_cb)
     5aa:	e0 91 b1 01 	lds	r30, 0x01B1	; 0x8001b1 <vptr_RXC_cb>
     5ae:	f0 91 b2 01 	lds	r31, 0x01B2	; 0x8001b2 <vptr_RXC_cb+0x1>
     5b2:	30 97       	sbiw	r30, 0x00	; 0
     5b4:	09 f0       	breq	.+2      	; 0x5b8 <__vector_13+0x30>
	{
		vptr_RXC_cb();
     5b6:	09 95       	icall
	}
		
}
     5b8:	ff 91       	pop	r31
     5ba:	ef 91       	pop	r30
     5bc:	bf 91       	pop	r27
     5be:	af 91       	pop	r26
     5c0:	9f 91       	pop	r25
     5c2:	8f 91       	pop	r24
     5c4:	7f 91       	pop	r23
     5c6:	6f 91       	pop	r22
     5c8:	5f 91       	pop	r21
     5ca:	4f 91       	pop	r20
     5cc:	3f 91       	pop	r19
     5ce:	2f 91       	pop	r18
     5d0:	0f 90       	pop	r0
     5d2:	0f be       	out	0x3f, r0	; 63
     5d4:	0f 90       	pop	r0
     5d6:	1f 90       	pop	r1
     5d8:	18 95       	reti

000005da <main>:
volatile msa_u8 *uart_manual_active =	"now the manual mode is active. you may control by the keypad on the screen";
volatile msa_u8 *uart_automatic_active= "now the automatic mode is active. you may stop me with the RESET button";
volatile msa_u8 *obstacle_array =		"Caution, there is an obstacle ahead!!";
int main(void)
{
	system_init();
     5da:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <system_init>
			}
		} 
		else if(uart_temp == MANU_SYS)   //r-controlled>>
		{
			usart_send_arr(&uart_obj,uart_manual_active);
			sys_mode=MANU_SYS;
     5de:	0f 2e       	mov	r0, r31
     5e0:	f8 e7       	ldi	r31, 0x78	; 120
     5e2:	cf 2e       	mov	r12, r31
     5e4:	f0 2d       	mov	r31, r0
				{
					TOGGLE_BIT(PORTA,5);
				}
				else if (uart_temp == BL_LIGHT)
				{
					TOGGLE_BIT(PORTA,6);
     5e6:	68 94       	set
     5e8:	dd 24       	eor	r13, r13
     5ea:	d6 f8       	bld	r13, 6
				{
					TOGGLE_BIT(PORTA,4);
				}
				else if (uart_temp == FR_LIGHT)
				{
					TOGGLE_BIT(PORTA,5);
     5ec:	68 94       	set
     5ee:	ff 24       	eor	r15, r15
     5f0:	f5 f8       	bld	r15, 5
				{
					TOGGLE_BIT(PORTD,4);
				}
				else if (uart_temp == FL_LIGHT)
				{
					TOGGLE_BIT(PORTA,4);
     5f2:	d0 e1       	ldi	r29, 0x10	; 16
		usart_receive_byte(&uart_obj,&uart_temp);
		//auto>>
		if (uart_temp == AUTO_SYS)
		{
			usart_send_arr(&uart_obj,uart_automatic_active);
			sys_mode=AUTO_SYS;
     5f4:	ca e7       	ldi	r28, 0x7A	; 122
	system_init();
	//sei();
	while (1)
	{
		//send uart which mode??
		usart_send_arr(&uart_obj,uart_welcome);
     5f6:	60 91 6c 00 	lds	r22, 0x006C	; 0x80006c <uart_welcome>
     5fa:	70 91 6d 00 	lds	r23, 0x006D	; 0x80006d <uart_welcome+0x1>
     5fe:	8a ee       	ldi	r24, 0xEA	; 234
     600:	91 e0       	ldi	r25, 0x01	; 1
     602:	0e 94 99 02 	call	0x532	; 0x532 <usart_send_arr>
		//possible>> auto-avoidance and remote-controlled
		//read the uart with a while not interrupt
		usart_receive_byte(&uart_obj,&uart_temp);
     606:	63 eb       	ldi	r22, 0xB3	; 179
     608:	71 e0       	ldi	r23, 0x01	; 1
     60a:	8a ee       	ldi	r24, 0xEA	; 234
     60c:	91 e0       	ldi	r25, 0x01	; 1
     60e:	0e 94 91 02 	call	0x522	; 0x522 <usart_receive_byte>
		//auto>>
		if (uart_temp == AUTO_SYS)
     612:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <uart_temp>
     616:	8a 37       	cpi	r24, 0x7A	; 122
     618:	b1 f5       	brne	.+108    	; 0x686 <main+0xac>
		{
			usart_send_arr(&uart_obj,uart_automatic_active);
     61a:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <uart_automatic_active>
     61e:	70 91 67 00 	lds	r23, 0x0067	; 0x800067 <uart_automatic_active+0x1>
     622:	8a ee       	ldi	r24, 0xEA	; 234
     624:	91 e0       	ldi	r25, 0x01	; 1
     626:	0e 94 99 02 	call	0x532	; 0x532 <usart_send_arr>
			sys_mode=AUTO_SYS;
     62a:	c0 93 b6 01 	sts	0x01B6, r28	; 0x8001b6 <sys_mode>
			//while not quit
			while (uart_temp != RESET_SYS )
     62e:	26 c0       	rjmp	.+76     	; 0x67c <main+0xa2>
			{
				// 0:1:2 Servo direction
				for (iteration_counter=0; iteration_counter < 10; iteration_counter++)
     630:	10 92 f5 01 	sts	0x01F5, r1	; 0x8001f5 <iteration_counter>
     634:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <iteration_counter>
     638:	8a 30       	cpi	r24, 0x0A	; 10
     63a:	e0 f4       	brcc	.+56     	; 0x674 <main+0x9a>
				{
					//pwm
					move_forward(350);
     63c:	8e e5       	ldi	r24, 0x5E	; 94
     63e:	0e 94 ab 06 	call	0xd56	; 0xd56 <move_forward>
					pwm_edit(&pwm_obj,INVERTED,FAST_PWM,SERVO_CTRL_FREQ,servo_direction[iteration_counter]);
     642:	e0 91 f5 01 	lds	r30, 0x01F5	; 0x8001f5 <iteration_counter>
     646:	f0 e0       	ldi	r31, 0x00	; 0
     648:	e2 59       	subi	r30, 0x92	; 146
     64a:	ff 4f       	sbci	r31, 0xFF	; 255
     64c:	e0 80       	ld	r14, Z
     64e:	02 e3       	ldi	r16, 0x32	; 50
     650:	10 e0       	ldi	r17, 0x00	; 0
     652:	20 e0       	ldi	r18, 0x00	; 0
     654:	30 e0       	ldi	r19, 0x00	; 0
     656:	43 e0       	ldi	r20, 0x03	; 3
     658:	63 e0       	ldi	r22, 0x03	; 3
     65a:	89 ed       	ldi	r24, 0xD9	; 217
     65c:	91 e0       	ldi	r25, 0x01	; 1
     65e:	0e 94 d7 01 	call	0x3ae	; 0x3ae <pwm_edit>
			sys_mode=AUTO_SYS;
			//while not quit
			while (uart_temp != RESET_SYS )
			{
				// 0:1:2 Servo direction
				for (iteration_counter=0; iteration_counter < 10; iteration_counter++)
     662:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <iteration_counter>
     666:	8f 5f       	subi	r24, 0xFF	; 255
     668:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <iteration_counter>
     66c:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <iteration_counter>
     670:	8a 30       	cpi	r24, 0x0A	; 10
     672:	20 f3       	brcs	.-56     	; 0x63c <main+0x62>
					//pwm
					move_forward(350);
					pwm_edit(&pwm_obj,INVERTED,FAST_PWM,SERVO_CTRL_FREQ,servo_direction[iteration_counter]);
					//_delay_ms(SERVO_DELAY_VAL);
				}
				if (UDR == RESET_SYS)
     674:	8c b1       	in	r24, 0x0c	; 12
     676:	83 36       	cpi	r24, 0x63	; 99
     678:	09 f4       	brne	.+2      	; 0x67c <main+0xa2>
     67a:	bd cf       	rjmp	.-134    	; 0x5f6 <main+0x1c>
		if (uart_temp == AUTO_SYS)
		{
			usart_send_arr(&uart_obj,uart_automatic_active);
			sys_mode=AUTO_SYS;
			//while not quit
			while (uart_temp != RESET_SYS )
     67c:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <uart_temp>
     680:	83 36       	cpi	r24, 0x63	; 99
     682:	b1 f6       	brne	.-84     	; 0x630 <main+0x56>
     684:	b8 cf       	rjmp	.-144    	; 0x5f6 <main+0x1c>
				{
					break;
				}
			}
		} 
		else if(uart_temp == MANU_SYS)   //r-controlled>>
     686:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <uart_temp>
     68a:	88 37       	cpi	r24, 0x78	; 120
     68c:	09 f0       	breq	.+2      	; 0x690 <main+0xb6>
     68e:	98 c0       	rjmp	.+304    	; 0x7c0 <main+0x1e6>
		{
			usart_send_arr(&uart_obj,uart_manual_active);
     690:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <uart_manual_active>
     694:	70 91 69 00 	lds	r23, 0x0069	; 0x800069 <uart_manual_active+0x1>
     698:	8a ee       	ldi	r24, 0xEA	; 234
     69a:	91 e0       	ldi	r25, 0x01	; 1
     69c:	0e 94 99 02 	call	0x532	; 0x532 <usart_send_arr>
			sys_mode=MANU_SYS;
     6a0:	c0 92 b6 01 	sts	0x01B6, r12	; 0x8001b6 <sys_mode>
			//while not quit
			while (uart_temp != RESET_SYS )
     6a4:	85 c0       	rjmp	.+266    	; 0x7b0 <main+0x1d6>
			{
				usart_receive_byte(&uart_obj,&uart_temp);
     6a6:	63 eb       	ldi	r22, 0xB3	; 179
     6a8:	71 e0       	ldi	r23, 0x01	; 1
     6aa:	8a ee       	ldi	r24, 0xEA	; 234
     6ac:	91 e0       	ldi	r25, 0x01	; 1
     6ae:	0e 94 91 02 	call	0x522	; 0x522 <usart_receive_byte>
				//if 4ard/bkward/lift/right>>set the servo to the front/bkward/lift/right
				if		(uart_temp == MV_FORWARD)
     6b2:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <uart_temp>
     6b6:	86 37       	cpi	r24, 0x76	; 118
     6b8:	91 f4       	brne	.+36     	; 0x6de <main+0x104>
				{
					//scan the distance if there is an obstacle stop
					//send >>an obstacle,please turn right or lift or move 4ard or bkward
					//if not>>move for 200ms
					//pwm
					pwm_edit(&pwm_obj,INVERTED,FAST_PWM,SERVO_CTRL_FREQ,3);
     6ba:	0f 2e       	mov	r0, r31
     6bc:	f3 e0       	ldi	r31, 0x03	; 3
     6be:	ef 2e       	mov	r14, r31
     6c0:	f0 2d       	mov	r31, r0
     6c2:	02 e3       	ldi	r16, 0x32	; 50
     6c4:	10 e0       	ldi	r17, 0x00	; 0
     6c6:	20 e0       	ldi	r18, 0x00	; 0
     6c8:	30 e0       	ldi	r19, 0x00	; 0
     6ca:	43 e0       	ldi	r20, 0x03	; 3
     6cc:	63 e0       	ldi	r22, 0x03	; 3
     6ce:	89 ed       	ldi	r24, 0xD9	; 217
     6d0:	91 e0       	ldi	r25, 0x01	; 1
     6d2:	0e 94 d7 01 	call	0x3ae	; 0x3ae <pwm_edit>
					move_forward(PRESS_VAL);
     6d6:	86 e9       	ldi	r24, 0x96	; 150
     6d8:	0e 94 ab 06 	call	0xd56	; 0xd56 <move_forward>
     6dc:	69 c0       	rjmp	.+210    	; 0x7b0 <main+0x1d6>
				} 
				else if (uart_temp == MV_BACKWARD)
     6de:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <uart_temp>
     6e2:	82 36       	cpi	r24, 0x62	; 98
     6e4:	91 f4       	brne	.+36     	; 0x70a <main+0x130>
				{
					//scan the distance if there is an obstacle stop
					//send >>an obstacle,please turn right or lift or move 4ard or bkward
					//if not>>move for 200ms
					//pwm
					pwm_edit(&pwm_obj,INVERTED,FAST_PWM,SERVO_CTRL_FREQ,3);
     6e6:	0f 2e       	mov	r0, r31
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	ef 2e       	mov	r14, r31
     6ec:	f0 2d       	mov	r31, r0
     6ee:	02 e3       	ldi	r16, 0x32	; 50
     6f0:	10 e0       	ldi	r17, 0x00	; 0
     6f2:	20 e0       	ldi	r18, 0x00	; 0
     6f4:	30 e0       	ldi	r19, 0x00	; 0
     6f6:	43 e0       	ldi	r20, 0x03	; 3
     6f8:	63 e0       	ldi	r22, 0x03	; 3
     6fa:	89 ed       	ldi	r24, 0xD9	; 217
     6fc:	91 e0       	ldi	r25, 0x01	; 1
     6fe:	0e 94 d7 01 	call	0x3ae	; 0x3ae <pwm_edit>
					move_bckward(PRESS_VAL);
     702:	86 e9       	ldi	r24, 0x96	; 150
     704:	0e 94 bc 06 	call	0xd78	; 0xd78 <move_bckward>
     708:	53 c0       	rjmp	.+166    	; 0x7b0 <main+0x1d6>
				} 
				else if (uart_temp == MV_RIGHT)
     70a:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <uart_temp>
     70e:	8d 36       	cpi	r24, 0x6D	; 109
     710:	91 f4       	brne	.+36     	; 0x736 <main+0x15c>
				{
					//scan the distance if there is an obstacle stop
					//send >>an obstacle,please turn right or lift or move 4ard or bkward
					//if not>>move for 200ms
					//pwm
					pwm_edit(&pwm_obj,INVERTED,FAST_PWM,SERVO_CTRL_FREQ,7);
     712:	0f 2e       	mov	r0, r31
     714:	f7 e0       	ldi	r31, 0x07	; 7
     716:	ef 2e       	mov	r14, r31
     718:	f0 2d       	mov	r31, r0
     71a:	02 e3       	ldi	r16, 0x32	; 50
     71c:	10 e0       	ldi	r17, 0x00	; 0
     71e:	20 e0       	ldi	r18, 0x00	; 0
     720:	30 e0       	ldi	r19, 0x00	; 0
     722:	43 e0       	ldi	r20, 0x03	; 3
     724:	63 e0       	ldi	r22, 0x03	; 3
     726:	89 ed       	ldi	r24, 0xD9	; 217
     728:	91 e0       	ldi	r25, 0x01	; 1
     72a:	0e 94 d7 01 	call	0x3ae	; 0x3ae <pwm_edit>
					move_right(PRESS_VAL);
     72e:	86 e9       	ldi	r24, 0x96	; 150
     730:	0e 94 cd 06 	call	0xd9a	; 0xd9a <move_right>
     734:	3d c0       	rjmp	.+122    	; 0x7b0 <main+0x1d6>
				} 
				else if (uart_temp == MV_LEFT)
     736:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <uart_temp>
     73a:	8e 36       	cpi	r24, 0x6E	; 110
     73c:	91 f4       	brne	.+36     	; 0x762 <main+0x188>
				{
					//scan the distance if there is an obstacle stop
					//send >>an obstacle,please turn right or lift or move 4ard or bkward
					//if not>>move for 200ms
					//pwm
					pwm_edit(&pwm_obj,INVERTED,FAST_PWM,SERVO_CTRL_FREQ,7);
     73e:	0f 2e       	mov	r0, r31
     740:	f7 e0       	ldi	r31, 0x07	; 7
     742:	ef 2e       	mov	r14, r31
     744:	f0 2d       	mov	r31, r0
     746:	02 e3       	ldi	r16, 0x32	; 50
     748:	10 e0       	ldi	r17, 0x00	; 0
     74a:	20 e0       	ldi	r18, 0x00	; 0
     74c:	30 e0       	ldi	r19, 0x00	; 0
     74e:	43 e0       	ldi	r20, 0x03	; 3
     750:	63 e0       	ldi	r22, 0x03	; 3
     752:	89 ed       	ldi	r24, 0xD9	; 217
     754:	91 e0       	ldi	r25, 0x01	; 1
     756:	0e 94 d7 01 	call	0x3ae	; 0x3ae <pwm_edit>
					move_left(PRESS_VAL);
     75a:	86 e9       	ldi	r24, 0x96	; 150
     75c:	0e 94 de 06 	call	0xdbc	; 0xdbc <move_left>
     760:	27 c0       	rjmp	.+78     	; 0x7b0 <main+0x1d6>
				}
				else if (uart_temp == BEEEEEEEEB)
     762:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <uart_temp>
     766:	89 36       	cpi	r24, 0x69	; 105
     768:	21 f4       	brne	.+8      	; 0x772 <main+0x198>
				{
					TOGGLE_BIT(PORTD,4);
     76a:	82 b3       	in	r24, 0x12	; 18
     76c:	8d 27       	eor	r24, r29
     76e:	82 bb       	out	0x12, r24	; 18
     770:	1f c0       	rjmp	.+62     	; 0x7b0 <main+0x1d6>
				}
				else if (uart_temp == FL_LIGHT)
     772:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <uart_temp>
     776:	80 37       	cpi	r24, 0x70	; 112
     778:	21 f4       	brne	.+8      	; 0x782 <main+0x1a8>
				{
					TOGGLE_BIT(PORTA,4);
     77a:	8b b3       	in	r24, 0x1b	; 27
     77c:	8d 27       	eor	r24, r29
     77e:	8b bb       	out	0x1b, r24	; 27
     780:	17 c0       	rjmp	.+46     	; 0x7b0 <main+0x1d6>
				}
				else if (uart_temp == FR_LIGHT)
     782:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <uart_temp>
     786:	85 37       	cpi	r24, 0x75	; 117
     788:	21 f4       	brne	.+8      	; 0x792 <main+0x1b8>
				{
					TOGGLE_BIT(PORTA,5);
     78a:	8b b3       	in	r24, 0x1b	; 27
     78c:	8f 25       	eor	r24, r15
     78e:	8b bb       	out	0x1b, r24	; 27
     790:	0f c0       	rjmp	.+30     	; 0x7b0 <main+0x1d6>
				}
				else if (uart_temp == BL_LIGHT)
     792:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <uart_temp>
     796:	8f 36       	cpi	r24, 0x6F	; 111
     798:	21 f4       	brne	.+8      	; 0x7a2 <main+0x1c8>
				{
					TOGGLE_BIT(PORTA,6);
     79a:	8b b3       	in	r24, 0x1b	; 27
     79c:	8d 25       	eor	r24, r13
     79e:	8b bb       	out	0x1b, r24	; 27
     7a0:	07 c0       	rjmp	.+14     	; 0x7b0 <main+0x1d6>
				}
				else if (uart_temp == BR_LIGHT)
     7a2:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <uart_temp>
     7a6:	89 37       	cpi	r24, 0x79	; 121
     7a8:	19 f4       	brne	.+6      	; 0x7b0 <main+0x1d6>
				{
					TOGGLE_BIT(PORTA,7);
     7aa:	8b b3       	in	r24, 0x1b	; 27
     7ac:	80 58       	subi	r24, 0x80	; 128
     7ae:	8b bb       	out	0x1b, r24	; 27
		else if(uart_temp == MANU_SYS)   //r-controlled>>
		{
			usart_send_arr(&uart_obj,uart_manual_active);
			sys_mode=MANU_SYS;
			//while not quit
			while (uart_temp != RESET_SYS )
     7b0:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <uart_temp>
     7b4:	83 36       	cpi	r24, 0x63	; 99
     7b6:	09 f0       	breq	.+2      	; 0x7ba <main+0x1e0>
     7b8:	76 cf       	rjmp	.-276    	; 0x6a6 <main+0xcc>
				else if (uart_temp == BR_LIGHT)
				{
					TOGGLE_BIT(PORTA,7);
				}
			}
		sys_mode=OFF_SYS;
     7ba:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <sys_mode>
     7be:	1b cf       	rjmp	.-458    	; 0x5f6 <main+0x1c>
		}
		else if(uart_temp == '\n')
     7c0:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <uart_temp>
     7c4:	8a 30       	cpi	r24, 0x0A	; 10
     7c6:	09 f4       	brne	.+2      	; 0x7ca <main+0x1f0>
     7c8:	16 cf       	rjmp	.-468    	; 0x5f6 <main+0x1c>
		{
			//donothing this is just to neglict the end flag from the mobile app
		}
		else//neither manual nor auto
		{
			usart_send_arr(&uart_obj,uart_wrong_command);
     7ca:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <uart_wrong_command>
     7ce:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <uart_wrong_command+0x1>
     7d2:	8a ee       	ldi	r24, 0xEA	; 234
     7d4:	91 e0       	ldi	r25, 0x01	; 1
     7d6:	0e 94 99 02 	call	0x532	; 0x532 <usart_send_arr>
     7da:	0d cf       	rjmp	.-486    	; 0x5f6 <main+0x1c>

000007dc <__vector_1>:
	}
	return 0;
}

ISR(INT0_vect)
{
     7dc:	1f 92       	push	r1
     7de:	0f 92       	push	r0
     7e0:	0f b6       	in	r0, 0x3f	; 63
     7e2:	0f 92       	push	r0
     7e4:	11 24       	eor	r1, r1
     7e6:	2f 93       	push	r18
     7e8:	3f 93       	push	r19
     7ea:	4f 93       	push	r20
     7ec:	5f 93       	push	r21
     7ee:	6f 93       	push	r22
     7f0:	7f 93       	push	r23
     7f2:	8f 93       	push	r24
     7f4:	9f 93       	push	r25
     7f6:	af 93       	push	r26
     7f8:	bf 93       	push	r27
     7fa:	ef 93       	push	r30
     7fc:	ff 93       	push	r31
	// 		movement_stop();
	move_stop(10);
     7fe:	8a e0       	ldi	r24, 0x0A	; 10
     800:	0e 94 ef 06 	call	0xdde	; 0xdde <move_stop>
	// 		read spi
	usart_send_arr(&uart_obj,obstacle_array);
     804:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <obstacle_array>
     808:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <obstacle_array+0x1>
     80c:	8a ee       	ldi	r24, 0xEA	; 234
     80e:	91 e0       	ldi	r25, 0x01	; 1
     810:	0e 94 99 02 	call	0x532	; 0x532 <usart_send_arr>
	hal_spiExchangeDATA_A(&spi_obj,&spi_temp_out,&spi_temp_inn);
     814:	44 eb       	ldi	r20, 0xB4	; 180
     816:	51 e0       	ldi	r21, 0x01	; 1
     818:	65 eb       	ldi	r22, 0xB5	; 181
     81a:	71 e0       	ldi	r23, 0x01	; 1
     81c:	83 ee       	ldi	r24, 0xE3	; 227
     81e:	91 e0       	ldi	r25, 0x01	; 1
     820:	0e 94 a6 06 	call	0xd4c	; 0xd4c <hal_spiExchangeDATA_A>

		if (spi_temp_inn == OBSTACLE_A1)
     824:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <spi_temp_inn>
     828:	82 35       	cpi	r24, 0x52	; 82
     82a:	21 f4       	brne	.+8      	; 0x834 <__vector_1+0x58>
		{
			move_right(350);
     82c:	8e e5       	ldi	r24, 0x5E	; 94
     82e:	0e 94 cd 06 	call	0xd9a	; 0xd9a <move_right>
     832:	03 c0       	rjmp	.+6      	; 0x83a <__vector_1+0x5e>
		} 
		else
		{
			move_left(350);
     834:	8e e5       	ldi	r24, 0x5E	; 94
     836:	0e 94 de 06 	call	0xdbc	; 0xdbc <move_left>
		}
		spi_temp_inn=0;
     83a:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <spi_temp_inn>

}
     83e:	ff 91       	pop	r31
     840:	ef 91       	pop	r30
     842:	bf 91       	pop	r27
     844:	af 91       	pop	r26
     846:	9f 91       	pop	r25
     848:	8f 91       	pop	r24
     84a:	7f 91       	pop	r23
     84c:	6f 91       	pop	r22
     84e:	5f 91       	pop	r21
     850:	4f 91       	pop	r20
     852:	3f 91       	pop	r19
     854:	2f 91       	pop	r18
     856:	0f 90       	pop	r0
     858:	0f be       	out	0x3f, r0	; 63
     85a:	0f 90       	pop	r0
     85c:	1f 90       	pop	r1
     85e:	18 95       	reti

00000860 <__vector_2>:
ISR(INT1_vect)
{
     860:	1f 92       	push	r1
     862:	0f 92       	push	r0
     864:	0f b6       	in	r0, 0x3f	; 63
     866:	0f 92       	push	r0
     868:	11 24       	eor	r1, r1
     86a:	2f 93       	push	r18
     86c:	3f 93       	push	r19
     86e:	4f 93       	push	r20
     870:	5f 93       	push	r21
     872:	6f 93       	push	r22
     874:	7f 93       	push	r23
     876:	8f 93       	push	r24
     878:	9f 93       	push	r25
     87a:	af 93       	push	r26
     87c:	bf 93       	push	r27
     87e:	ef 93       	push	r30
     880:	ff 93       	push	r31
	// 		movement_stop();
	move_stop(10);
     882:	8a e0       	ldi	r24, 0x0A	; 10
     884:	0e 94 ef 06 	call	0xdde	; 0xdde <move_stop>
	// 		read spi
	usart_send_arr(&uart_obj,obstacle_array);
     888:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <obstacle_array>
     88c:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <obstacle_array+0x1>
     890:	8a ee       	ldi	r24, 0xEA	; 234
     892:	91 e0       	ldi	r25, 0x01	; 1
     894:	0e 94 99 02 	call	0x532	; 0x532 <usart_send_arr>
	hal_spiExchangeDATA_A(&spi_obj,&spi_temp_out,&spi_temp_inn);
     898:	44 eb       	ldi	r20, 0xB4	; 180
     89a:	51 e0       	ldi	r21, 0x01	; 1
     89c:	65 eb       	ldi	r22, 0xB5	; 181
     89e:	71 e0       	ldi	r23, 0x01	; 1
     8a0:	83 ee       	ldi	r24, 0xE3	; 227
     8a2:	91 e0       	ldi	r25, 0x01	; 1
     8a4:	0e 94 a6 06 	call	0xd4c	; 0xd4c <hal_spiExchangeDATA_A>

	if (spi_temp_inn == OBSTACLE_A1)
     8a8:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <spi_temp_inn>
     8ac:	82 35       	cpi	r24, 0x52	; 82
     8ae:	21 f4       	brne	.+8      	; 0x8b8 <__vector_2+0x58>
	{
		move_left(350);
     8b0:	8e e5       	ldi	r24, 0x5E	; 94
     8b2:	0e 94 de 06 	call	0xdbc	; 0xdbc <move_left>
     8b6:	03 c0       	rjmp	.+6      	; 0x8be <__vector_2+0x5e>
	}
	else
	{
		move_right(350);
     8b8:	8e e5       	ldi	r24, 0x5E	; 94
     8ba:	0e 94 cd 06 	call	0xd9a	; 0xd9a <move_right>
	}
	spi_temp_inn=0;
     8be:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <spi_temp_inn>
		
     8c2:	ff 91       	pop	r31
     8c4:	ef 91       	pop	r30
     8c6:	bf 91       	pop	r27
     8c8:	af 91       	pop	r26
     8ca:	9f 91       	pop	r25
     8cc:	8f 91       	pop	r24
     8ce:	7f 91       	pop	r23
     8d0:	6f 91       	pop	r22
     8d2:	5f 91       	pop	r21
     8d4:	4f 91       	pop	r20
     8d6:	3f 91       	pop	r19
     8d8:	2f 91       	pop	r18
     8da:	0f 90       	pop	r0
     8dc:	0f be       	out	0x3f, r0	; 63
     8de:	0f 90       	pop	r0
     8e0:	1f 90       	pop	r1
     8e2:	18 95       	reti

000008e4 <vListInsertEnd>:
	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
}
     8e4:	cf 93       	push	r28
     8e6:	df 93       	push	r29
     8e8:	9c 01       	movw	r18, r24
     8ea:	fb 01       	movw	r30, r22
     8ec:	dc 01       	movw	r26, r24
     8ee:	11 96       	adiw	r26, 0x01	; 1
     8f0:	cd 91       	ld	r28, X+
     8f2:	dc 91       	ld	r29, X
     8f4:	12 97       	sbiw	r26, 0x02	; 2
     8f6:	d3 83       	std	Z+3, r29	; 0x03
     8f8:	c2 83       	std	Z+2, r28	; 0x02
     8fa:	8c 81       	ldd	r24, Y+4	; 0x04
     8fc:	9d 81       	ldd	r25, Y+5	; 0x05
     8fe:	95 83       	std	Z+5, r25	; 0x05
     900:	84 83       	std	Z+4, r24	; 0x04
     902:	8c 81       	ldd	r24, Y+4	; 0x04
     904:	9d 81       	ldd	r25, Y+5	; 0x05
     906:	dc 01       	movw	r26, r24
     908:	13 96       	adiw	r26, 0x03	; 3
     90a:	7c 93       	st	X, r23
     90c:	6e 93       	st	-X, r22
     90e:	12 97       	sbiw	r26, 0x02	; 2
     910:	7d 83       	std	Y+5, r23	; 0x05
     912:	6c 83       	std	Y+4, r22	; 0x04
     914:	31 87       	std	Z+9, r19	; 0x09
     916:	20 87       	std	Z+8, r18	; 0x08
     918:	f9 01       	movw	r30, r18
     91a:	80 81       	ld	r24, Z
     91c:	8f 5f       	subi	r24, 0xFF	; 255
     91e:	80 83       	st	Z, r24
     920:	df 91       	pop	r29
     922:	cf 91       	pop	r28
     924:	08 95       	ret

00000926 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     926:	cf 93       	push	r28
     928:	df 93       	push	r29
     92a:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     92c:	a0 85       	ldd	r26, Z+8	; 0x08
     92e:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     930:	c2 81       	ldd	r28, Z+2	; 0x02
     932:	d3 81       	ldd	r29, Z+3	; 0x03
     934:	84 81       	ldd	r24, Z+4	; 0x04
     936:	95 81       	ldd	r25, Z+5	; 0x05
     938:	9d 83       	std	Y+5, r25	; 0x05
     93a:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     93c:	c4 81       	ldd	r28, Z+4	; 0x04
     93e:	d5 81       	ldd	r29, Z+5	; 0x05
     940:	82 81       	ldd	r24, Z+2	; 0x02
     942:	93 81       	ldd	r25, Z+3	; 0x03
     944:	9b 83       	std	Y+3, r25	; 0x03
     946:	8a 83       	std	Y+2, r24	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     948:	11 96       	adiw	r26, 0x01	; 1
     94a:	8d 91       	ld	r24, X+
     94c:	9c 91       	ld	r25, X
     94e:	12 97       	sbiw	r26, 0x02	; 2
     950:	e8 17       	cp	r30, r24
     952:	f9 07       	cpc	r31, r25
     954:	31 f4       	brne	.+12     	; 0x962 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     956:	84 81       	ldd	r24, Z+4	; 0x04
     958:	95 81       	ldd	r25, Z+5	; 0x05
     95a:	12 96       	adiw	r26, 0x02	; 2
     95c:	9c 93       	st	X, r25
     95e:	8e 93       	st	-X, r24
     960:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     962:	11 86       	std	Z+9, r1	; 0x09
     964:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     966:	8c 91       	ld	r24, X
     968:	81 50       	subi	r24, 0x01	; 1
     96a:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
}
     96c:	df 91       	pop	r29
     96e:	cf 91       	pop	r28
     970:	08 95       	ret

00000972 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     972:	0f 92       	push	r0
     974:	0f b6       	in	r0, 0x3f	; 63
     976:	f8 94       	cli
     978:	0f 92       	push	r0
     97a:	1f 92       	push	r1
     97c:	11 24       	eor	r1, r1
     97e:	2f 92       	push	r2
     980:	3f 92       	push	r3
     982:	4f 92       	push	r4
     984:	5f 92       	push	r5
     986:	6f 92       	push	r6
     988:	7f 92       	push	r7
     98a:	8f 92       	push	r8
     98c:	9f 92       	push	r9
     98e:	af 92       	push	r10
     990:	bf 92       	push	r11
     992:	cf 92       	push	r12
     994:	df 92       	push	r13
     996:	ef 92       	push	r14
     998:	ff 92       	push	r15
     99a:	0f 93       	push	r16
     99c:	1f 93       	push	r17
     99e:	2f 93       	push	r18
     9a0:	3f 93       	push	r19
     9a2:	4f 93       	push	r20
     9a4:	5f 93       	push	r21
     9a6:	6f 93       	push	r22
     9a8:	7f 93       	push	r23
     9aa:	8f 93       	push	r24
     9ac:	9f 93       	push	r25
     9ae:	af 93       	push	r26
     9b0:	bf 93       	push	r27
     9b2:	cf 93       	push	r28
     9b4:	df 93       	push	r29
     9b6:	ef 93       	push	r30
     9b8:	ff 93       	push	r31
     9ba:	a0 91 d7 01 	lds	r26, 0x01D7	; 0x8001d7 <pxCurrentTCB>
     9be:	b0 91 d8 01 	lds	r27, 0x01D8	; 0x8001d8 <pxCurrentTCB+0x1>
     9c2:	0d b6       	in	r0, 0x3d	; 61
     9c4:	0d 92       	st	X+, r0
     9c6:	0e b6       	in	r0, 0x3e	; 62
     9c8:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     9ca:	0e 94 37 05 	call	0xa6e	; 0xa6e <xTaskIncrementTick>
     9ce:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     9d0:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     9d4:	a0 91 d7 01 	lds	r26, 0x01D7	; 0x8001d7 <pxCurrentTCB>
     9d8:	b0 91 d8 01 	lds	r27, 0x01D8	; 0x8001d8 <pxCurrentTCB+0x1>
     9dc:	cd 91       	ld	r28, X+
     9de:	cd bf       	out	0x3d, r28	; 61
     9e0:	dd 91       	ld	r29, X+
     9e2:	de bf       	out	0x3e, r29	; 62
     9e4:	ff 91       	pop	r31
     9e6:	ef 91       	pop	r30
     9e8:	df 91       	pop	r29
     9ea:	cf 91       	pop	r28
     9ec:	bf 91       	pop	r27
     9ee:	af 91       	pop	r26
     9f0:	9f 91       	pop	r25
     9f2:	8f 91       	pop	r24
     9f4:	7f 91       	pop	r23
     9f6:	6f 91       	pop	r22
     9f8:	5f 91       	pop	r21
     9fa:	4f 91       	pop	r20
     9fc:	3f 91       	pop	r19
     9fe:	2f 91       	pop	r18
     a00:	1f 91       	pop	r17
     a02:	0f 91       	pop	r16
     a04:	ff 90       	pop	r15
     a06:	ef 90       	pop	r14
     a08:	df 90       	pop	r13
     a0a:	cf 90       	pop	r12
     a0c:	bf 90       	pop	r11
     a0e:	af 90       	pop	r10
     a10:	9f 90       	pop	r9
     a12:	8f 90       	pop	r8
     a14:	7f 90       	pop	r7
     a16:	6f 90       	pop	r6
     a18:	5f 90       	pop	r5
     a1a:	4f 90       	pop	r4
     a1c:	3f 90       	pop	r3
     a1e:	2f 90       	pop	r2
     a20:	1f 90       	pop	r1
     a22:	0f 90       	pop	r0
     a24:	0f be       	out	0x3f, r0	; 63
     a26:	0f 90       	pop	r0

	asm volatile ( "ret" );
     a28:	08 95       	ret

00000a2a <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     a2a:	0e 94 b9 04 	call	0x972	; 0x972 <vPortYieldFromTick>
		asm volatile ( "reti" );
     a2e:	18 95       	reti

00000a30 <prvResetNextTaskUnblockTime>:
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
     a30:	e0 91 c3 01 	lds	r30, 0x01C3	; 0x8001c3 <pxDelayedTaskList>
     a34:	f0 91 c4 01 	lds	r31, 0x01C4	; 0x8001c4 <pxDelayedTaskList+0x1>
     a38:	80 81       	ld	r24, Z
     a3a:	81 11       	cpse	r24, r1
     a3c:	07 c0       	rjmp	.+14     	; 0xa4c <prvResetNextTaskUnblockTime+0x1c>
     a3e:	8f ef       	ldi	r24, 0xFF	; 255
     a40:	9f ef       	ldi	r25, 0xFF	; 255
     a42:	90 93 ba 01 	sts	0x01BA, r25	; 0x8001ba <xNextTaskUnblockTime+0x1>
     a46:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <xNextTaskUnblockTime>
     a4a:	08 95       	ret
     a4c:	e0 91 c3 01 	lds	r30, 0x01C3	; 0x8001c3 <pxDelayedTaskList>
     a50:	f0 91 c4 01 	lds	r31, 0x01C4	; 0x8001c4 <pxDelayedTaskList+0x1>
     a54:	05 80       	ldd	r0, Z+5	; 0x05
     a56:	f6 81       	ldd	r31, Z+6	; 0x06
     a58:	e0 2d       	mov	r30, r0
     a5a:	06 80       	ldd	r0, Z+6	; 0x06
     a5c:	f7 81       	ldd	r31, Z+7	; 0x07
     a5e:	e0 2d       	mov	r30, r0
     a60:	82 81       	ldd	r24, Z+2	; 0x02
     a62:	93 81       	ldd	r25, Z+3	; 0x03
     a64:	90 93 ba 01 	sts	0x01BA, r25	; 0x8001ba <xNextTaskUnblockTime+0x1>
     a68:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <xNextTaskUnblockTime>
     a6c:	08 95       	ret

00000a6e <xTaskIncrementTick>:
     a6e:	cf 92       	push	r12
     a70:	df 92       	push	r13
     a72:	ef 92       	push	r14
     a74:	ff 92       	push	r15
     a76:	0f 93       	push	r16
     a78:	1f 93       	push	r17
     a7a:	cf 93       	push	r28
     a7c:	df 93       	push	r29
     a7e:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <uxSchedulerSuspended>
     a82:	81 11       	cpse	r24, r1
     a84:	99 c0       	rjmp	.+306    	; 0xbb8 <xTaskIncrementTick+0x14a>
     a86:	e0 90 bf 01 	lds	r14, 0x01BF	; 0x8001bf <xTickCount>
     a8a:	f0 90 c0 01 	lds	r15, 0x01C0	; 0x8001c0 <xTickCount+0x1>
     a8e:	8f ef       	ldi	r24, 0xFF	; 255
     a90:	e8 1a       	sub	r14, r24
     a92:	f8 0a       	sbc	r15, r24
     a94:	f0 92 c0 01 	sts	0x01C0, r15	; 0x8001c0 <xTickCount+0x1>
     a98:	e0 92 bf 01 	sts	0x01BF, r14	; 0x8001bf <xTickCount>
     a9c:	e1 14       	cp	r14, r1
     a9e:	f1 04       	cpc	r15, r1
     aa0:	b9 f4       	brne	.+46     	; 0xad0 <xTaskIncrementTick+0x62>
     aa2:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <pxDelayedTaskList>
     aa6:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <pxDelayedTaskList+0x1>
     aaa:	20 91 c1 01 	lds	r18, 0x01C1	; 0x8001c1 <pxOverflowDelayedTaskList>
     aae:	30 91 c2 01 	lds	r19, 0x01C2	; 0x8001c2 <pxOverflowDelayedTaskList+0x1>
     ab2:	30 93 c4 01 	sts	0x01C4, r19	; 0x8001c4 <pxDelayedTaskList+0x1>
     ab6:	20 93 c3 01 	sts	0x01C3, r18	; 0x8001c3 <pxDelayedTaskList>
     aba:	90 93 c2 01 	sts	0x01C2, r25	; 0x8001c2 <pxOverflowDelayedTaskList+0x1>
     abe:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <pxOverflowDelayedTaskList>
     ac2:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <xNumOfOverflows>
     ac6:	8f 5f       	subi	r24, 0xFF	; 255
     ac8:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <xNumOfOverflows>
     acc:	0e 94 18 05 	call	0xa30	; 0xa30 <prvResetNextTaskUnblockTime>
     ad0:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <xNextTaskUnblockTime>
     ad4:	90 91 ba 01 	lds	r25, 0x01BA	; 0x8001ba <xNextTaskUnblockTime+0x1>
     ad8:	e8 16       	cp	r14, r24
     ada:	f9 06       	cpc	r15, r25
     adc:	10 f4       	brcc	.+4      	; 0xae2 <xTaskIncrementTick+0x74>
     ade:	d1 2c       	mov	r13, r1
     ae0:	53 c0       	rjmp	.+166    	; 0xb88 <xTaskIncrementTick+0x11a>
     ae2:	d1 2c       	mov	r13, r1
     ae4:	cc 24       	eor	r12, r12
     ae6:	c3 94       	inc	r12
     ae8:	e0 91 c3 01 	lds	r30, 0x01C3	; 0x8001c3 <pxDelayedTaskList>
     aec:	f0 91 c4 01 	lds	r31, 0x01C4	; 0x8001c4 <pxDelayedTaskList+0x1>
     af0:	80 81       	ld	r24, Z
     af2:	81 11       	cpse	r24, r1
     af4:	07 c0       	rjmp	.+14     	; 0xb04 <xTaskIncrementTick+0x96>
     af6:	8f ef       	ldi	r24, 0xFF	; 255
     af8:	9f ef       	ldi	r25, 0xFF	; 255
     afa:	90 93 ba 01 	sts	0x01BA, r25	; 0x8001ba <xNextTaskUnblockTime+0x1>
     afe:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <xNextTaskUnblockTime>
     b02:	42 c0       	rjmp	.+132    	; 0xb88 <xTaskIncrementTick+0x11a>
     b04:	e0 91 c3 01 	lds	r30, 0x01C3	; 0x8001c3 <pxDelayedTaskList>
     b08:	f0 91 c4 01 	lds	r31, 0x01C4	; 0x8001c4 <pxDelayedTaskList+0x1>
     b0c:	05 80       	ldd	r0, Z+5	; 0x05
     b0e:	f6 81       	ldd	r31, Z+6	; 0x06
     b10:	e0 2d       	mov	r30, r0
     b12:	c6 81       	ldd	r28, Z+6	; 0x06
     b14:	d7 81       	ldd	r29, Z+7	; 0x07
     b16:	8a 81       	ldd	r24, Y+2	; 0x02
     b18:	9b 81       	ldd	r25, Y+3	; 0x03
     b1a:	e8 16       	cp	r14, r24
     b1c:	f9 06       	cpc	r15, r25
     b1e:	28 f4       	brcc	.+10     	; 0xb2a <xTaskIncrementTick+0xbc>
     b20:	90 93 ba 01 	sts	0x01BA, r25	; 0x8001ba <xNextTaskUnblockTime+0x1>
     b24:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <xNextTaskUnblockTime>
     b28:	2f c0       	rjmp	.+94     	; 0xb88 <xTaskIncrementTick+0x11a>
     b2a:	8e 01       	movw	r16, r28
     b2c:	0e 5f       	subi	r16, 0xFE	; 254
     b2e:	1f 4f       	sbci	r17, 0xFF	; 255
     b30:	c8 01       	movw	r24, r16
     b32:	0e 94 93 04 	call	0x926	; 0x926 <uxListRemove>
     b36:	8c 89       	ldd	r24, Y+20	; 0x14
     b38:	9d 89       	ldd	r25, Y+21	; 0x15
     b3a:	89 2b       	or	r24, r25
     b3c:	21 f0       	breq	.+8      	; 0xb46 <xTaskIncrementTick+0xd8>
     b3e:	ce 01       	movw	r24, r28
     b40:	0c 96       	adiw	r24, 0x0c	; 12
     b42:	0e 94 93 04 	call	0x926	; 0x926 <uxListRemove>
     b46:	8e 89       	ldd	r24, Y+22	; 0x16
     b48:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <uxTopReadyPriority>
     b4c:	98 17       	cp	r25, r24
     b4e:	10 f4       	brcc	.+4      	; 0xb54 <xTaskIncrementTick+0xe6>
     b50:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <uxTopReadyPriority>
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	9c 01       	movw	r18, r24
     b58:	22 0f       	add	r18, r18
     b5a:	33 1f       	adc	r19, r19
     b5c:	22 0f       	add	r18, r18
     b5e:	33 1f       	adc	r19, r19
     b60:	22 0f       	add	r18, r18
     b62:	33 1f       	adc	r19, r19
     b64:	82 0f       	add	r24, r18
     b66:	93 1f       	adc	r25, r19
     b68:	b8 01       	movw	r22, r16
     b6a:	8b 53       	subi	r24, 0x3B	; 59
     b6c:	9e 4f       	sbci	r25, 0xFE	; 254
     b6e:	0e 94 72 04 	call	0x8e4	; 0x8e4 <vListInsertEnd>
     b72:	e0 91 d7 01 	lds	r30, 0x01D7	; 0x8001d7 <pxCurrentTCB>
     b76:	f0 91 d8 01 	lds	r31, 0x01D8	; 0x8001d8 <pxCurrentTCB+0x1>
     b7a:	9e 89       	ldd	r25, Y+22	; 0x16
     b7c:	86 89       	ldd	r24, Z+22	; 0x16
     b7e:	98 17       	cp	r25, r24
     b80:	08 f4       	brcc	.+2      	; 0xb84 <xTaskIncrementTick+0x116>
     b82:	b2 cf       	rjmp	.-156    	; 0xae8 <xTaskIncrementTick+0x7a>
     b84:	dc 2c       	mov	r13, r12
     b86:	b0 cf       	rjmp	.-160    	; 0xae8 <xTaskIncrementTick+0x7a>
     b88:	e0 91 d7 01 	lds	r30, 0x01D7	; 0x8001d7 <pxCurrentTCB>
     b8c:	f0 91 d8 01 	lds	r31, 0x01D8	; 0x8001d8 <pxCurrentTCB+0x1>
     b90:	86 89       	ldd	r24, Z+22	; 0x16
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	fc 01       	movw	r30, r24
     b96:	ee 0f       	add	r30, r30
     b98:	ff 1f       	adc	r31, r31
     b9a:	ee 0f       	add	r30, r30
     b9c:	ff 1f       	adc	r31, r31
     b9e:	ee 0f       	add	r30, r30
     ba0:	ff 1f       	adc	r31, r31
     ba2:	8e 0f       	add	r24, r30
     ba4:	9f 1f       	adc	r25, r31
     ba6:	fc 01       	movw	r30, r24
     ba8:	eb 53       	subi	r30, 0x3B	; 59
     baa:	fe 4f       	sbci	r31, 0xFE	; 254
     bac:	80 81       	ld	r24, Z
     bae:	82 30       	cpi	r24, 0x02	; 2
     bb0:	48 f0       	brcs	.+18     	; 0xbc4 <xTaskIncrementTick+0x156>
     bb2:	dd 24       	eor	r13, r13
     bb4:	d3 94       	inc	r13
     bb6:	06 c0       	rjmp	.+12     	; 0xbc4 <xTaskIncrementTick+0x156>
     bb8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <uxPendedTicks>
     bbc:	8f 5f       	subi	r24, 0xFF	; 255
     bbe:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <uxPendedTicks>
     bc2:	d1 2c       	mov	r13, r1
     bc4:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <xYieldPending>
     bc8:	88 23       	and	r24, r24
     bca:	11 f0       	breq	.+4      	; 0xbd0 <xTaskIncrementTick+0x162>
     bcc:	dd 24       	eor	r13, r13
     bce:	d3 94       	inc	r13
     bd0:	8d 2d       	mov	r24, r13
     bd2:	df 91       	pop	r29
     bd4:	cf 91       	pop	r28
     bd6:	1f 91       	pop	r17
     bd8:	0f 91       	pop	r16
     bda:	ff 90       	pop	r15
     bdc:	ef 90       	pop	r14
     bde:	df 90       	pop	r13
     be0:	cf 90       	pop	r12
     be2:	08 95       	ret

00000be4 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
     be4:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <uxSchedulerSuspended>
     be8:	88 23       	and	r24, r24
     bea:	21 f0       	breq	.+8      	; 0xbf4 <vTaskSwitchContext+0x10>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <xYieldPending>
     bf2:	08 95       	ret
	}
	else
	{
		xYieldPending = pdFALSE;
     bf4:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <xYieldPending>
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
     bf8:	20 91 be 01 	lds	r18, 0x01BE	; 0x8001be <uxTopReadyPriority>
     bfc:	82 2f       	mov	r24, r18
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	fc 01       	movw	r30, r24
     c02:	ee 0f       	add	r30, r30
     c04:	ff 1f       	adc	r31, r31
     c06:	ee 0f       	add	r30, r30
     c08:	ff 1f       	adc	r31, r31
     c0a:	ee 0f       	add	r30, r30
     c0c:	ff 1f       	adc	r31, r31
     c0e:	e8 0f       	add	r30, r24
     c10:	f9 1f       	adc	r31, r25
     c12:	eb 53       	subi	r30, 0x3B	; 59
     c14:	fe 4f       	sbci	r31, 0xFE	; 254
     c16:	30 81       	ld	r19, Z
     c18:	31 11       	cpse	r19, r1
     c1a:	11 c0       	rjmp	.+34     	; 0xc3e <vTaskSwitchContext+0x5a>
     c1c:	21 50       	subi	r18, 0x01	; 1
     c1e:	82 2f       	mov	r24, r18
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	fc 01       	movw	r30, r24
     c24:	ee 0f       	add	r30, r30
     c26:	ff 1f       	adc	r31, r31
     c28:	ee 0f       	add	r30, r30
     c2a:	ff 1f       	adc	r31, r31
     c2c:	ee 0f       	add	r30, r30
     c2e:	ff 1f       	adc	r31, r31
     c30:	e8 0f       	add	r30, r24
     c32:	f9 1f       	adc	r31, r25
     c34:	eb 53       	subi	r30, 0x3B	; 59
     c36:	fe 4f       	sbci	r31, 0xFE	; 254
     c38:	30 81       	ld	r19, Z
     c3a:	33 23       	and	r19, r19
     c3c:	79 f3       	breq	.-34     	; 0xc1c <vTaskSwitchContext+0x38>
     c3e:	ac 01       	movw	r20, r24
     c40:	44 0f       	add	r20, r20
     c42:	55 1f       	adc	r21, r21
     c44:	44 0f       	add	r20, r20
     c46:	55 1f       	adc	r21, r21
     c48:	44 0f       	add	r20, r20
     c4a:	55 1f       	adc	r21, r21
     c4c:	48 0f       	add	r20, r24
     c4e:	59 1f       	adc	r21, r25
     c50:	da 01       	movw	r26, r20
     c52:	ab 53       	subi	r26, 0x3B	; 59
     c54:	be 4f       	sbci	r27, 0xFE	; 254
     c56:	11 96       	adiw	r26, 0x01	; 1
     c58:	ed 91       	ld	r30, X+
     c5a:	fc 91       	ld	r31, X
     c5c:	12 97       	sbiw	r26, 0x02	; 2
     c5e:	02 80       	ldd	r0, Z+2	; 0x02
     c60:	f3 81       	ldd	r31, Z+3	; 0x03
     c62:	e0 2d       	mov	r30, r0
     c64:	12 96       	adiw	r26, 0x02	; 2
     c66:	fc 93       	st	X, r31
     c68:	ee 93       	st	-X, r30
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	48 53       	subi	r20, 0x38	; 56
     c6e:	5e 4f       	sbci	r21, 0xFE	; 254
     c70:	e4 17       	cp	r30, r20
     c72:	f5 07       	cpc	r31, r21
     c74:	29 f4       	brne	.+10     	; 0xc80 <vTaskSwitchContext+0x9c>
     c76:	42 81       	ldd	r20, Z+2	; 0x02
     c78:	53 81       	ldd	r21, Z+3	; 0x03
     c7a:	fd 01       	movw	r30, r26
     c7c:	52 83       	std	Z+2, r21	; 0x02
     c7e:	41 83       	std	Z+1, r20	; 0x01
     c80:	fc 01       	movw	r30, r24
     c82:	ee 0f       	add	r30, r30
     c84:	ff 1f       	adc	r31, r31
     c86:	ee 0f       	add	r30, r30
     c88:	ff 1f       	adc	r31, r31
     c8a:	ee 0f       	add	r30, r30
     c8c:	ff 1f       	adc	r31, r31
     c8e:	8e 0f       	add	r24, r30
     c90:	9f 1f       	adc	r25, r31
     c92:	fc 01       	movw	r30, r24
     c94:	eb 53       	subi	r30, 0x3B	; 59
     c96:	fe 4f       	sbci	r31, 0xFE	; 254
     c98:	01 80       	ldd	r0, Z+1	; 0x01
     c9a:	f2 81       	ldd	r31, Z+2	; 0x02
     c9c:	e0 2d       	mov	r30, r0
     c9e:	86 81       	ldd	r24, Z+6	; 0x06
     ca0:	97 81       	ldd	r25, Z+7	; 0x07
     ca2:	90 93 d8 01 	sts	0x01D8, r25	; 0x8001d8 <pxCurrentTCB+0x1>
     ca6:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <pxCurrentTCB>
     caa:	20 93 be 01 	sts	0x01BE, r18	; 0x8001be <uxTopReadyPriority>
     cae:	08 95       	ret

00000cb0 <usart_listen>:
	uart_data_got=UDR;
	//mutexGiveFromISR
}
//this will occur only if there is an emergency call from the tiva controller
void spi_listen(void)
{
     cb0:	8c b1       	in	r24, 0x0c	; 12
     cb2:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <uart_data_got>
     cb6:	08 95       	ret

00000cb8 <system_init>:
     cb8:	cf 92       	push	r12
     cba:	ef 92       	push	r14
     cbc:	ff 92       	push	r15
     cbe:	0f 93       	push	r16
     cc0:	1f 93       	push	r17
     cc2:	83 e0       	ldi	r24, 0x03	; 3
     cc4:	84 bb       	out	0x14, r24	; 20
     cc6:	85 bb       	out	0x15, r24	; 21
     cc8:	8f ef       	ldi	r24, 0xFF	; 255
     cca:	8a bb       	out	0x1a, r24	; 26
     ccc:	8a 98       	cbi	0x11, 2	; 17
     cce:	8b 98       	cbi	0x11, 3	; 17
     cd0:	8c 9a       	sbi	0x11, 4	; 17
     cd2:	d0 9a       	sbi	0x1a, 0	; 26
     cd4:	d1 9a       	sbi	0x1a, 1	; 26
     cd6:	c1 2c       	mov	r12, r1
     cd8:	e1 2c       	mov	r14, r1
     cda:	00 e0       	ldi	r16, 0x00	; 0
     cdc:	21 e0       	ldi	r18, 0x01	; 1
     cde:	40 e0       	ldi	r20, 0x00	; 0
     ce0:	6d e2       	ldi	r22, 0x2D	; 45
     ce2:	83 ee       	ldi	r24, 0xE3	; 227
     ce4:	91 e0       	ldi	r25, 0x01	; 1
     ce6:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <hal_spiInit>
     cea:	cc 24       	eor	r12, r12
     cec:	c3 94       	inc	r12
     cee:	ee 24       	eor	r14, r14
     cf0:	e3 94       	inc	r14
     cf2:	03 e0       	ldi	r16, 0x03	; 3
     cf4:	20 e0       	ldi	r18, 0x00	; 0
     cf6:	40 e0       	ldi	r20, 0x00	; 0
     cf8:	63 e0       	ldi	r22, 0x03	; 3
     cfa:	8a ee       	ldi	r24, 0xEA	; 234
     cfc:	91 e0       	ldi	r25, 0x01	; 1
     cfe:	0e 94 4e 02 	call	0x49c	; 0x49c <usart_init>
     d02:	68 e5       	ldi	r22, 0x58	; 88
     d04:	76 e0       	ldi	r23, 0x06	; 6
     d06:	8a ee       	ldi	r24, 0xEA	; 234
     d08:	91 e0       	ldi	r25, 0x01	; 1
     d0a:	0e 94 be 02 	call	0x57c	; 0x57c <usart_set_isr_RXC_callback>
     d0e:	bb 9a       	sbi	0x17, 3	; 23
     d10:	c3 9a       	sbi	0x18, 3	; 24
     d12:	12 e3       	ldi	r17, 0x32	; 50
     d14:	e1 2e       	mov	r14, r17
     d16:	f1 2c       	mov	r15, r1
     d18:	00 e0       	ldi	r16, 0x00	; 0
     d1a:	10 e0       	ldi	r17, 0x00	; 0
     d1c:	23 e0       	ldi	r18, 0x03	; 3
     d1e:	43 e0       	ldi	r20, 0x03	; 3
     d20:	63 e5       	ldi	r22, 0x53	; 83
     d22:	89 ed       	ldi	r24, 0xD9	; 217
     d24:	91 e0       	ldi	r25, 0x01	; 1
     d26:	0e 94 b0 00 	call	0x160	; 0x160 <pwm_init>
     d2a:	78 94       	sei
     d2c:	0e 94 49 00 	call	0x92	; 0x92 <init_interrrupts>
     d30:	63 e0       	ldi	r22, 0x03	; 3
     d32:	86 e0       	ldi	r24, 0x06	; 6
     d34:	0e 94 55 00 	call	0xaa	; 0xaa <set_interrupt>
     d38:	63 e0       	ldi	r22, 0x03	; 3
     d3a:	87 e0       	ldi	r24, 0x07	; 7
     d3c:	0e 94 55 00 	call	0xaa	; 0xaa <set_interrupt>
     d40:	1f 91       	pop	r17
     d42:	0f 91       	pop	r16
     d44:	ff 90       	pop	r15
     d46:	ef 90       	pop	r14
     d48:	cf 90       	pop	r12
     d4a:	08 95       	ret

00000d4c <hal_spiExchangeDATA_A>:
     d4c:	a8 98       	cbi	0x15, 0	; 21
     d4e:	0e 94 36 02 	call	0x46c	; 0x46c <hal_spiExchangeDATA>
     d52:	a8 9a       	sbi	0x15, 0	; 21
     d54:	08 95       	ret

00000d56 <move_forward>:
// 	SPDR=spi_temp_out;
}

void move_forward(unsigned char beriod)
{
	SET_BIT  (PORTA,0);
     d56:	d8 9a       	sbi	0x1b, 0	; 27
	CLEAR_BIT(PORTA,1);
     d58:	d9 98       	cbi	0x1b, 1	; 27
	SET_BIT  (PORTA,2);
     d5a:	da 9a       	sbi	0x1b, 2	; 27
	CLEAR_BIT(PORTA,3);
     d5c:	db 98       	cbi	0x1b, 3	; 27
	while(beriod > 0)
     d5e:	88 23       	and	r24, r24
     d60:	41 f0       	breq	.+16     	; 0xd72 <move_forward+0x1c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d62:	ef ec       	ldi	r30, 0xCF	; 207
     d64:	f7 e0       	ldi	r31, 0x07	; 7
     d66:	31 97       	sbiw	r30, 0x01	; 1
     d68:	f1 f7       	brne	.-4      	; 0xd66 <move_forward+0x10>
     d6a:	00 c0       	rjmp	.+0      	; 0xd6c <move_forward+0x16>
     d6c:	00 00       	nop
	{
		_delay_ms(1);
		beriod--;
     d6e:	81 50       	subi	r24, 0x01	; 1
{
	SET_BIT  (PORTA,0);
	CLEAR_BIT(PORTA,1);
	SET_BIT  (PORTA,2);
	CLEAR_BIT(PORTA,3);
	while(beriod > 0)
     d70:	c1 f7       	brne	.-16     	; 0xd62 <move_forward+0xc>
	{
		_delay_ms(1);
		beriod--;
	}
	CLEAR_BIT(PORTA,0);
     d72:	d8 98       	cbi	0x1b, 0	; 27
	CLEAR_BIT(PORTA,2);
     d74:	da 98       	cbi	0x1b, 2	; 27
     d76:	08 95       	ret

00000d78 <move_bckward>:
}
void move_bckward(unsigned char beriod)
{
	SET_BIT  (PORTA,1);
     d78:	d9 9a       	sbi	0x1b, 1	; 27
	CLEAR_BIT(PORTA,0);
     d7a:	d8 98       	cbi	0x1b, 0	; 27
	SET_BIT  (PORTA,3);
     d7c:	db 9a       	sbi	0x1b, 3	; 27
	CLEAR_BIT(PORTA,2);
     d7e:	da 98       	cbi	0x1b, 2	; 27
	while(beriod > 0)
     d80:	88 23       	and	r24, r24
     d82:	41 f0       	breq	.+16     	; 0xd94 <move_bckward+0x1c>
     d84:	ef ec       	ldi	r30, 0xCF	; 207
     d86:	f7 e0       	ldi	r31, 0x07	; 7
     d88:	31 97       	sbiw	r30, 0x01	; 1
     d8a:	f1 f7       	brne	.-4      	; 0xd88 <move_bckward+0x10>
     d8c:	00 c0       	rjmp	.+0      	; 0xd8e <move_bckward+0x16>
     d8e:	00 00       	nop
	{
		_delay_ms(1);
		beriod--;
     d90:	81 50       	subi	r24, 0x01	; 1
{
	SET_BIT  (PORTA,1);
	CLEAR_BIT(PORTA,0);
	SET_BIT  (PORTA,3);
	CLEAR_BIT(PORTA,2);
	while(beriod > 0)
     d92:	c1 f7       	brne	.-16     	; 0xd84 <move_bckward+0xc>
	{
		_delay_ms(1);
		beriod--;
	}
	CLEAR_BIT(PORTA,1);
     d94:	d9 98       	cbi	0x1b, 1	; 27
	CLEAR_BIT(PORTA,3);
     d96:	db 98       	cbi	0x1b, 3	; 27
     d98:	08 95       	ret

00000d9a <move_right>:
}
void move_right(unsigned char beriod)
{
	SET_BIT  (PORTA,0);
     d9a:	d8 9a       	sbi	0x1b, 0	; 27
	CLEAR_BIT(PORTA,1);
     d9c:	d9 98       	cbi	0x1b, 1	; 27
	SET_BIT  (PORTA,3);
     d9e:	db 9a       	sbi	0x1b, 3	; 27
	CLEAR_BIT(PORTA,2);
     da0:	da 98       	cbi	0x1b, 2	; 27
	while(beriod > 0)
     da2:	88 23       	and	r24, r24
     da4:	41 f0       	breq	.+16     	; 0xdb6 <move_right+0x1c>
     da6:	ef ec       	ldi	r30, 0xCF	; 207
     da8:	f7 e0       	ldi	r31, 0x07	; 7
     daa:	31 97       	sbiw	r30, 0x01	; 1
     dac:	f1 f7       	brne	.-4      	; 0xdaa <move_right+0x10>
     dae:	00 c0       	rjmp	.+0      	; 0xdb0 <move_right+0x16>
     db0:	00 00       	nop
	{
		_delay_ms(1);
		beriod--;
     db2:	81 50       	subi	r24, 0x01	; 1
{
	SET_BIT  (PORTA,0);
	CLEAR_BIT(PORTA,1);
	SET_BIT  (PORTA,3);
	CLEAR_BIT(PORTA,2);
	while(beriod > 0)
     db4:	c1 f7       	brne	.-16     	; 0xda6 <move_right+0xc>
	{
		_delay_ms(1);
		beriod--;
	}
	CLEAR_BIT(PORTA,0);
     db6:	d8 98       	cbi	0x1b, 0	; 27
	CLEAR_BIT(PORTA,3);
     db8:	db 98       	cbi	0x1b, 3	; 27
     dba:	08 95       	ret

00000dbc <move_left>:
}
void move_left(unsigned char beriod)
{
	SET_BIT  (PORTA,1);
     dbc:	d9 9a       	sbi	0x1b, 1	; 27
	CLEAR_BIT(PORTA,0);
     dbe:	d8 98       	cbi	0x1b, 0	; 27
	SET_BIT  (PORTA,2);
     dc0:	da 9a       	sbi	0x1b, 2	; 27
	CLEAR_BIT(PORTA,3);
     dc2:	db 98       	cbi	0x1b, 3	; 27
	while(beriod > 0)
     dc4:	88 23       	and	r24, r24
     dc6:	41 f0       	breq	.+16     	; 0xdd8 <move_left+0x1c>
     dc8:	ef ec       	ldi	r30, 0xCF	; 207
     dca:	f7 e0       	ldi	r31, 0x07	; 7
     dcc:	31 97       	sbiw	r30, 0x01	; 1
     dce:	f1 f7       	brne	.-4      	; 0xdcc <move_left+0x10>
     dd0:	00 c0       	rjmp	.+0      	; 0xdd2 <move_left+0x16>
     dd2:	00 00       	nop
	{
		_delay_ms(1);
		beriod--;
     dd4:	81 50       	subi	r24, 0x01	; 1
{
	SET_BIT  (PORTA,1);
	CLEAR_BIT(PORTA,0);
	SET_BIT  (PORTA,2);
	CLEAR_BIT(PORTA,3);
	while(beriod > 0)
     dd6:	c1 f7       	brne	.-16     	; 0xdc8 <move_left+0xc>
	{
		_delay_ms(1);
		beriod--;
	}
	CLEAR_BIT(PORTA,1);
     dd8:	d9 98       	cbi	0x1b, 1	; 27
	CLEAR_BIT(PORTA,2);
     dda:	da 98       	cbi	0x1b, 2	; 27
     ddc:	08 95       	ret

00000dde <move_stop>:
}
void move_stop(unsigned char beriod)
{
	CLEAR_BIT(PORTA,0);
     dde:	d8 98       	cbi	0x1b, 0	; 27
	CLEAR_BIT(PORTA,1);
     de0:	d9 98       	cbi	0x1b, 1	; 27
	CLEAR_BIT(PORTA,3);
     de2:	db 98       	cbi	0x1b, 3	; 27
	CLEAR_BIT(PORTA,2);
     de4:	da 98       	cbi	0x1b, 2	; 27
	while(beriod > 0)
     de6:	88 23       	and	r24, r24
     de8:	41 f0       	breq	.+16     	; 0xdfa <move_stop+0x1c>
     dea:	ef ec       	ldi	r30, 0xCF	; 207
     dec:	f7 e0       	ldi	r31, 0x07	; 7
     dee:	31 97       	sbiw	r30, 0x01	; 1
     df0:	f1 f7       	brne	.-4      	; 0xdee <move_stop+0x10>
     df2:	00 c0       	rjmp	.+0      	; 0xdf4 <move_stop+0x16>
     df4:	00 00       	nop
	{
		_delay_ms(1);
		beriod--;
     df6:	81 50       	subi	r24, 0x01	; 1
{
	CLEAR_BIT(PORTA,0);
	CLEAR_BIT(PORTA,1);
	CLEAR_BIT(PORTA,3);
	CLEAR_BIT(PORTA,2);
	while(beriod > 0)
     df8:	c1 f7       	brne	.-16     	; 0xdea <move_stop+0xc>
     dfa:	08 95       	ret

00000dfc <__cmpsf2>:
     dfc:	0e 94 b2 07 	call	0xf64	; 0xf64 <__fp_cmp>
     e00:	08 f4       	brcc	.+2      	; 0xe04 <__cmpsf2+0x8>
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	08 95       	ret

00000e06 <__divsf3>:
     e06:	0e 94 17 07 	call	0xe2e	; 0xe2e <__divsf3x>
     e0a:	0c 94 ed 07 	jmp	0xfda	; 0xfda <__fp_round>
     e0e:	0e 94 e6 07 	call	0xfcc	; 0xfcc <__fp_pscB>
     e12:	58 f0       	brcs	.+22     	; 0xe2a <__divsf3+0x24>
     e14:	0e 94 df 07 	call	0xfbe	; 0xfbe <__fp_pscA>
     e18:	40 f0       	brcs	.+16     	; 0xe2a <__divsf3+0x24>
     e1a:	29 f4       	brne	.+10     	; 0xe26 <__divsf3+0x20>
     e1c:	5f 3f       	cpi	r21, 0xFF	; 255
     e1e:	29 f0       	breq	.+10     	; 0xe2a <__divsf3+0x24>
     e20:	0c 94 d6 07 	jmp	0xfac	; 0xfac <__fp_inf>
     e24:	51 11       	cpse	r21, r1
     e26:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__fp_szero>
     e2a:	0c 94 dc 07 	jmp	0xfb8	; 0xfb8 <__fp_nan>

00000e2e <__divsf3x>:
     e2e:	0e 94 fe 07 	call	0xffc	; 0xffc <__fp_split3>
     e32:	68 f3       	brcs	.-38     	; 0xe0e <__divsf3+0x8>

00000e34 <__divsf3_pse>:
     e34:	99 23       	and	r25, r25
     e36:	b1 f3       	breq	.-20     	; 0xe24 <__divsf3+0x1e>
     e38:	55 23       	and	r21, r21
     e3a:	91 f3       	breq	.-28     	; 0xe20 <__divsf3+0x1a>
     e3c:	95 1b       	sub	r25, r21
     e3e:	55 0b       	sbc	r21, r21
     e40:	bb 27       	eor	r27, r27
     e42:	aa 27       	eor	r26, r26
     e44:	62 17       	cp	r22, r18
     e46:	73 07       	cpc	r23, r19
     e48:	84 07       	cpc	r24, r20
     e4a:	38 f0       	brcs	.+14     	; 0xe5a <__divsf3_pse+0x26>
     e4c:	9f 5f       	subi	r25, 0xFF	; 255
     e4e:	5f 4f       	sbci	r21, 0xFF	; 255
     e50:	22 0f       	add	r18, r18
     e52:	33 1f       	adc	r19, r19
     e54:	44 1f       	adc	r20, r20
     e56:	aa 1f       	adc	r26, r26
     e58:	a9 f3       	breq	.-22     	; 0xe44 <__divsf3_pse+0x10>
     e5a:	35 d0       	rcall	.+106    	; 0xec6 <__divsf3_pse+0x92>
     e5c:	0e 2e       	mov	r0, r30
     e5e:	3a f0       	brmi	.+14     	; 0xe6e <__divsf3_pse+0x3a>
     e60:	e0 e8       	ldi	r30, 0x80	; 128
     e62:	32 d0       	rcall	.+100    	; 0xec8 <__divsf3_pse+0x94>
     e64:	91 50       	subi	r25, 0x01	; 1
     e66:	50 40       	sbci	r21, 0x00	; 0
     e68:	e6 95       	lsr	r30
     e6a:	00 1c       	adc	r0, r0
     e6c:	ca f7       	brpl	.-14     	; 0xe60 <__divsf3_pse+0x2c>
     e6e:	2b d0       	rcall	.+86     	; 0xec6 <__divsf3_pse+0x92>
     e70:	fe 2f       	mov	r31, r30
     e72:	29 d0       	rcall	.+82     	; 0xec6 <__divsf3_pse+0x92>
     e74:	66 0f       	add	r22, r22
     e76:	77 1f       	adc	r23, r23
     e78:	88 1f       	adc	r24, r24
     e7a:	bb 1f       	adc	r27, r27
     e7c:	26 17       	cp	r18, r22
     e7e:	37 07       	cpc	r19, r23
     e80:	48 07       	cpc	r20, r24
     e82:	ab 07       	cpc	r26, r27
     e84:	b0 e8       	ldi	r27, 0x80	; 128
     e86:	09 f0       	breq	.+2      	; 0xe8a <__divsf3_pse+0x56>
     e88:	bb 0b       	sbc	r27, r27
     e8a:	80 2d       	mov	r24, r0
     e8c:	bf 01       	movw	r22, r30
     e8e:	ff 27       	eor	r31, r31
     e90:	93 58       	subi	r25, 0x83	; 131
     e92:	5f 4f       	sbci	r21, 0xFF	; 255
     e94:	3a f0       	brmi	.+14     	; 0xea4 <__divsf3_pse+0x70>
     e96:	9e 3f       	cpi	r25, 0xFE	; 254
     e98:	51 05       	cpc	r21, r1
     e9a:	78 f0       	brcs	.+30     	; 0xeba <__divsf3_pse+0x86>
     e9c:	0c 94 d6 07 	jmp	0xfac	; 0xfac <__fp_inf>
     ea0:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__fp_szero>
     ea4:	5f 3f       	cpi	r21, 0xFF	; 255
     ea6:	e4 f3       	brlt	.-8      	; 0xea0 <__divsf3_pse+0x6c>
     ea8:	98 3e       	cpi	r25, 0xE8	; 232
     eaa:	d4 f3       	brlt	.-12     	; 0xea0 <__divsf3_pse+0x6c>
     eac:	86 95       	lsr	r24
     eae:	77 95       	ror	r23
     eb0:	67 95       	ror	r22
     eb2:	b7 95       	ror	r27
     eb4:	f7 95       	ror	r31
     eb6:	9f 5f       	subi	r25, 0xFF	; 255
     eb8:	c9 f7       	brne	.-14     	; 0xeac <__divsf3_pse+0x78>
     eba:	88 0f       	add	r24, r24
     ebc:	91 1d       	adc	r25, r1
     ebe:	96 95       	lsr	r25
     ec0:	87 95       	ror	r24
     ec2:	97 f9       	bld	r25, 7
     ec4:	08 95       	ret
     ec6:	e1 e0       	ldi	r30, 0x01	; 1
     ec8:	66 0f       	add	r22, r22
     eca:	77 1f       	adc	r23, r23
     ecc:	88 1f       	adc	r24, r24
     ece:	bb 1f       	adc	r27, r27
     ed0:	62 17       	cp	r22, r18
     ed2:	73 07       	cpc	r23, r19
     ed4:	84 07       	cpc	r24, r20
     ed6:	ba 07       	cpc	r27, r26
     ed8:	20 f0       	brcs	.+8      	; 0xee2 <__divsf3_pse+0xae>
     eda:	62 1b       	sub	r22, r18
     edc:	73 0b       	sbc	r23, r19
     ede:	84 0b       	sbc	r24, r20
     ee0:	ba 0b       	sbc	r27, r26
     ee2:	ee 1f       	adc	r30, r30
     ee4:	88 f7       	brcc	.-30     	; 0xec8 <__divsf3_pse+0x94>
     ee6:	e0 95       	com	r30
     ee8:	08 95       	ret

00000eea <__floatunsisf>:
     eea:	e8 94       	clt
     eec:	09 c0       	rjmp	.+18     	; 0xf00 <__floatsisf+0x12>

00000eee <__floatsisf>:
     eee:	97 fb       	bst	r25, 7
     ef0:	3e f4       	brtc	.+14     	; 0xf00 <__floatsisf+0x12>
     ef2:	90 95       	com	r25
     ef4:	80 95       	com	r24
     ef6:	70 95       	com	r23
     ef8:	61 95       	neg	r22
     efa:	7f 4f       	sbci	r23, 0xFF	; 255
     efc:	8f 4f       	sbci	r24, 0xFF	; 255
     efe:	9f 4f       	sbci	r25, 0xFF	; 255
     f00:	99 23       	and	r25, r25
     f02:	a9 f0       	breq	.+42     	; 0xf2e <__floatsisf+0x40>
     f04:	f9 2f       	mov	r31, r25
     f06:	96 e9       	ldi	r25, 0x96	; 150
     f08:	bb 27       	eor	r27, r27
     f0a:	93 95       	inc	r25
     f0c:	f6 95       	lsr	r31
     f0e:	87 95       	ror	r24
     f10:	77 95       	ror	r23
     f12:	67 95       	ror	r22
     f14:	b7 95       	ror	r27
     f16:	f1 11       	cpse	r31, r1
     f18:	f8 cf       	rjmp	.-16     	; 0xf0a <__floatsisf+0x1c>
     f1a:	fa f4       	brpl	.+62     	; 0xf5a <__floatsisf+0x6c>
     f1c:	bb 0f       	add	r27, r27
     f1e:	11 f4       	brne	.+4      	; 0xf24 <__floatsisf+0x36>
     f20:	60 ff       	sbrs	r22, 0
     f22:	1b c0       	rjmp	.+54     	; 0xf5a <__floatsisf+0x6c>
     f24:	6f 5f       	subi	r22, 0xFF	; 255
     f26:	7f 4f       	sbci	r23, 0xFF	; 255
     f28:	8f 4f       	sbci	r24, 0xFF	; 255
     f2a:	9f 4f       	sbci	r25, 0xFF	; 255
     f2c:	16 c0       	rjmp	.+44     	; 0xf5a <__floatsisf+0x6c>
     f2e:	88 23       	and	r24, r24
     f30:	11 f0       	breq	.+4      	; 0xf36 <__floatsisf+0x48>
     f32:	96 e9       	ldi	r25, 0x96	; 150
     f34:	11 c0       	rjmp	.+34     	; 0xf58 <__floatsisf+0x6a>
     f36:	77 23       	and	r23, r23
     f38:	21 f0       	breq	.+8      	; 0xf42 <__floatsisf+0x54>
     f3a:	9e e8       	ldi	r25, 0x8E	; 142
     f3c:	87 2f       	mov	r24, r23
     f3e:	76 2f       	mov	r23, r22
     f40:	05 c0       	rjmp	.+10     	; 0xf4c <__floatsisf+0x5e>
     f42:	66 23       	and	r22, r22
     f44:	71 f0       	breq	.+28     	; 0xf62 <__floatsisf+0x74>
     f46:	96 e8       	ldi	r25, 0x86	; 134
     f48:	86 2f       	mov	r24, r22
     f4a:	70 e0       	ldi	r23, 0x00	; 0
     f4c:	60 e0       	ldi	r22, 0x00	; 0
     f4e:	2a f0       	brmi	.+10     	; 0xf5a <__floatsisf+0x6c>
     f50:	9a 95       	dec	r25
     f52:	66 0f       	add	r22, r22
     f54:	77 1f       	adc	r23, r23
     f56:	88 1f       	adc	r24, r24
     f58:	da f7       	brpl	.-10     	; 0xf50 <__floatsisf+0x62>
     f5a:	88 0f       	add	r24, r24
     f5c:	96 95       	lsr	r25
     f5e:	87 95       	ror	r24
     f60:	97 f9       	bld	r25, 7
     f62:	08 95       	ret

00000f64 <__fp_cmp>:
     f64:	99 0f       	add	r25, r25
     f66:	00 08       	sbc	r0, r0
     f68:	55 0f       	add	r21, r21
     f6a:	aa 0b       	sbc	r26, r26
     f6c:	e0 e8       	ldi	r30, 0x80	; 128
     f6e:	fe ef       	ldi	r31, 0xFE	; 254
     f70:	16 16       	cp	r1, r22
     f72:	17 06       	cpc	r1, r23
     f74:	e8 07       	cpc	r30, r24
     f76:	f9 07       	cpc	r31, r25
     f78:	c0 f0       	brcs	.+48     	; 0xfaa <__fp_cmp+0x46>
     f7a:	12 16       	cp	r1, r18
     f7c:	13 06       	cpc	r1, r19
     f7e:	e4 07       	cpc	r30, r20
     f80:	f5 07       	cpc	r31, r21
     f82:	98 f0       	brcs	.+38     	; 0xfaa <__fp_cmp+0x46>
     f84:	62 1b       	sub	r22, r18
     f86:	73 0b       	sbc	r23, r19
     f88:	84 0b       	sbc	r24, r20
     f8a:	95 0b       	sbc	r25, r21
     f8c:	39 f4       	brne	.+14     	; 0xf9c <__fp_cmp+0x38>
     f8e:	0a 26       	eor	r0, r26
     f90:	61 f0       	breq	.+24     	; 0xfaa <__fp_cmp+0x46>
     f92:	23 2b       	or	r18, r19
     f94:	24 2b       	or	r18, r20
     f96:	25 2b       	or	r18, r21
     f98:	21 f4       	brne	.+8      	; 0xfa2 <__fp_cmp+0x3e>
     f9a:	08 95       	ret
     f9c:	0a 26       	eor	r0, r26
     f9e:	09 f4       	brne	.+2      	; 0xfa2 <__fp_cmp+0x3e>
     fa0:	a1 40       	sbci	r26, 0x01	; 1
     fa2:	a6 95       	lsr	r26
     fa4:	8f ef       	ldi	r24, 0xFF	; 255
     fa6:	81 1d       	adc	r24, r1
     fa8:	81 1d       	adc	r24, r1
     faa:	08 95       	ret

00000fac <__fp_inf>:
     fac:	97 f9       	bld	r25, 7
     fae:	9f 67       	ori	r25, 0x7F	; 127
     fb0:	80 e8       	ldi	r24, 0x80	; 128
     fb2:	70 e0       	ldi	r23, 0x00	; 0
     fb4:	60 e0       	ldi	r22, 0x00	; 0
     fb6:	08 95       	ret

00000fb8 <__fp_nan>:
     fb8:	9f ef       	ldi	r25, 0xFF	; 255
     fba:	80 ec       	ldi	r24, 0xC0	; 192
     fbc:	08 95       	ret

00000fbe <__fp_pscA>:
     fbe:	00 24       	eor	r0, r0
     fc0:	0a 94       	dec	r0
     fc2:	16 16       	cp	r1, r22
     fc4:	17 06       	cpc	r1, r23
     fc6:	18 06       	cpc	r1, r24
     fc8:	09 06       	cpc	r0, r25
     fca:	08 95       	ret

00000fcc <__fp_pscB>:
     fcc:	00 24       	eor	r0, r0
     fce:	0a 94       	dec	r0
     fd0:	12 16       	cp	r1, r18
     fd2:	13 06       	cpc	r1, r19
     fd4:	14 06       	cpc	r1, r20
     fd6:	05 06       	cpc	r0, r21
     fd8:	08 95       	ret

00000fda <__fp_round>:
     fda:	09 2e       	mov	r0, r25
     fdc:	03 94       	inc	r0
     fde:	00 0c       	add	r0, r0
     fe0:	11 f4       	brne	.+4      	; 0xfe6 <__fp_round+0xc>
     fe2:	88 23       	and	r24, r24
     fe4:	52 f0       	brmi	.+20     	; 0xffa <__fp_round+0x20>
     fe6:	bb 0f       	add	r27, r27
     fe8:	40 f4       	brcc	.+16     	; 0xffa <__fp_round+0x20>
     fea:	bf 2b       	or	r27, r31
     fec:	11 f4       	brne	.+4      	; 0xff2 <__fp_round+0x18>
     fee:	60 ff       	sbrs	r22, 0
     ff0:	04 c0       	rjmp	.+8      	; 0xffa <__fp_round+0x20>
     ff2:	6f 5f       	subi	r22, 0xFF	; 255
     ff4:	7f 4f       	sbci	r23, 0xFF	; 255
     ff6:	8f 4f       	sbci	r24, 0xFF	; 255
     ff8:	9f 4f       	sbci	r25, 0xFF	; 255
     ffa:	08 95       	ret

00000ffc <__fp_split3>:
     ffc:	57 fd       	sbrc	r21, 7
     ffe:	90 58       	subi	r25, 0x80	; 128
    1000:	44 0f       	add	r20, r20
    1002:	55 1f       	adc	r21, r21
    1004:	59 f0       	breq	.+22     	; 0x101c <__fp_splitA+0x10>
    1006:	5f 3f       	cpi	r21, 0xFF	; 255
    1008:	71 f0       	breq	.+28     	; 0x1026 <__fp_splitA+0x1a>
    100a:	47 95       	ror	r20

0000100c <__fp_splitA>:
    100c:	88 0f       	add	r24, r24
    100e:	97 fb       	bst	r25, 7
    1010:	99 1f       	adc	r25, r25
    1012:	61 f0       	breq	.+24     	; 0x102c <__fp_splitA+0x20>
    1014:	9f 3f       	cpi	r25, 0xFF	; 255
    1016:	79 f0       	breq	.+30     	; 0x1036 <__fp_splitA+0x2a>
    1018:	87 95       	ror	r24
    101a:	08 95       	ret
    101c:	12 16       	cp	r1, r18
    101e:	13 06       	cpc	r1, r19
    1020:	14 06       	cpc	r1, r20
    1022:	55 1f       	adc	r21, r21
    1024:	f2 cf       	rjmp	.-28     	; 0x100a <__fp_split3+0xe>
    1026:	46 95       	lsr	r20
    1028:	f1 df       	rcall	.-30     	; 0x100c <__fp_splitA>
    102a:	08 c0       	rjmp	.+16     	; 0x103c <__fp_splitA+0x30>
    102c:	16 16       	cp	r1, r22
    102e:	17 06       	cpc	r1, r23
    1030:	18 06       	cpc	r1, r24
    1032:	99 1f       	adc	r25, r25
    1034:	f1 cf       	rjmp	.-30     	; 0x1018 <__fp_splitA+0xc>
    1036:	86 95       	lsr	r24
    1038:	71 05       	cpc	r23, r1
    103a:	61 05       	cpc	r22, r1
    103c:	08 94       	sec
    103e:	08 95       	ret

00001040 <__fp_zero>:
    1040:	e8 94       	clt

00001042 <__fp_szero>:
    1042:	bb 27       	eor	r27, r27
    1044:	66 27       	eor	r22, r22
    1046:	77 27       	eor	r23, r23
    1048:	cb 01       	movw	r24, r22
    104a:	97 f9       	bld	r25, 7
    104c:	08 95       	ret

0000104e <__gesf2>:
    104e:	0e 94 b2 07 	call	0xf64	; 0xf64 <__fp_cmp>
    1052:	08 f4       	brcc	.+2      	; 0x1056 <__gesf2+0x8>
    1054:	8f ef       	ldi	r24, 0xFF	; 255
    1056:	08 95       	ret

00001058 <__mulsf3>:
    1058:	0e 94 3f 08 	call	0x107e	; 0x107e <__mulsf3x>
    105c:	0c 94 ed 07 	jmp	0xfda	; 0xfda <__fp_round>
    1060:	0e 94 df 07 	call	0xfbe	; 0xfbe <__fp_pscA>
    1064:	38 f0       	brcs	.+14     	; 0x1074 <__mulsf3+0x1c>
    1066:	0e 94 e6 07 	call	0xfcc	; 0xfcc <__fp_pscB>
    106a:	20 f0       	brcs	.+8      	; 0x1074 <__mulsf3+0x1c>
    106c:	95 23       	and	r25, r21
    106e:	11 f0       	breq	.+4      	; 0x1074 <__mulsf3+0x1c>
    1070:	0c 94 d6 07 	jmp	0xfac	; 0xfac <__fp_inf>
    1074:	0c 94 dc 07 	jmp	0xfb8	; 0xfb8 <__fp_nan>
    1078:	11 24       	eor	r1, r1
    107a:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__fp_szero>

0000107e <__mulsf3x>:
    107e:	0e 94 fe 07 	call	0xffc	; 0xffc <__fp_split3>
    1082:	70 f3       	brcs	.-36     	; 0x1060 <__mulsf3+0x8>

00001084 <__mulsf3_pse>:
    1084:	95 9f       	mul	r25, r21
    1086:	c1 f3       	breq	.-16     	; 0x1078 <__mulsf3+0x20>
    1088:	95 0f       	add	r25, r21
    108a:	50 e0       	ldi	r21, 0x00	; 0
    108c:	55 1f       	adc	r21, r21
    108e:	62 9f       	mul	r22, r18
    1090:	f0 01       	movw	r30, r0
    1092:	72 9f       	mul	r23, r18
    1094:	bb 27       	eor	r27, r27
    1096:	f0 0d       	add	r31, r0
    1098:	b1 1d       	adc	r27, r1
    109a:	63 9f       	mul	r22, r19
    109c:	aa 27       	eor	r26, r26
    109e:	f0 0d       	add	r31, r0
    10a0:	b1 1d       	adc	r27, r1
    10a2:	aa 1f       	adc	r26, r26
    10a4:	64 9f       	mul	r22, r20
    10a6:	66 27       	eor	r22, r22
    10a8:	b0 0d       	add	r27, r0
    10aa:	a1 1d       	adc	r26, r1
    10ac:	66 1f       	adc	r22, r22
    10ae:	82 9f       	mul	r24, r18
    10b0:	22 27       	eor	r18, r18
    10b2:	b0 0d       	add	r27, r0
    10b4:	a1 1d       	adc	r26, r1
    10b6:	62 1f       	adc	r22, r18
    10b8:	73 9f       	mul	r23, r19
    10ba:	b0 0d       	add	r27, r0
    10bc:	a1 1d       	adc	r26, r1
    10be:	62 1f       	adc	r22, r18
    10c0:	83 9f       	mul	r24, r19
    10c2:	a0 0d       	add	r26, r0
    10c4:	61 1d       	adc	r22, r1
    10c6:	22 1f       	adc	r18, r18
    10c8:	74 9f       	mul	r23, r20
    10ca:	33 27       	eor	r19, r19
    10cc:	a0 0d       	add	r26, r0
    10ce:	61 1d       	adc	r22, r1
    10d0:	23 1f       	adc	r18, r19
    10d2:	84 9f       	mul	r24, r20
    10d4:	60 0d       	add	r22, r0
    10d6:	21 1d       	adc	r18, r1
    10d8:	82 2f       	mov	r24, r18
    10da:	76 2f       	mov	r23, r22
    10dc:	6a 2f       	mov	r22, r26
    10de:	11 24       	eor	r1, r1
    10e0:	9f 57       	subi	r25, 0x7F	; 127
    10e2:	50 40       	sbci	r21, 0x00	; 0
    10e4:	9a f0       	brmi	.+38     	; 0x110c <__mulsf3_pse+0x88>
    10e6:	f1 f0       	breq	.+60     	; 0x1124 <__mulsf3_pse+0xa0>
    10e8:	88 23       	and	r24, r24
    10ea:	4a f0       	brmi	.+18     	; 0x10fe <__mulsf3_pse+0x7a>
    10ec:	ee 0f       	add	r30, r30
    10ee:	ff 1f       	adc	r31, r31
    10f0:	bb 1f       	adc	r27, r27
    10f2:	66 1f       	adc	r22, r22
    10f4:	77 1f       	adc	r23, r23
    10f6:	88 1f       	adc	r24, r24
    10f8:	91 50       	subi	r25, 0x01	; 1
    10fa:	50 40       	sbci	r21, 0x00	; 0
    10fc:	a9 f7       	brne	.-22     	; 0x10e8 <__mulsf3_pse+0x64>
    10fe:	9e 3f       	cpi	r25, 0xFE	; 254
    1100:	51 05       	cpc	r21, r1
    1102:	80 f0       	brcs	.+32     	; 0x1124 <__mulsf3_pse+0xa0>
    1104:	0c 94 d6 07 	jmp	0xfac	; 0xfac <__fp_inf>
    1108:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__fp_szero>
    110c:	5f 3f       	cpi	r21, 0xFF	; 255
    110e:	e4 f3       	brlt	.-8      	; 0x1108 <__mulsf3_pse+0x84>
    1110:	98 3e       	cpi	r25, 0xE8	; 232
    1112:	d4 f3       	brlt	.-12     	; 0x1108 <__mulsf3_pse+0x84>
    1114:	86 95       	lsr	r24
    1116:	77 95       	ror	r23
    1118:	67 95       	ror	r22
    111a:	b7 95       	ror	r27
    111c:	f7 95       	ror	r31
    111e:	e7 95       	ror	r30
    1120:	9f 5f       	subi	r25, 0xFF	; 255
    1122:	c1 f7       	brne	.-16     	; 0x1114 <__mulsf3_pse+0x90>
    1124:	fe 2b       	or	r31, r30
    1126:	88 0f       	add	r24, r24
    1128:	91 1d       	adc	r25, r1
    112a:	96 95       	lsr	r25
    112c:	87 95       	ror	r24
    112e:	97 f9       	bld	r25, 7
    1130:	08 95       	ret

00001132 <__divmodhi4>:
    1132:	97 fb       	bst	r25, 7
    1134:	07 2e       	mov	r0, r23
    1136:	16 f4       	brtc	.+4      	; 0x113c <__divmodhi4+0xa>
    1138:	00 94       	com	r0
    113a:	07 d0       	rcall	.+14     	; 0x114a <__divmodhi4_neg1>
    113c:	77 fd       	sbrc	r23, 7
    113e:	09 d0       	rcall	.+18     	; 0x1152 <__divmodhi4_neg2>
    1140:	0e 94 ad 08 	call	0x115a	; 0x115a <__udivmodhi4>
    1144:	07 fc       	sbrc	r0, 7
    1146:	05 d0       	rcall	.+10     	; 0x1152 <__divmodhi4_neg2>
    1148:	3e f4       	brtc	.+14     	; 0x1158 <__divmodhi4_exit>

0000114a <__divmodhi4_neg1>:
    114a:	90 95       	com	r25
    114c:	81 95       	neg	r24
    114e:	9f 4f       	sbci	r25, 0xFF	; 255
    1150:	08 95       	ret

00001152 <__divmodhi4_neg2>:
    1152:	70 95       	com	r23
    1154:	61 95       	neg	r22
    1156:	7f 4f       	sbci	r23, 0xFF	; 255

00001158 <__divmodhi4_exit>:
    1158:	08 95       	ret

0000115a <__udivmodhi4>:
    115a:	aa 1b       	sub	r26, r26
    115c:	bb 1b       	sub	r27, r27
    115e:	51 e1       	ldi	r21, 0x11	; 17
    1160:	07 c0       	rjmp	.+14     	; 0x1170 <__udivmodhi4_ep>

00001162 <__udivmodhi4_loop>:
    1162:	aa 1f       	adc	r26, r26
    1164:	bb 1f       	adc	r27, r27
    1166:	a6 17       	cp	r26, r22
    1168:	b7 07       	cpc	r27, r23
    116a:	10 f0       	brcs	.+4      	; 0x1170 <__udivmodhi4_ep>
    116c:	a6 1b       	sub	r26, r22
    116e:	b7 0b       	sbc	r27, r23

00001170 <__udivmodhi4_ep>:
    1170:	88 1f       	adc	r24, r24
    1172:	99 1f       	adc	r25, r25
    1174:	5a 95       	dec	r21
    1176:	a9 f7       	brne	.-22     	; 0x1162 <__udivmodhi4_loop>
    1178:	80 95       	com	r24
    117a:	90 95       	com	r25
    117c:	bc 01       	movw	r22, r24
    117e:	cd 01       	movw	r24, r26
    1180:	08 95       	ret

00001182 <_exit>:
    1182:	f8 94       	cli

00001184 <__stop_program>:
    1184:	ff cf       	rjmp	.-2      	; 0x1184 <__stop_program>
