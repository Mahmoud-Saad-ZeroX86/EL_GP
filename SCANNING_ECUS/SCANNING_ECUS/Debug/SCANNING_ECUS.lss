
SCANNING_ECUS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c16  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  00000c16  00000caa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000062  0080008c  0080008c  00000cd6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cd6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d08  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002e0  00000000  00000000  00000d44  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003ec1  00000000  00000000  00001024  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001132  00000000  00000000  00004ee5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001ea4  00000000  00000000  00006017  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008ac  00000000  00000000  00007ebc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000015d1  00000000  00000000  00008768  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002ed3  00000000  00000000  00009d39  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002d0  00000000  00000000  0000cc0c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 88 02 	jmp	0x510	; 0x510 <__vector_1>
   8:	0c 94 b2 02 	jmp	0x564	; 0x564 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 71 02 	jmp	0x4e2	; 0x4e2 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 60 04 	jmp	0x8c0	; 0x8c0 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 5a 02 	jmp	0x4b4	; 0x4b4 <__vector_11>
  30:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__vector_12>
  34:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e1       	ldi	r30, 0x16	; 22
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 38       	cpi	r26, 0x8C	; 140
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e8       	ldi	r26, 0x8C	; 140
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 3e       	cpi	r26, 0xEE	; 238
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 32 03 	call	0x664	; 0x664 <main>
  8a:	0c 94 09 06 	jmp	0xc12	; 0xc12 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <hal_spiInit>:
	{
		ret_val=INVALID_SPI_PARAMS;
	}
#endif
	return ret_val;
}
  92:	cf 92       	push	r12
  94:	df 92       	push	r13
  96:	ef 92       	push	r14
  98:	0f 93       	push	r16
  9a:	fc 01       	movw	r30, r24
  9c:	f8 94       	cli
  9e:	60 83       	st	Z, r22
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	86 83       	std	Z+6, r24	; 0x06
  a4:	41 83       	std	Z+1, r20	; 0x01
  a6:	22 83       	std	Z+2, r18	; 0x02
  a8:	e4 82       	std	Z+4, r14	; 0x04
  aa:	03 83       	std	Z+3, r16	; 0x03
  ac:	c5 82       	std	Z+5, r12	; 0x05
  ae:	21 30       	cpi	r18, 0x01	; 1
  b0:	19 f5       	brne	.+70     	; 0xf8 <hal_spiInit+0x66>
  b2:	bc 9a       	sbi	0x17, 4	; 23
  b4:	bf 9a       	sbi	0x17, 7	; 23
  b6:	bd 9a       	sbi	0x17, 5	; 23
  b8:	be 98       	cbi	0x17, 6	; 23
  ba:	e6 2f       	mov	r30, r22
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	90 81       	ld	r25, Z
  c0:	8e 2d       	mov	r24, r14
  c2:	88 0f       	add	r24, r24
  c4:	88 0f       	add	r24, r24
  c6:	80 61       	ori	r24, 0x10	; 16
  c8:	24 2f       	mov	r18, r20
  ca:	23 70       	andi	r18, 0x03	; 3
  cc:	82 2b       	or	r24, r18
  ce:	89 2b       	or	r24, r25
  d0:	80 83       	st	Z, r24
  d2:	20 81       	ld	r18, Z
  d4:	30 e2       	ldi	r19, 0x20	; 32
  d6:	c3 9e       	mul	r12, r19
  d8:	c0 01       	movw	r24, r0
  da:	11 24       	eor	r1, r1
  dc:	80 64       	ori	r24, 0x40	; 64
  de:	90 e8       	ldi	r25, 0x80	; 128
  e0:	09 9f       	mul	r16, r25
  e2:	60 01       	movw	r12, r0
  e4:	11 24       	eor	r1, r1
  e6:	8c 29       	or	r24, r12
  e8:	82 2b       	or	r24, r18
  ea:	80 83       	st	Z, r24
  ec:	81 81       	ldd	r24, Z+1	; 0x01
  ee:	46 95       	lsr	r20
  f0:	46 95       	lsr	r20
  f2:	48 2b       	or	r20, r24
  f4:	41 83       	std	Z+1, r20	; 0x01
  f6:	0f c0       	rjmp	.+30     	; 0x116 <hal_spiInit+0x84>
  f8:	bc 98       	cbi	0x17, 4	; 23
  fa:	bf 98       	cbi	0x17, 7	; 23
  fc:	bd 98       	cbi	0x17, 5	; 23
  fe:	be 9a       	sbi	0x17, 6	; 23
 100:	e6 2f       	mov	r30, r22
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	90 81       	ld	r25, Z
 106:	80 e8       	ldi	r24, 0x80	; 128
 108:	08 9f       	mul	r16, r24
 10a:	90 01       	movw	r18, r0
 10c:	11 24       	eor	r1, r1
 10e:	82 2f       	mov	r24, r18
 110:	80 64       	ori	r24, 0x40	; 64
 112:	89 2b       	or	r24, r25
 114:	80 83       	st	Z, r24
 116:	01 30       	cpi	r16, 0x01	; 1
 118:	09 f4       	brne	.+2      	; 0x11c <hal_spiInit+0x8a>
 11a:	78 94       	sei
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	0f 91       	pop	r16
 120:	ef 90       	pop	r14
 122:	df 90       	pop	r13
 124:	cf 90       	pop	r12
 126:	08 95       	ret

00000128 <hal_spiExchangeDATA_edited>:
 128:	cf 93       	push	r28
 12a:	df 93       	push	r29
 12c:	00 d0       	rcall	.+0      	; 0x12e <hal_spiExchangeDATA_edited+0x6>
 12e:	cd b7       	in	r28, 0x3d	; 61
 130:	de b7       	in	r29, 0x3e	; 62
 132:	dc 01       	movw	r26, r24
 134:	82 e0       	ldi	r24, 0x02	; 2
 136:	8a 95       	dec	r24
 138:	f1 f7       	brne	.-4      	; 0x136 <hal_spiExchangeDATA_edited+0xe>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <hal_spiExchangeDATA_edited+0x14>
 13c:	ec 91       	ld	r30, X
 13e:	2e 2f       	mov	r18, r30
 140:	30 e0       	ldi	r19, 0x00	; 0
 142:	fb 01       	movw	r30, r22
 144:	80 81       	ld	r24, Z
 146:	f9 01       	movw	r30, r18
 148:	82 83       	std	Z+2, r24	; 0x02
 14a:	d0 9a       	sbi	0x1a, 0	; 26
 14c:	1a 82       	std	Y+2, r1	; 0x02
 14e:	19 82       	std	Y+1, r1	; 0x01
 150:	18 c0       	rjmp	.+48     	; 0x182 <hal_spiExchangeDATA_edited+0x5a>
 152:	d9 9a       	sbi	0x1b, 1	; 27
 154:	fa e1       	ldi	r31, 0x1A	; 26
 156:	fa 95       	dec	r31
 158:	f1 f7       	brne	.-4      	; 0x156 <hal_spiExchangeDATA_edited+0x2e>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <hal_spiExchangeDATA_edited+0x34>
 15c:	d9 98       	cbi	0x1b, 1	; 27
 15e:	8a e1       	ldi	r24, 0x1A	; 26
 160:	8a 95       	dec	r24
 162:	f1 f7       	brne	.-4      	; 0x160 <hal_spiExchangeDATA_edited+0x38>
 164:	00 c0       	rjmp	.+0      	; 0x166 <hal_spiExchangeDATA_edited+0x3e>
 166:	29 81       	ldd	r18, Y+1	; 0x01
 168:	3a 81       	ldd	r19, Y+2	; 0x02
 16a:	2f 5f       	subi	r18, 0xFF	; 255
 16c:	3f 4f       	sbci	r19, 0xFF	; 255
 16e:	3a 83       	std	Y+2, r19	; 0x02
 170:	29 83       	std	Y+1, r18	; 0x01
 172:	29 81       	ldd	r18, Y+1	; 0x01
 174:	3a 81       	ldd	r19, Y+2	; 0x02
 176:	20 3d       	cpi	r18, 0xD0	; 208
 178:	37 40       	sbci	r19, 0x07	; 7
 17a:	18 f0       	brcs	.+6      	; 0x182 <hal_spiExchangeDATA_edited+0x5a>
 17c:	1a 82       	std	Y+2, r1	; 0x02
 17e:	19 82       	std	Y+1, r1	; 0x01
 180:	05 c0       	rjmp	.+10     	; 0x18c <hal_spiExchangeDATA_edited+0x64>
 182:	ec 91       	ld	r30, X
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	91 81       	ldd	r25, Z+1	; 0x01
 188:	99 23       	and	r25, r25
 18a:	1c f7       	brge	.-58     	; 0x152 <hal_spiExchangeDATA_edited+0x2a>
 18c:	d0 98       	cbi	0x1a, 0	; 26
 18e:	ec 91       	ld	r30, X
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	82 81       	ldd	r24, Z+2	; 0x02
 194:	fa 01       	movw	r30, r20
 196:	80 83       	st	Z, r24
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	0f 90       	pop	r0
 19c:	0f 90       	pop	r0
 19e:	df 91       	pop	r29
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <hal_setSpiIsrCallback>:
	if ( (strg_obj != NULL) && (vptr_cb != NULL) )
	{
		if (strg_obj->driver_state_obj == DRIVER_INITIATED)
		{
#endif
			spi_interrupt_handler=vptr_cb;
 1a4:	70 93 8d 00 	sts	0x008D, r23	; 0x80008d <__data_end+0x1>
 1a8:	60 93 8c 00 	sts	0x008C, r22	; 0x80008c <__data_end>
	}
#endif
	return ret_val;
	
	
}
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	08 95       	ret

000001b0 <__vector_12>:

ISR(SPI_STC_vect)
{
 1b0:	1f 92       	push	r1
 1b2:	0f 92       	push	r0
 1b4:	0f b6       	in	r0, 0x3f	; 63
 1b6:	0f 92       	push	r0
 1b8:	11 24       	eor	r1, r1
 1ba:	2f 93       	push	r18
 1bc:	3f 93       	push	r19
 1be:	4f 93       	push	r20
 1c0:	5f 93       	push	r21
 1c2:	6f 93       	push	r22
 1c4:	7f 93       	push	r23
 1c6:	8f 93       	push	r24
 1c8:	9f 93       	push	r25
 1ca:	af 93       	push	r26
 1cc:	bf 93       	push	r27
 1ce:	ef 93       	push	r30
 1d0:	ff 93       	push	r31
	if (spi_interrupt_handler)
 1d2:	e0 91 8c 00 	lds	r30, 0x008C	; 0x80008c <__data_end>
 1d6:	f0 91 8d 00 	lds	r31, 0x008D	; 0x80008d <__data_end+0x1>
 1da:	30 97       	sbiw	r30, 0x00	; 0
 1dc:	09 f0       	breq	.+2      	; 0x1e0 <__vector_12+0x30>
	{
		(void)(*spi_interrupt_handler)();
 1de:	09 95       	icall
	}
 1e0:	ff 91       	pop	r31
 1e2:	ef 91       	pop	r30
 1e4:	bf 91       	pop	r27
 1e6:	af 91       	pop	r26
 1e8:	9f 91       	pop	r25
 1ea:	8f 91       	pop	r24
 1ec:	7f 91       	pop	r23
 1ee:	6f 91       	pop	r22
 1f0:	5f 91       	pop	r21
 1f2:	4f 91       	pop	r20
 1f4:	3f 91       	pop	r19
 1f6:	2f 91       	pop	r18
 1f8:	0f 90       	pop	r0
 1fa:	0f be       	out	0x3f, r0	; 63
 1fc:	0f 90       	pop	r0
 1fe:	1f 90       	pop	r1
 200:	18 95       	reti

00000202 <usart_init>:
	}
#endif
	return ret_val;
	
	
}
 202:	cf 92       	push	r12
 204:	ef 92       	push	r14
 206:	0f 93       	push	r16
 208:	fc 01       	movw	r30, r24
 20a:	e1 10       	cpse	r14, r1
 20c:	0a c0       	rjmp	.+20     	; 0x222 <usart_init+0x20>
 20e:	f8 94       	cli
 210:	61 30       	cpi	r22, 0x01	; 1
 212:	11 f4       	brne	.+4      	; 0x218 <usart_init+0x16>
 214:	55 9a       	sbi	0x0a, 5	; 10
 216:	05 c0       	rjmp	.+10     	; 0x222 <usart_init+0x20>
 218:	62 30       	cpi	r22, 0x02	; 2
 21a:	11 f4       	brne	.+4      	; 0x220 <usart_init+0x1e>
 21c:	57 9a       	sbi	0x0a, 7	; 10
 21e:	01 c0       	rjmp	.+2      	; 0x222 <usart_init+0x20>
 220:	57 9a       	sbi	0x0a, 7	; 10
 222:	03 83       	std	Z+3, r16	; 0x03
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	85 83       	std	Z+5, r24	; 0x05
 228:	e4 82       	std	Z+4, r14	; 0x04
 22a:	61 83       	std	Z+1, r22	; 0x01
 22c:	22 83       	std	Z+2, r18	; 0x02
 22e:	40 83       	st	Z, r20
 230:	9a b1       	in	r25, 0x0a	; 10
 232:	80 2f       	mov	r24, r16
 234:	84 70       	andi	r24, 0x04	; 4
 236:	88 0f       	add	r24, r24
 238:	88 0f       	add	r24, r24
 23a:	89 2b       	or	r24, r25
 23c:	66 0f       	add	r22, r22
 23e:	66 0f       	add	r22, r22
 240:	66 0f       	add	r22, r22
 242:	68 2b       	or	r22, r24
 244:	6a b9       	out	0x0a, r22	; 10
 246:	44 0f       	add	r20, r20
 248:	44 0f       	add	r20, r20
 24a:	44 0f       	add	r20, r20
 24c:	8c 2d       	mov	r24, r12
 24e:	80 68       	ori	r24, 0x80	; 128
 250:	c4 2e       	mov	r12, r20
 252:	c8 2a       	or	r12, r24
 254:	80 e1       	ldi	r24, 0x10	; 16
 256:	28 9f       	mul	r18, r24
 258:	90 01       	movw	r18, r0
 25a:	11 24       	eor	r1, r1
 25c:	2c 29       	or	r18, r12
 25e:	03 70       	andi	r16, 0x03	; 3
 260:	00 0f       	add	r16, r16
 262:	20 2b       	or	r18, r16
 264:	20 bd       	out	0x20, r18	; 32
 266:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <UBRR_VAL>
 26a:	89 b9       	out	0x09, r24	; 9
 26c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <UBRR_VAL+0x1>
 270:	8f 77       	andi	r24, 0x7F	; 127
 272:	80 bd       	out	0x20, r24	; 32
 274:	e1 10       	cpse	r14, r1
 276:	01 c0       	rjmp	.+2      	; 0x27a <usart_init+0x78>
 278:	78 94       	sei
 27a:	85 e1       	ldi	r24, 0x15	; 21
 27c:	0f 91       	pop	r16
 27e:	ef 90       	pop	r14
 280:	cf 90       	pop	r12
 282:	08 95       	ret

00000284 <usart_send_arr>:
 284:	fb 01       	movw	r30, r22
 286:	80 81       	ld	r24, Z
 288:	88 23       	and	r24, r24
 28a:	59 f0       	breq	.+22     	; 0x2a2 <usart_send_arr+0x1e>
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	5d 9b       	sbis	0x0b, 5	; 11
 290:	fe cf       	rjmp	.-4      	; 0x28e <usart_send_arr+0xa>
 292:	8c b9       	out	0x0c, r24	; 12
 294:	9f 5f       	subi	r25, 0xFF	; 255
 296:	fb 01       	movw	r30, r22
 298:	e9 0f       	add	r30, r25
 29a:	f1 1d       	adc	r31, r1
 29c:	80 81       	ld	r24, Z
 29e:	81 11       	cpse	r24, r1
 2a0:	f6 cf       	rjmp	.-20     	; 0x28e <usart_send_arr+0xa>
 2a2:	85 e1       	ldi	r24, 0x15	; 21
 2a4:	08 95       	ret

000002a6 <usart_set_isr_RXC_callback>:
 2a6:	70 93 8f 00 	sts	0x008F, r23	; 0x80008f <vptr_RXC_cb+0x1>
 2aa:	60 93 8e 00 	sts	0x008E, r22	; 0x80008e <vptr_RXC_cb>
 2ae:	85 e1       	ldi	r24, 0x15	; 21
 2b0:	08 95       	ret

000002b2 <__vector_13>:
//TEST LATER THE FUNCTION
ISR(USART_RXC_vect)
{
 2b2:	1f 92       	push	r1
 2b4:	0f 92       	push	r0
 2b6:	0f b6       	in	r0, 0x3f	; 63
 2b8:	0f 92       	push	r0
 2ba:	11 24       	eor	r1, r1
 2bc:	2f 93       	push	r18
 2be:	3f 93       	push	r19
 2c0:	4f 93       	push	r20
 2c2:	5f 93       	push	r21
 2c4:	6f 93       	push	r22
 2c6:	7f 93       	push	r23
 2c8:	8f 93       	push	r24
 2ca:	9f 93       	push	r25
 2cc:	af 93       	push	r26
 2ce:	bf 93       	push	r27
 2d0:	ef 93       	push	r30
 2d2:	ff 93       	push	r31
	if (vptr_RXC_cb)
 2d4:	e0 91 8e 00 	lds	r30, 0x008E	; 0x80008e <vptr_RXC_cb>
 2d8:	f0 91 8f 00 	lds	r31, 0x008F	; 0x80008f <vptr_RXC_cb+0x1>
 2dc:	30 97       	sbiw	r30, 0x00	; 0
 2de:	09 f0       	breq	.+2      	; 0x2e2 <__vector_13+0x30>
	{
		vptr_RXC_cb();
 2e0:	09 95       	icall
	}
		
}
 2e2:	ff 91       	pop	r31
 2e4:	ef 91       	pop	r30
 2e6:	bf 91       	pop	r27
 2e8:	af 91       	pop	r26
 2ea:	9f 91       	pop	r25
 2ec:	8f 91       	pop	r24
 2ee:	7f 91       	pop	r23
 2f0:	6f 91       	pop	r22
 2f2:	5f 91       	pop	r21
 2f4:	4f 91       	pop	r20
 2f6:	3f 91       	pop	r19
 2f8:	2f 91       	pop	r18
 2fa:	0f 90       	pop	r0
 2fc:	0f be       	out	0x3f, r0	; 63
 2fe:	0f 90       	pop	r0
 300:	1f 90       	pop	r1
 302:	18 95       	reti

00000304 <read_ultra_sonic0>:
extern usart_t uart_obj;					//used to hold the uart configurations

//  the ultrasonic0 using counter 1
msa_u32 read_ultra_sonic0(void) //0000 0011
{
	ready_0=E_FALSE;
 304:	10 92 9a 00 	sts	0x009A, r1	; 0x80009a <ready_0>
	CLEAR_BIT(PORTC,0);	
 308:	a8 98       	cbi	0x15, 0	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 30a:	25 e0       	ldi	r18, 0x05	; 5
 30c:	2a 95       	dec	r18
 30e:	f1 f7       	brne	.-4      	; 0x30c <read_ultra_sonic0+0x8>
 310:	00 00       	nop
	_delay_us(2);
	SET_BIT(PORTC,0);	
 312:	a8 9a       	sbi	0x15, 0	; 21
 314:	88 e2       	ldi	r24, 0x28	; 40
 316:	8a 95       	dec	r24
 318:	f1 f7       	brne	.-4      	; 0x316 <read_ultra_sonic0+0x12>
	_delay_us(15);		//triggering the sensor for 15usec
	CLEAR_BIT(PORTC,0);
 31a:	a8 98       	cbi	0x15, 0	; 21
	
	while ( (!ready_0) && (chker_0 > 500) )//wait the sensor reading completion
 31c:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <ready_0>
 320:	81 11       	cpse	r24, r1
 322:	1f c0       	rjmp	.+62     	; 0x362 <read_ultra_sonic0+0x5e>
 324:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <chker_0>
 328:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <chker_0+0x1>
 32c:	85 3f       	cpi	r24, 0xF5	; 245
 32e:	91 40       	sbci	r25, 0x01	; 1
 330:	c0 f0       	brcs	.+48     	; 0x362 <read_ultra_sonic0+0x5e>
 332:	85 e0       	ldi	r24, 0x05	; 5
 334:	8a 95       	dec	r24
 336:	f1 f7       	brne	.-4      	; 0x334 <read_ultra_sonic0+0x30>
 338:	00 00       	nop
	{
		_delay_us(2);
		chker_0++;
 33a:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <chker_0>
 33e:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <chker_0+0x1>
 342:	01 96       	adiw	r24, 0x01	; 1
 344:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <chker_0+0x1>
 348:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <chker_0>
	_delay_us(2);
	SET_BIT(PORTC,0);	
	_delay_us(15);		//triggering the sensor for 15usec
	CLEAR_BIT(PORTC,0);
	
	while ( (!ready_0) && (chker_0 > 500) )//wait the sensor reading completion
 34c:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <ready_0>
 350:	81 11       	cpse	r24, r1
 352:	07 c0       	rjmp	.+14     	; 0x362 <read_ultra_sonic0+0x5e>
 354:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <chker_0>
 358:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <chker_0+0x1>
 35c:	85 3f       	cpi	r24, 0xF5	; 245
 35e:	91 40       	sbci	r25, 0x01	; 1
 360:	40 f7       	brcc	.-48     	; 0x332 <read_ultra_sonic0+0x2e>
	{
		_delay_us(2);
		chker_0++;
	}
	chker_0=0;
 362:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <chker_0+0x1>
 366:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <chker_0>
	ready_0=E_FALSE;	//false it so the next time wait for the next reading process
 36a:	10 92 9a 00 	sts	0x009A, r1	; 0x80009a <ready_0>
 36e:	85 e8       	ldi	r24, 0x85	; 133
 370:	8a 95       	dec	r24
 372:	f1 f7       	brne	.-4      	; 0x370 <read_ultra_sonic0+0x6c>
 374:	00 00       	nop
	_delay_us(50);
	return ( ( pulse0 + ((msa_u32)OVF_VAL*OVF_CNTR_0))/(58) );	//getting the distance based on formula on introduction
 376:	40 91 ae 00 	lds	r20, 0x00AE	; 0x8000ae <pulse0>
 37a:	50 91 af 00 	lds	r21, 0x00AF	; 0x8000af <pulse0+0x1>
 37e:	20 91 ab 00 	lds	r18, 0x00AB	; 0x8000ab <OVF_CNTR_0>
 382:	30 91 ac 00 	lds	r19, 0x00AC	; 0x8000ac <OVF_CNTR_0+0x1>
 386:	ac ed       	ldi	r26, 0xDC	; 220
 388:	b5 e0       	ldi	r27, 0x05	; 5
 38a:	0e 94 c5 05 	call	0xb8a	; 0xb8a <__umulhisi3>
 38e:	64 0f       	add	r22, r20
 390:	75 1f       	adc	r23, r21
 392:	81 1d       	adc	r24, r1
 394:	91 1d       	adc	r25, r1
 396:	2a e3       	ldi	r18, 0x3A	; 58
 398:	30 e0       	ldi	r19, 0x00	; 0
 39a:	40 e0       	ldi	r20, 0x00	; 0
 39c:	50 e0       	ldi	r21, 0x00	; 0
 39e:	0e 94 a3 05 	call	0xb46	; 0xb46 <__udivmodsi4>
	
}
 3a2:	ca 01       	movw	r24, r20
 3a4:	b9 01       	movw	r22, r18
 3a6:	08 95       	ret

000003a8 <send_usonic0>:
void send_usonic0(msa_u32 COUNTA)
{
 3a8:	dc 01       	movw	r26, r24
 3aa:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 3ac:	4a e0       	ldi	r20, 0x0A	; 10
 3ae:	6b e9       	ldi	r22, 0x9B	; 155
 3b0:	70 e0       	ldi	r23, 0x00	; 0
 3b2:	0e 94 d4 05 	call	0xba8	; 0xba8 <__itoa_ncheck>
	msa_u8 *arr_add1=(msa_u8 *)"usonic0 data = ";
	msa_u8 *arr_add2=(msa_u8 *)"  mm  ";
	itoa(COUNTA,SHOWA,10);
	usart_send_arr(&uart_obj,arr_add1);
 3b6:	64 e6       	ldi	r22, 0x64	; 100
 3b8:	70 e0       	ldi	r23, 0x00	; 0
 3ba:	83 ee       	ldi	r24, 0xE3	; 227
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	0e 94 42 01 	call	0x284	; 0x284 <usart_send_arr>
	usart_send_arr(&uart_obj,SHOWA);
 3c2:	6b e9       	ldi	r22, 0x9B	; 155
 3c4:	70 e0       	ldi	r23, 0x00	; 0
 3c6:	83 ee       	ldi	r24, 0xE3	; 227
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	0e 94 42 01 	call	0x284	; 0x284 <usart_send_arr>
	usart_send_arr(&uart_obj,arr_add2);
 3ce:	64 e7       	ldi	r22, 0x74	; 116
 3d0:	70 e0       	ldi	r23, 0x00	; 0
 3d2:	83 ee       	ldi	r24, 0xE3	; 227
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	0e 94 42 01 	call	0x284	; 0x284 <usart_send_arr>
 3da:	08 95       	ret

000003dc <read_ultra_sonic1>:
}

//  the ultrasonic1 using counter 2
msa_u32 read_ultra_sonic1(void) //0000 0011
{
	ready_1=E_FALSE;
 3dc:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <ready_1>
	
	CLEAR_BIT(PORTC,1);
 3e0:	a9 98       	cbi	0x15, 1	; 21
 3e2:	25 e0       	ldi	r18, 0x05	; 5
 3e4:	2a 95       	dec	r18
 3e6:	f1 f7       	brne	.-4      	; 0x3e4 <read_ultra_sonic1+0x8>
 3e8:	00 00       	nop
	_delay_us(2);
	SET_BIT(PORTC,1);
 3ea:	a9 9a       	sbi	0x15, 1	; 21
 3ec:	88 e2       	ldi	r24, 0x28	; 40
 3ee:	8a 95       	dec	r24
 3f0:	f1 f7       	brne	.-4      	; 0x3ee <read_ultra_sonic1+0x12>
	_delay_us(15);		//triggering the sensor for 15usec
	CLEAR_BIT(PORTC,1);
 3f2:	a9 98       	cbi	0x15, 1	; 21
	
	while ( (!ready_1) && (chker_1 > 500) )//wait the sensor reading completion
 3f4:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <ready_1>
 3f8:	81 11       	cpse	r24, r1
 3fa:	1f c0       	rjmp	.+62     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 3fc:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <chker_1>
 400:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <chker_1+0x1>
 404:	85 3f       	cpi	r24, 0xF5	; 245
 406:	91 40       	sbci	r25, 0x01	; 1
 408:	c0 f0       	brcs	.+48     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 40a:	85 e0       	ldi	r24, 0x05	; 5
 40c:	8a 95       	dec	r24
 40e:	f1 f7       	brne	.-4      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 410:	00 00       	nop
	{
		_delay_us(2);
		chker_1++;
 412:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <chker_1>
 416:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <chker_1+0x1>
 41a:	01 96       	adiw	r24, 0x01	; 1
 41c:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <chker_1+0x1>
 420:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <chker_1>
	_delay_us(2);
	SET_BIT(PORTC,1);
	_delay_us(15);		//triggering the sensor for 15usec
	CLEAR_BIT(PORTC,1);
	
	while ( (!ready_1) && (chker_1 > 500) )//wait the sensor reading completion
 424:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <ready_1>
 428:	81 11       	cpse	r24, r1
 42a:	07 c0       	rjmp	.+14     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 42c:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <chker_1>
 430:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <chker_1+0x1>
 434:	85 3f       	cpi	r24, 0xF5	; 245
 436:	91 40       	sbci	r25, 0x01	; 1
 438:	40 f7       	brcc	.-48     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
	{
		_delay_us(2);
		chker_1++;
	}
	chker_1=0;
 43a:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <chker_1+0x1>
 43e:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <chker_1>
	ready_1=E_FALSE;	//false it so th next time wait for the next reading process
 442:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <ready_1>
 446:	8a e1       	ldi	r24, 0x1A	; 26
 448:	8a 95       	dec	r24
 44a:	f1 f7       	brne	.-4      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 44c:	00 c0       	rjmp	.+0      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
	_delay_us(10);
	return ( ( pulse1 + ((msa_u32)OVF_VAL*OVF_CNTR_1))/(58) );	//getting the distance based on formula on introduction   * ((msa_u32)F_CPU/1000000)
 44e:	40 91 96 00 	lds	r20, 0x0096	; 0x800096 <pulse1>
 452:	50 91 97 00 	lds	r21, 0x0097	; 0x800097 <pulse1+0x1>
 456:	20 91 93 00 	lds	r18, 0x0093	; 0x800093 <OVF_CNTR_1>
 45a:	30 91 94 00 	lds	r19, 0x0094	; 0x800094 <OVF_CNTR_1+0x1>
 45e:	ac ed       	ldi	r26, 0xDC	; 220
 460:	b5 e0       	ldi	r27, 0x05	; 5
 462:	0e 94 c5 05 	call	0xb8a	; 0xb8a <__umulhisi3>
 466:	64 0f       	add	r22, r20
 468:	75 1f       	adc	r23, r21
 46a:	81 1d       	adc	r24, r1
 46c:	91 1d       	adc	r25, r1
 46e:	2a e3       	ldi	r18, 0x3A	; 58
 470:	30 e0       	ldi	r19, 0x00	; 0
 472:	40 e0       	ldi	r20, 0x00	; 0
 474:	50 e0       	ldi	r21, 0x00	; 0
 476:	0e 94 a3 05 	call	0xb46	; 0xb46 <__udivmodsi4>
}
 47a:	ca 01       	movw	r24, r20
 47c:	b9 01       	movw	r22, r18
 47e:	08 95       	ret

00000480 <send_usonic1>:

void send_usonic1(msa_u32 COUNTB)
{
 480:	dc 01       	movw	r26, r24
 482:	cb 01       	movw	r24, r22
 484:	4a e0       	ldi	r20, 0x0A	; 10
 486:	6b e9       	ldi	r22, 0x9B	; 155
 488:	70 e0       	ldi	r23, 0x00	; 0
 48a:	0e 94 d4 05 	call	0xba8	; 0xba8 <__itoa_ncheck>
	msa_u8 *arr_add1=(msa_u8 *)"usonic1 data = ";
	msa_u8 *arr_add2=(msa_u8 *)"  mm  ";
	itoa(COUNTB,SHOWA,10);
	usart_send_arr(&uart_obj,arr_add1);
 48e:	6b e7       	ldi	r22, 0x7B	; 123
 490:	70 e0       	ldi	r23, 0x00	; 0
 492:	83 ee       	ldi	r24, 0xE3	; 227
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	0e 94 42 01 	call	0x284	; 0x284 <usart_send_arr>
	usart_send_arr(&uart_obj,SHOWA);
 49a:	6b e9       	ldi	r22, 0x9B	; 155
 49c:	70 e0       	ldi	r23, 0x00	; 0
 49e:	83 ee       	ldi	r24, 0xE3	; 227
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	0e 94 42 01 	call	0x284	; 0x284 <usart_send_arr>
	usart_send_arr(&uart_obj,arr_add2);
 4a6:	64 e7       	ldi	r22, 0x74	; 116
 4a8:	70 e0       	ldi	r23, 0x00	; 0
 4aa:	83 ee       	ldi	r24, 0xE3	; 227
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	0e 94 42 01 	call	0x284	; 0x284 <usart_send_arr>
 4b2:	08 95       	ret

000004b4 <__vector_11>:
	
}

ISR(TIMER0_OVF_vect)
{
 4b4:	1f 92       	push	r1
 4b6:	0f 92       	push	r0
 4b8:	0f b6       	in	r0, 0x3f	; 63
 4ba:	0f 92       	push	r0
 4bc:	11 24       	eor	r1, r1
 4be:	8f 93       	push	r24
 4c0:	9f 93       	push	r25
	OVF_CNTR_0++;
 4c2:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <OVF_CNTR_0>
 4c6:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <OVF_CNTR_0+0x1>
 4ca:	01 96       	adiw	r24, 0x01	; 1
 4cc:	90 93 ac 00 	sts	0x00AC, r25	; 0x8000ac <OVF_CNTR_0+0x1>
 4d0:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <OVF_CNTR_0>
}
 4d4:	9f 91       	pop	r25
 4d6:	8f 91       	pop	r24
 4d8:	0f 90       	pop	r0
 4da:	0f be       	out	0x3f, r0	; 63
 4dc:	0f 90       	pop	r0
 4de:	1f 90       	pop	r1
 4e0:	18 95       	reti

000004e2 <__vector_5>:

ISR(TIMER2_OVF_vect)
{
 4e2:	1f 92       	push	r1
 4e4:	0f 92       	push	r0
 4e6:	0f b6       	in	r0, 0x3f	; 63
 4e8:	0f 92       	push	r0
 4ea:	11 24       	eor	r1, r1
 4ec:	8f 93       	push	r24
 4ee:	9f 93       	push	r25
	OVF_CNTR_1++;
 4f0:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <OVF_CNTR_1>
 4f4:	90 91 94 00 	lds	r25, 0x0094	; 0x800094 <OVF_CNTR_1+0x1>
 4f8:	01 96       	adiw	r24, 0x01	; 1
 4fa:	90 93 94 00 	sts	0x0094, r25	; 0x800094 <OVF_CNTR_1+0x1>
 4fe:	80 93 93 00 	sts	0x0093, r24	; 0x800093 <OVF_CNTR_1>
}
 502:	9f 91       	pop	r25
 504:	8f 91       	pop	r24
 506:	0f 90       	pop	r0
 508:	0f be       	out	0x3f, r0	; 63
 50a:	0f 90       	pop	r0
 50c:	1f 90       	pop	r1
 50e:	18 95       	reti

00000510 <__vector_1>:
 //later on if used this algo, notice if the val couldn't be read, dont move the servo this turn :D <3 


//interrupt service routine when there is a change in logic level for the USONIC_0
ISR(INT0_vect)
{
 510:	1f 92       	push	r1
 512:	0f 92       	push	r0
 514:	0f b6       	in	r0, 0x3f	; 63
 516:	0f 92       	push	r0
 518:	11 24       	eor	r1, r1
 51a:	8f 93       	push	r24
 51c:	9f 93       	push	r25

	if (state0==1)//when logic from HIGH to LOW
 51e:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <state0>
 522:	81 30       	cpi	r24, 0x01	; 1
 524:	71 f4       	brne	.+28     	; 0x542 <__vector_1+0x32>
	{

		TCCR0=0;//disabling counter
 526:	13 be       	out	0x33, r1	; 51

		pulse0=TCNT0;//count memory is updated to integer
 528:	82 b7       	in	r24, 0x32	; 50
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	90 93 af 00 	sts	0x00AF, r25	; 0x8000af <pulse0+0x1>
 530:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <pulse0>

		TCNT0=0;//resetting the counter memory
 534:	12 be       	out	0x32, r1	; 50

		state0=0;
 536:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <state0>
		ready_0=E_TRUE;
 53a:	81 e0       	ldi	r24, 0x01	; 1
 53c:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <ready_0>
 540:	0a c0       	rjmp	.+20     	; 0x556 <__vector_1+0x46>

	}
	else//when logic change from LOW to HIGH
	{

		TCCR0|=(1<<CS00);//enabling counter
 542:	83 b7       	in	r24, 0x33	; 51
 544:	81 60       	ori	r24, 0x01	; 1
 546:	83 bf       	out	0x33, r24	; 51

		state0=1;
 548:	81 e0       	ldi	r24, 0x01	; 1
 54a:	80 93 ad 00 	sts	0x00AD, r24	; 0x8000ad <state0>
		OVF_CNTR_0=0;
 54e:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <OVF_CNTR_0+0x1>
 552:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <OVF_CNTR_0>

	}

}
 556:	9f 91       	pop	r25
 558:	8f 91       	pop	r24
 55a:	0f 90       	pop	r0
 55c:	0f be       	out	0x3f, r0	; 63
 55e:	0f 90       	pop	r0
 560:	1f 90       	pop	r1
 562:	18 95       	reti

00000564 <__vector_2>:

//interrupt service routine when there is a change in logic level for the USONIC_0
ISR(INT1_vect)
{
 564:	1f 92       	push	r1
 566:	0f 92       	push	r0
 568:	0f b6       	in	r0, 0x3f	; 63
 56a:	0f 92       	push	r0
 56c:	11 24       	eor	r1, r1
 56e:	8f 93       	push	r24
 570:	9f 93       	push	r25

	if (state1==1)//when logic from HIGH to LOW
 572:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <state1>
 576:	81 30       	cpi	r24, 0x01	; 1
 578:	79 f4       	brne	.+30     	; 0x598 <__vector_2+0x34>
	{

		TCCR2=0;//disabling counter
 57a:	15 bc       	out	0x25, r1	; 37

		pulse1=TCNT2;//count memory is updated to integer
 57c:	84 b5       	in	r24, 0x24	; 36
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <pulse1+0x1>
 584:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <pulse1>

		TCNT1=0;//resetting the counter memory
 588:	1d bc       	out	0x2d, r1	; 45
 58a:	1c bc       	out	0x2c, r1	; 44

		state1=0;
 58c:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <state1>
		ready_1=E_TRUE;
 590:	81 e0       	ldi	r24, 0x01	; 1
 592:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <ready_1>
 596:	0a c0       	rjmp	.+20     	; 0x5ac <__vector_2+0x48>

	}
	else//when logic change from LOW to HIGH
	{

		TCCR2|=(1<<CS20);//enabling counter
 598:	85 b5       	in	r24, 0x25	; 37
 59a:	81 60       	ori	r24, 0x01	; 1
 59c:	85 bd       	out	0x25, r24	; 37

		state1=1;
 59e:	81 e0       	ldi	r24, 0x01	; 1
 5a0:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <state1>
		OVF_CNTR_1=0;
 5a4:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <OVF_CNTR_1+0x1>
 5a8:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <OVF_CNTR_1>

	}

 5ac:	9f 91       	pop	r25
 5ae:	8f 91       	pop	r24
 5b0:	0f 90       	pop	r0
 5b2:	0f be       	out	0x3f, r0	; 63
 5b4:	0f 90       	pop	r0
 5b6:	1f 90       	pop	r1
 5b8:	18 95       	reti

000005ba <usart_listen>:
}

//this will occur only if there is an emergency call from the tiva controller
void usart_listen(void)
{
	uart_data_got=UDR;
 5ba:	8c b1       	in	r24, 0x0c	; 12
 5bc:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <uart_data_got>
 5c0:	08 95       	ret

000005c2 <spi_listen>:
	//wait
	//scan 3
	
	//scaneduler=E_TRUE;
	//PORTA=SPDR;
	spi_temp_inn=SPDR;
 5c2:	8f b1       	in	r24, 0x0f	; 15
 5c4:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <spi_temp_inn>
 5c8:	08 95       	ret

000005ca <system_init>:
	}
	return 0;
}

void system_init(void)
{
 5ca:	cf 92       	push	r12
 5cc:	ef 92       	push	r14
 5ce:	0f 93       	push	r16
	DDRC=DDRA=0xff;
 5d0:	8f ef       	ldi	r24, 0xFF	; 255
 5d2:	8a bb       	out	0x1a, r24	; 26
 5d4:	84 bb       	out	0x14, r24	; 20
	SET_BIT(PORTA,0);
 5d6:	d8 9a       	sbi	0x1b, 0	; 27
	//spi init...try polling i.e wait 10 m s or the time the longest scanning task will take plus some
	//time then ask for the status if reading is done or not
	//try to make the delay decreases by time :D
	hal_spiInit(&spi_obj,SPI_1_base,FREQ_BY_4,SLAVE_EN,SPI_INTERRUPTING,MODE_1,MSB_FIRST);
 5d8:	c1 2c       	mov	r12, r1
 5da:	e1 2c       	mov	r14, r1
 5dc:	01 e0       	ldi	r16, 0x01	; 1
 5de:	20 e0       	ldi	r18, 0x00	; 0
 5e0:	40 e0       	ldi	r20, 0x00	; 0
 5e2:	6d e2       	ldi	r22, 0x2D	; 45
 5e4:	8c ed       	ldi	r24, 0xDC	; 220
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	0e 94 49 00 	call	0x92	; 0x92 <hal_spiInit>
	hal_setSpiIsrCallback(&spi_obj,spi_listen);
 5ec:	61 ee       	ldi	r22, 0xE1	; 225
 5ee:	72 e0       	ldi	r23, 0x02	; 2
 5f0:	8c ed       	ldi	r24, 0xDC	; 220
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <hal_setSpiIsrCallback>
	//uart init //but will disable the completion isr
	usart_init(&uart_obj,B_SENDER_N_RECEIVER,ONE_STP_BIT,NO_PARITY,EIGHT,POLLING_DRIVEN,FALLING_EDGE);	//notice that in this specific project
 5f8:	cc 24       	eor	r12, r12
 5fa:	c3 94       	inc	r12
 5fc:	ee 24       	eor	r14, r14
 5fe:	e3 94       	inc	r14
 600:	03 e0       	ldi	r16, 0x03	; 3
 602:	20 e0       	ldi	r18, 0x00	; 0
 604:	40 e0       	ldi	r20, 0x00	; 0
 606:	63 e0       	ldi	r22, 0x03	; 3
 608:	83 ee       	ldi	r24, 0xE3	; 227
 60a:	90 e0       	ldi	r25, 0x00	; 0
 60c:	0e 94 01 01 	call	0x202	; 0x202 <usart_init>
																											//according to sys demands, i ignored
																											//prevented the uart_send_complete isr 
	usart_set_isr_RXC_callback(&uart_obj,usart_listen);
 610:	6d ed       	ldi	r22, 0xDD	; 221
 612:	72 e0       	ldi	r23, 0x02	; 2
 614:	83 ee       	ldi	r24, 0xE3	; 227
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	0e 94 53 01 	call	0x2a6	; 0x2a6 <usart_set_isr_RXC_callback>
	//usonics_init
	//output the control/triggering pins
	SET_BIT(DDRC,0);
 61c:	a0 9a       	sbi	0x14, 0	; 20
	SET_BIT(DDRC,1);
 61e:	a1 9a       	sbi	0x14, 1	; 20
	//ultrasonic
	//setting the interrupt pins as inputs
	CLEAR_BIT(DDRD,2);
 620:	8a 98       	cbi	0x11, 2	; 17
	CLEAR_BIT(DDRD,3);
 622:	8b 98       	cbi	0x11, 3	; 17
 	//enabling interrupt0 & interrupt1
	SET_BIT(GICR,INT0);
 624:	8b b7       	in	r24, 0x3b	; 59
 626:	80 64       	ori	r24, 0x40	; 64
 628:	8b bf       	out	0x3b, r24	; 59
	SET_BIT(GICR,INT1);
 62a:	8b b7       	in	r24, 0x3b	; 59
 62c:	80 68       	ori	r24, 0x80	; 128
 62e:	8b bf       	out	0x3b, r24	; 59
	//setting interrupt triggering at any logic change for both interrupts
	SET_BIT(MCUCR,ISC00);
 630:	85 b7       	in	r24, 0x35	; 53
 632:	81 60       	ori	r24, 0x01	; 1
 634:	85 bf       	out	0x35, r24	; 53
	SET_BIT(MCUCR,ISC10);
 636:	85 b7       	in	r24, 0x35	; 53
 638:	84 60       	ori	r24, 0x04	; 4
 63a:	85 bf       	out	0x35, r24	; 53
	//enable the over flow interrupts for timer 2 & time
	SET_BIT(TIMSK,TOIE2);
 63c:	89 b7       	in	r24, 0x39	; 57
 63e:	80 64       	ori	r24, 0x40	; 64
 640:	89 bf       	out	0x39, r24	; 57
	SET_BIT(TIMSK,TOIE0);
 642:	89 b7       	in	r24, 0x39	; 57
 644:	81 60       	ori	r24, 0x01	; 1
 646:	89 bf       	out	0x39, r24	; 57
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 648:	2f e7       	ldi	r18, 0x7F	; 127
 64a:	88 e3       	ldi	r24, 0x38	; 56
 64c:	91 e0       	ldi	r25, 0x01	; 1
 64e:	21 50       	subi	r18, 0x01	; 1
 650:	80 40       	sbci	r24, 0x00	; 0
 652:	90 40       	sbci	r25, 0x00	; 0
 654:	e1 f7       	brne	.-8      	; 0x64e <system_init+0x84>
 656:	00 c0       	rjmp	.+0      	; 0x658 <system_init+0x8e>
 658:	00 00       	nop
	_delay_ms(50);
	sei();
 65a:	78 94       	sei
}
 65c:	0f 91       	pop	r16
 65e:	ef 90       	pop	r14
 660:	cf 90       	pop	r12
 662:	08 95       	ret

00000664 <main>:



int main(void)
{
	system_init();
 664:	0e 94 e5 02 	call	0x5ca	; 0x5ca <system_init>
			{
				spi_temp_out=OBSTACLE_A1;
			} 
			else //usonic1
			{
				spi_temp_out=OBSTACLE_A2;
 668:	c3 e5       	ldi	r28, 0x53	; 83
		send_usonic1(usonic1);
		if (( (usonic0 <= 750U) && (usonic0 >= 1U) ) || ( (usonic1 <= 750U) && (usonic1 >=1U) ) )
		{
			if (( (usonic0 <= 750U) && (usonic0 >= 1U) ))
			{
				spi_temp_out=OBSTACLE_A1;
 66a:	d2 e5       	ldi	r29, 0x52	; 82
int main(void)
{
	system_init();
    while (1) 
    {
		usonic0=read_ultra_sonic0();
 66c:	0e 94 82 01 	call	0x304	; 0x304 <read_ultra_sonic0>
 670:	60 93 b6 00 	sts	0x00B6, r22	; 0x8000b6 <usonic0>
 674:	70 93 b7 00 	sts	0x00B7, r23	; 0x8000b7 <usonic0+0x1>
 678:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <usonic0+0x2>
 67c:	90 93 b9 00 	sts	0x00B9, r25	; 0x8000b9 <usonic0+0x3>
		usonic1=read_ultra_sonic1();
 680:	0e 94 ee 01 	call	0x3dc	; 0x3dc <read_ultra_sonic1>
 684:	60 93 b2 00 	sts	0x00B2, r22	; 0x8000b2 <usonic1>
 688:	70 93 b3 00 	sts	0x00B3, r23	; 0x8000b3 <usonic1+0x1>
 68c:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <usonic1+0x2>
 690:	90 93 b5 00 	sts	0x00B5, r25	; 0x8000b5 <usonic1+0x3>
		//scaneduler=E_FALSE;
		//test ignoring the values lower than 380 and higher than 1000 4ex so I'm more precise and in safe region
		send_usonic0(usonic0);
 694:	60 91 b6 00 	lds	r22, 0x00B6	; 0x8000b6 <usonic0>
 698:	70 91 b7 00 	lds	r23, 0x00B7	; 0x8000b7 <usonic0+0x1>
 69c:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <usonic0+0x2>
 6a0:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <usonic0+0x3>
 6a4:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <send_usonic0>
		send_usonic1(usonic1);
 6a8:	60 91 b2 00 	lds	r22, 0x00B2	; 0x8000b2 <usonic1>
 6ac:	70 91 b3 00 	lds	r23, 0x00B3	; 0x8000b3 <usonic1+0x1>
 6b0:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <usonic1+0x2>
 6b4:	90 91 b5 00 	lds	r25, 0x00B5	; 0x8000b5 <usonic1+0x3>
 6b8:	0e 94 40 02 	call	0x480	; 0x480 <send_usonic1>
		if (( (usonic0 <= 750U) && (usonic0 >= 1U) ) || ( (usonic1 <= 750U) && (usonic1 >=1U) ) )
 6bc:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <usonic0>
 6c0:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <usonic0+0x1>
 6c4:	a0 91 b8 00 	lds	r26, 0x00B8	; 0x8000b8 <usonic0+0x2>
 6c8:	b0 91 b9 00 	lds	r27, 0x00B9	; 0x8000b9 <usonic0+0x3>
 6cc:	8f 3e       	cpi	r24, 0xEF	; 239
 6ce:	92 40       	sbci	r25, 0x02	; 2
 6d0:	a1 05       	cpc	r26, r1
 6d2:	b1 05       	cpc	r27, r1
 6d4:	60 f4       	brcc	.+24     	; 0x6ee <main+0x8a>
 6d6:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <usonic0>
 6da:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <usonic0+0x1>
 6de:	a0 91 b8 00 	lds	r26, 0x00B8	; 0x8000b8 <usonic0+0x2>
 6e2:	b0 91 b9 00 	lds	r27, 0x00B9	; 0x8000b9 <usonic0+0x3>
 6e6:	89 2b       	or	r24, r25
 6e8:	8a 2b       	or	r24, r26
 6ea:	8b 2b       	or	r24, r27
 6ec:	c9 f4       	brne	.+50     	; 0x720 <main+0xbc>
 6ee:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <usonic1>
 6f2:	90 91 b3 00 	lds	r25, 0x00B3	; 0x8000b3 <usonic1+0x1>
 6f6:	a0 91 b4 00 	lds	r26, 0x00B4	; 0x8000b4 <usonic1+0x2>
 6fa:	b0 91 b5 00 	lds	r27, 0x00B5	; 0x8000b5 <usonic1+0x3>
 6fe:	8f 3e       	cpi	r24, 0xEF	; 239
 700:	92 40       	sbci	r25, 0x02	; 2
 702:	a1 05       	cpc	r26, r1
 704:	b1 05       	cpc	r27, r1
 706:	90 f5       	brcc	.+100    	; 0x76c <main+0x108>
 708:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <usonic1>
 70c:	90 91 b3 00 	lds	r25, 0x00B3	; 0x8000b3 <usonic1+0x1>
 710:	a0 91 b4 00 	lds	r26, 0x00B4	; 0x8000b4 <usonic1+0x2>
 714:	b0 91 b5 00 	lds	r27, 0x00B5	; 0x8000b5 <usonic1+0x3>
 718:	89 2b       	or	r24, r25
 71a:	8a 2b       	or	r24, r26
 71c:	8b 2b       	or	r24, r27
 71e:	31 f1       	breq	.+76     	; 0x76c <main+0x108>
		{
			if (( (usonic0 <= 750U) && (usonic0 >= 1U) ))
 720:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <usonic0>
 724:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <usonic0+0x1>
 728:	a0 91 b8 00 	lds	r26, 0x00B8	; 0x8000b8 <usonic0+0x2>
 72c:	b0 91 b9 00 	lds	r27, 0x00B9	; 0x8000b9 <usonic0+0x3>
 730:	8f 3e       	cpi	r24, 0xEF	; 239
 732:	92 40       	sbci	r25, 0x02	; 2
 734:	a1 05       	cpc	r26, r1
 736:	b1 05       	cpc	r27, r1
 738:	78 f4       	brcc	.+30     	; 0x758 <main+0xf4>
 73a:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <usonic0>
 73e:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <usonic0+0x1>
 742:	a0 91 b8 00 	lds	r26, 0x00B8	; 0x8000b8 <usonic0+0x2>
 746:	b0 91 b9 00 	lds	r27, 0x00B9	; 0x8000b9 <usonic0+0x3>
 74a:	89 2b       	or	r24, r25
 74c:	8a 2b       	or	r24, r26
 74e:	8b 2b       	or	r24, r27
 750:	19 f0       	breq	.+6      	; 0x758 <main+0xf4>
			{
				spi_temp_out=OBSTACLE_A1;
 752:	d0 93 b1 00 	sts	0x00B1, r29	; 0x8000b1 <spi_temp_out>
 756:	02 c0       	rjmp	.+4      	; 0x75c <main+0xf8>
			} 
			else //usonic1
			{
				spi_temp_out=OBSTACLE_A2;
 758:	c0 93 b1 00 	sts	0x00B1, r28	; 0x8000b1 <spi_temp_out>
			}
			hal_spiExchangeDATA_edited(&spi_obj,&spi_temp_out,&spi_temp_inn);
 75c:	40 eb       	ldi	r20, 0xB0	; 176
 75e:	50 e0       	ldi	r21, 0x00	; 0
 760:	61 eb       	ldi	r22, 0xB1	; 177
 762:	70 e0       	ldi	r23, 0x00	; 0
 764:	8c ed       	ldi	r24, 0xDC	; 220
 766:	90 e0       	ldi	r25, 0x00	; 0
 768:	0e 94 94 00 	call	0x128	; 0x128 <hal_spiExchangeDATA_edited>
 76c:	8f e9       	ldi	r24, 0x9F	; 159
 76e:	9f e0       	ldi	r25, 0x0F	; 15
 770:	01 97       	sbiw	r24, 0x01	; 1
 772:	f1 f7       	brne	.-4      	; 0x770 <main+0x10c>
 774:	00 c0       	rjmp	.+0      	; 0x776 <main+0x112>
 776:	00 00       	nop
 778:	79 cf       	rjmp	.-270    	; 0x66c <main+0x8>

0000077a <vListInsertEnd>:
	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
}
 77a:	cf 93       	push	r28
 77c:	df 93       	push	r29
 77e:	9c 01       	movw	r18, r24
 780:	fb 01       	movw	r30, r22
 782:	dc 01       	movw	r26, r24
 784:	11 96       	adiw	r26, 0x01	; 1
 786:	cd 91       	ld	r28, X+
 788:	dc 91       	ld	r29, X
 78a:	12 97       	sbiw	r26, 0x02	; 2
 78c:	d3 83       	std	Z+3, r29	; 0x03
 78e:	c2 83       	std	Z+2, r28	; 0x02
 790:	8c 81       	ldd	r24, Y+4	; 0x04
 792:	9d 81       	ldd	r25, Y+5	; 0x05
 794:	95 83       	std	Z+5, r25	; 0x05
 796:	84 83       	std	Z+4, r24	; 0x04
 798:	8c 81       	ldd	r24, Y+4	; 0x04
 79a:	9d 81       	ldd	r25, Y+5	; 0x05
 79c:	dc 01       	movw	r26, r24
 79e:	13 96       	adiw	r26, 0x03	; 3
 7a0:	7c 93       	st	X, r23
 7a2:	6e 93       	st	-X, r22
 7a4:	12 97       	sbiw	r26, 0x02	; 2
 7a6:	7d 83       	std	Y+5, r23	; 0x05
 7a8:	6c 83       	std	Y+4, r22	; 0x04
 7aa:	31 87       	std	Z+9, r19	; 0x09
 7ac:	20 87       	std	Z+8, r18	; 0x08
 7ae:	f9 01       	movw	r30, r18
 7b0:	80 81       	ld	r24, Z
 7b2:	8f 5f       	subi	r24, 0xFF	; 255
 7b4:	80 83       	st	Z, r24
 7b6:	df 91       	pop	r29
 7b8:	cf 91       	pop	r28
 7ba:	08 95       	ret

000007bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 7bc:	cf 93       	push	r28
 7be:	df 93       	push	r29
 7c0:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 7c2:	a0 85       	ldd	r26, Z+8	; 0x08
 7c4:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 7c6:	c2 81       	ldd	r28, Z+2	; 0x02
 7c8:	d3 81       	ldd	r29, Z+3	; 0x03
 7ca:	84 81       	ldd	r24, Z+4	; 0x04
 7cc:	95 81       	ldd	r25, Z+5	; 0x05
 7ce:	9d 83       	std	Y+5, r25	; 0x05
 7d0:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 7d2:	c4 81       	ldd	r28, Z+4	; 0x04
 7d4:	d5 81       	ldd	r29, Z+5	; 0x05
 7d6:	82 81       	ldd	r24, Z+2	; 0x02
 7d8:	93 81       	ldd	r25, Z+3	; 0x03
 7da:	9b 83       	std	Y+3, r25	; 0x03
 7dc:	8a 83       	std	Y+2, r24	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 7de:	11 96       	adiw	r26, 0x01	; 1
 7e0:	8d 91       	ld	r24, X+
 7e2:	9c 91       	ld	r25, X
 7e4:	12 97       	sbiw	r26, 0x02	; 2
 7e6:	e8 17       	cp	r30, r24
 7e8:	f9 07       	cpc	r31, r25
 7ea:	31 f4       	brne	.+12     	; 0x7f8 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 7ec:	84 81       	ldd	r24, Z+4	; 0x04
 7ee:	95 81       	ldd	r25, Z+5	; 0x05
 7f0:	12 96       	adiw	r26, 0x02	; 2
 7f2:	9c 93       	st	X, r25
 7f4:	8e 93       	st	-X, r24
 7f6:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 7f8:	11 86       	std	Z+9, r1	; 0x09
 7fa:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
 7fc:	8c 91       	ld	r24, X
 7fe:	81 50       	subi	r24, 0x01	; 1
 800:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
}
 802:	df 91       	pop	r29
 804:	cf 91       	pop	r28
 806:	08 95       	ret

00000808 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
 808:	0f 92       	push	r0
 80a:	0f b6       	in	r0, 0x3f	; 63
 80c:	f8 94       	cli
 80e:	0f 92       	push	r0
 810:	1f 92       	push	r1
 812:	11 24       	eor	r1, r1
 814:	2f 92       	push	r2
 816:	3f 92       	push	r3
 818:	4f 92       	push	r4
 81a:	5f 92       	push	r5
 81c:	6f 92       	push	r6
 81e:	7f 92       	push	r7
 820:	8f 92       	push	r8
 822:	9f 92       	push	r9
 824:	af 92       	push	r10
 826:	bf 92       	push	r11
 828:	cf 92       	push	r12
 82a:	df 92       	push	r13
 82c:	ef 92       	push	r14
 82e:	ff 92       	push	r15
 830:	0f 93       	push	r16
 832:	1f 93       	push	r17
 834:	2f 93       	push	r18
 836:	3f 93       	push	r19
 838:	4f 93       	push	r20
 83a:	5f 93       	push	r21
 83c:	6f 93       	push	r22
 83e:	7f 93       	push	r23
 840:	8f 93       	push	r24
 842:	9f 93       	push	r25
 844:	af 93       	push	r26
 846:	bf 93       	push	r27
 848:	cf 93       	push	r28
 84a:	df 93       	push	r29
 84c:	ef 93       	push	r30
 84e:	ff 93       	push	r31
 850:	a0 91 da 00 	lds	r26, 0x00DA	; 0x8000da <pxCurrentTCB>
 854:	b0 91 db 00 	lds	r27, 0x00DB	; 0x8000db <pxCurrentTCB+0x1>
 858:	0d b6       	in	r0, 0x3d	; 61
 85a:	0d 92       	st	X+, r0
 85c:	0e b6       	in	r0, 0x3e	; 62
 85e:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
 860:	0e 94 82 04 	call	0x904	; 0x904 <xTaskIncrementTick>
 864:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
 866:	0e 94 3d 05 	call	0xa7a	; 0xa7a <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
 86a:	a0 91 da 00 	lds	r26, 0x00DA	; 0x8000da <pxCurrentTCB>
 86e:	b0 91 db 00 	lds	r27, 0x00DB	; 0x8000db <pxCurrentTCB+0x1>
 872:	cd 91       	ld	r28, X+
 874:	cd bf       	out	0x3d, r28	; 61
 876:	dd 91       	ld	r29, X+
 878:	de bf       	out	0x3e, r29	; 62
 87a:	ff 91       	pop	r31
 87c:	ef 91       	pop	r30
 87e:	df 91       	pop	r29
 880:	cf 91       	pop	r28
 882:	bf 91       	pop	r27
 884:	af 91       	pop	r26
 886:	9f 91       	pop	r25
 888:	8f 91       	pop	r24
 88a:	7f 91       	pop	r23
 88c:	6f 91       	pop	r22
 88e:	5f 91       	pop	r21
 890:	4f 91       	pop	r20
 892:	3f 91       	pop	r19
 894:	2f 91       	pop	r18
 896:	1f 91       	pop	r17
 898:	0f 91       	pop	r16
 89a:	ff 90       	pop	r15
 89c:	ef 90       	pop	r14
 89e:	df 90       	pop	r13
 8a0:	cf 90       	pop	r12
 8a2:	bf 90       	pop	r11
 8a4:	af 90       	pop	r10
 8a6:	9f 90       	pop	r9
 8a8:	8f 90       	pop	r8
 8aa:	7f 90       	pop	r7
 8ac:	6f 90       	pop	r6
 8ae:	5f 90       	pop	r5
 8b0:	4f 90       	pop	r4
 8b2:	3f 90       	pop	r3
 8b4:	2f 90       	pop	r2
 8b6:	1f 90       	pop	r1
 8b8:	0f 90       	pop	r0
 8ba:	0f be       	out	0x3f, r0	; 63
 8bc:	0f 90       	pop	r0

	asm volatile ( "ret" );
 8be:	08 95       	ret

000008c0 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
 8c0:	0e 94 04 04 	call	0x808	; 0x808 <vPortYieldFromTick>
		asm volatile ( "reti" );
 8c4:	18 95       	reti

000008c6 <prvResetNextTaskUnblockTime>:
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8c6:	e0 91 c6 00 	lds	r30, 0x00C6	; 0x8000c6 <pxDelayedTaskList>
 8ca:	f0 91 c7 00 	lds	r31, 0x00C7	; 0x8000c7 <pxDelayedTaskList+0x1>
 8ce:	80 81       	ld	r24, Z
 8d0:	81 11       	cpse	r24, r1
 8d2:	07 c0       	rjmp	.+14     	; 0x8e2 <prvResetNextTaskUnblockTime+0x1c>
 8d4:	8f ef       	ldi	r24, 0xFF	; 255
 8d6:	9f ef       	ldi	r25, 0xFF	; 255
 8d8:	90 93 bd 00 	sts	0x00BD, r25	; 0x8000bd <xNextTaskUnblockTime+0x1>
 8dc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <xNextTaskUnblockTime>
 8e0:	08 95       	ret
 8e2:	e0 91 c6 00 	lds	r30, 0x00C6	; 0x8000c6 <pxDelayedTaskList>
 8e6:	f0 91 c7 00 	lds	r31, 0x00C7	; 0x8000c7 <pxDelayedTaskList+0x1>
 8ea:	05 80       	ldd	r0, Z+5	; 0x05
 8ec:	f6 81       	ldd	r31, Z+6	; 0x06
 8ee:	e0 2d       	mov	r30, r0
 8f0:	06 80       	ldd	r0, Z+6	; 0x06
 8f2:	f7 81       	ldd	r31, Z+7	; 0x07
 8f4:	e0 2d       	mov	r30, r0
 8f6:	82 81       	ldd	r24, Z+2	; 0x02
 8f8:	93 81       	ldd	r25, Z+3	; 0x03
 8fa:	90 93 bd 00 	sts	0x00BD, r25	; 0x8000bd <xNextTaskUnblockTime+0x1>
 8fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <xNextTaskUnblockTime>
 902:	08 95       	ret

00000904 <xTaskIncrementTick>:
 904:	cf 92       	push	r12
 906:	df 92       	push	r13
 908:	ef 92       	push	r14
 90a:	ff 92       	push	r15
 90c:	0f 93       	push	r16
 90e:	1f 93       	push	r17
 910:	cf 93       	push	r28
 912:	df 93       	push	r29
 914:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <uxSchedulerSuspended>
 918:	81 11       	cpse	r24, r1
 91a:	99 c0       	rjmp	.+306    	; 0xa4e <xTaskIncrementTick+0x14a>
 91c:	e0 90 c2 00 	lds	r14, 0x00C2	; 0x8000c2 <xTickCount>
 920:	f0 90 c3 00 	lds	r15, 0x00C3	; 0x8000c3 <xTickCount+0x1>
 924:	8f ef       	ldi	r24, 0xFF	; 255
 926:	e8 1a       	sub	r14, r24
 928:	f8 0a       	sbc	r15, r24
 92a:	f0 92 c3 00 	sts	0x00C3, r15	; 0x8000c3 <xTickCount+0x1>
 92e:	e0 92 c2 00 	sts	0x00C2, r14	; 0x8000c2 <xTickCount>
 932:	e1 14       	cp	r14, r1
 934:	f1 04       	cpc	r15, r1
 936:	b9 f4       	brne	.+46     	; 0x966 <xTaskIncrementTick+0x62>
 938:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <pxDelayedTaskList>
 93c:	90 91 c7 00 	lds	r25, 0x00C7	; 0x8000c7 <pxDelayedTaskList+0x1>
 940:	20 91 c4 00 	lds	r18, 0x00C4	; 0x8000c4 <pxOverflowDelayedTaskList>
 944:	30 91 c5 00 	lds	r19, 0x00C5	; 0x8000c5 <pxOverflowDelayedTaskList+0x1>
 948:	30 93 c7 00 	sts	0x00C7, r19	; 0x8000c7 <pxDelayedTaskList+0x1>
 94c:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <pxDelayedTaskList>
 950:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <pxOverflowDelayedTaskList+0x1>
 954:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <pxOverflowDelayedTaskList>
 958:	80 91 be 00 	lds	r24, 0x00BE	; 0x8000be <xNumOfOverflows>
 95c:	8f 5f       	subi	r24, 0xFF	; 255
 95e:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <xNumOfOverflows>
 962:	0e 94 63 04 	call	0x8c6	; 0x8c6 <prvResetNextTaskUnblockTime>
 966:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <xNextTaskUnblockTime>
 96a:	90 91 bd 00 	lds	r25, 0x00BD	; 0x8000bd <xNextTaskUnblockTime+0x1>
 96e:	e8 16       	cp	r14, r24
 970:	f9 06       	cpc	r15, r25
 972:	10 f4       	brcc	.+4      	; 0x978 <xTaskIncrementTick+0x74>
 974:	d1 2c       	mov	r13, r1
 976:	53 c0       	rjmp	.+166    	; 0xa1e <xTaskIncrementTick+0x11a>
 978:	d1 2c       	mov	r13, r1
 97a:	cc 24       	eor	r12, r12
 97c:	c3 94       	inc	r12
 97e:	e0 91 c6 00 	lds	r30, 0x00C6	; 0x8000c6 <pxDelayedTaskList>
 982:	f0 91 c7 00 	lds	r31, 0x00C7	; 0x8000c7 <pxDelayedTaskList+0x1>
 986:	80 81       	ld	r24, Z
 988:	81 11       	cpse	r24, r1
 98a:	07 c0       	rjmp	.+14     	; 0x99a <xTaskIncrementTick+0x96>
 98c:	8f ef       	ldi	r24, 0xFF	; 255
 98e:	9f ef       	ldi	r25, 0xFF	; 255
 990:	90 93 bd 00 	sts	0x00BD, r25	; 0x8000bd <xNextTaskUnblockTime+0x1>
 994:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <xNextTaskUnblockTime>
 998:	42 c0       	rjmp	.+132    	; 0xa1e <xTaskIncrementTick+0x11a>
 99a:	e0 91 c6 00 	lds	r30, 0x00C6	; 0x8000c6 <pxDelayedTaskList>
 99e:	f0 91 c7 00 	lds	r31, 0x00C7	; 0x8000c7 <pxDelayedTaskList+0x1>
 9a2:	05 80       	ldd	r0, Z+5	; 0x05
 9a4:	f6 81       	ldd	r31, Z+6	; 0x06
 9a6:	e0 2d       	mov	r30, r0
 9a8:	c6 81       	ldd	r28, Z+6	; 0x06
 9aa:	d7 81       	ldd	r29, Z+7	; 0x07
 9ac:	8a 81       	ldd	r24, Y+2	; 0x02
 9ae:	9b 81       	ldd	r25, Y+3	; 0x03
 9b0:	e8 16       	cp	r14, r24
 9b2:	f9 06       	cpc	r15, r25
 9b4:	28 f4       	brcc	.+10     	; 0x9c0 <xTaskIncrementTick+0xbc>
 9b6:	90 93 bd 00 	sts	0x00BD, r25	; 0x8000bd <xNextTaskUnblockTime+0x1>
 9ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <xNextTaskUnblockTime>
 9be:	2f c0       	rjmp	.+94     	; 0xa1e <xTaskIncrementTick+0x11a>
 9c0:	8e 01       	movw	r16, r28
 9c2:	0e 5f       	subi	r16, 0xFE	; 254
 9c4:	1f 4f       	sbci	r17, 0xFF	; 255
 9c6:	c8 01       	movw	r24, r16
 9c8:	0e 94 de 03 	call	0x7bc	; 0x7bc <uxListRemove>
 9cc:	8c 89       	ldd	r24, Y+20	; 0x14
 9ce:	9d 89       	ldd	r25, Y+21	; 0x15
 9d0:	89 2b       	or	r24, r25
 9d2:	21 f0       	breq	.+8      	; 0x9dc <xTaskIncrementTick+0xd8>
 9d4:	ce 01       	movw	r24, r28
 9d6:	0c 96       	adiw	r24, 0x0c	; 12
 9d8:	0e 94 de 03 	call	0x7bc	; 0x7bc <uxListRemove>
 9dc:	8e 89       	ldd	r24, Y+22	; 0x16
 9de:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <uxTopReadyPriority>
 9e2:	98 17       	cp	r25, r24
 9e4:	10 f4       	brcc	.+4      	; 0x9ea <xTaskIncrementTick+0xe6>
 9e6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <uxTopReadyPriority>
 9ea:	90 e0       	ldi	r25, 0x00	; 0
 9ec:	9c 01       	movw	r18, r24
 9ee:	22 0f       	add	r18, r18
 9f0:	33 1f       	adc	r19, r19
 9f2:	22 0f       	add	r18, r18
 9f4:	33 1f       	adc	r19, r19
 9f6:	22 0f       	add	r18, r18
 9f8:	33 1f       	adc	r19, r19
 9fa:	82 0f       	add	r24, r18
 9fc:	93 1f       	adc	r25, r19
 9fe:	b8 01       	movw	r22, r16
 a00:	88 53       	subi	r24, 0x38	; 56
 a02:	9f 4f       	sbci	r25, 0xFF	; 255
 a04:	0e 94 bd 03 	call	0x77a	; 0x77a <vListInsertEnd>
 a08:	e0 91 da 00 	lds	r30, 0x00DA	; 0x8000da <pxCurrentTCB>
 a0c:	f0 91 db 00 	lds	r31, 0x00DB	; 0x8000db <pxCurrentTCB+0x1>
 a10:	9e 89       	ldd	r25, Y+22	; 0x16
 a12:	86 89       	ldd	r24, Z+22	; 0x16
 a14:	98 17       	cp	r25, r24
 a16:	08 f4       	brcc	.+2      	; 0xa1a <xTaskIncrementTick+0x116>
 a18:	b2 cf       	rjmp	.-156    	; 0x97e <xTaskIncrementTick+0x7a>
 a1a:	dc 2c       	mov	r13, r12
 a1c:	b0 cf       	rjmp	.-160    	; 0x97e <xTaskIncrementTick+0x7a>
 a1e:	e0 91 da 00 	lds	r30, 0x00DA	; 0x8000da <pxCurrentTCB>
 a22:	f0 91 db 00 	lds	r31, 0x00DB	; 0x8000db <pxCurrentTCB+0x1>
 a26:	86 89       	ldd	r24, Z+22	; 0x16
 a28:	90 e0       	ldi	r25, 0x00	; 0
 a2a:	fc 01       	movw	r30, r24
 a2c:	ee 0f       	add	r30, r30
 a2e:	ff 1f       	adc	r31, r31
 a30:	ee 0f       	add	r30, r30
 a32:	ff 1f       	adc	r31, r31
 a34:	ee 0f       	add	r30, r30
 a36:	ff 1f       	adc	r31, r31
 a38:	8e 0f       	add	r24, r30
 a3a:	9f 1f       	adc	r25, r31
 a3c:	fc 01       	movw	r30, r24
 a3e:	e8 53       	subi	r30, 0x38	; 56
 a40:	ff 4f       	sbci	r31, 0xFF	; 255
 a42:	80 81       	ld	r24, Z
 a44:	82 30       	cpi	r24, 0x02	; 2
 a46:	48 f0       	brcs	.+18     	; 0xa5a <xTaskIncrementTick+0x156>
 a48:	dd 24       	eor	r13, r13
 a4a:	d3 94       	inc	r13
 a4c:	06 c0       	rjmp	.+12     	; 0xa5a <xTaskIncrementTick+0x156>
 a4e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <uxPendedTicks>
 a52:	8f 5f       	subi	r24, 0xFF	; 255
 a54:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <uxPendedTicks>
 a58:	d1 2c       	mov	r13, r1
 a5a:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <xYieldPending>
 a5e:	88 23       	and	r24, r24
 a60:	11 f0       	breq	.+4      	; 0xa66 <xTaskIncrementTick+0x162>
 a62:	dd 24       	eor	r13, r13
 a64:	d3 94       	inc	r13
 a66:	8d 2d       	mov	r24, r13
 a68:	df 91       	pop	r29
 a6a:	cf 91       	pop	r28
 a6c:	1f 91       	pop	r17
 a6e:	0f 91       	pop	r16
 a70:	ff 90       	pop	r15
 a72:	ef 90       	pop	r14
 a74:	df 90       	pop	r13
 a76:	cf 90       	pop	r12
 a78:	08 95       	ret

00000a7a <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 a7a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <uxSchedulerSuspended>
 a7e:	88 23       	and	r24, r24
 a80:	21 f0       	breq	.+8      	; 0xa8a <vTaskSwitchContext+0x10>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 a82:	81 e0       	ldi	r24, 0x01	; 1
 a84:	80 93 bf 00 	sts	0x00BF, r24	; 0x8000bf <xYieldPending>
 a88:	08 95       	ret
	}
	else
	{
		xYieldPending = pdFALSE;
 a8a:	10 92 bf 00 	sts	0x00BF, r1	; 0x8000bf <xYieldPending>
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 a8e:	20 91 c1 00 	lds	r18, 0x00C1	; 0x8000c1 <uxTopReadyPriority>
 a92:	82 2f       	mov	r24, r18
 a94:	90 e0       	ldi	r25, 0x00	; 0
 a96:	fc 01       	movw	r30, r24
 a98:	ee 0f       	add	r30, r30
 a9a:	ff 1f       	adc	r31, r31
 a9c:	ee 0f       	add	r30, r30
 a9e:	ff 1f       	adc	r31, r31
 aa0:	ee 0f       	add	r30, r30
 aa2:	ff 1f       	adc	r31, r31
 aa4:	e8 0f       	add	r30, r24
 aa6:	f9 1f       	adc	r31, r25
 aa8:	e8 53       	subi	r30, 0x38	; 56
 aaa:	ff 4f       	sbci	r31, 0xFF	; 255
 aac:	30 81       	ld	r19, Z
 aae:	31 11       	cpse	r19, r1
 ab0:	11 c0       	rjmp	.+34     	; 0xad4 <vTaskSwitchContext+0x5a>
 ab2:	21 50       	subi	r18, 0x01	; 1
 ab4:	82 2f       	mov	r24, r18
 ab6:	90 e0       	ldi	r25, 0x00	; 0
 ab8:	fc 01       	movw	r30, r24
 aba:	ee 0f       	add	r30, r30
 abc:	ff 1f       	adc	r31, r31
 abe:	ee 0f       	add	r30, r30
 ac0:	ff 1f       	adc	r31, r31
 ac2:	ee 0f       	add	r30, r30
 ac4:	ff 1f       	adc	r31, r31
 ac6:	e8 0f       	add	r30, r24
 ac8:	f9 1f       	adc	r31, r25
 aca:	e8 53       	subi	r30, 0x38	; 56
 acc:	ff 4f       	sbci	r31, 0xFF	; 255
 ace:	30 81       	ld	r19, Z
 ad0:	33 23       	and	r19, r19
 ad2:	79 f3       	breq	.-34     	; 0xab2 <vTaskSwitchContext+0x38>
 ad4:	ac 01       	movw	r20, r24
 ad6:	44 0f       	add	r20, r20
 ad8:	55 1f       	adc	r21, r21
 ada:	44 0f       	add	r20, r20
 adc:	55 1f       	adc	r21, r21
 ade:	44 0f       	add	r20, r20
 ae0:	55 1f       	adc	r21, r21
 ae2:	48 0f       	add	r20, r24
 ae4:	59 1f       	adc	r21, r25
 ae6:	da 01       	movw	r26, r20
 ae8:	a8 53       	subi	r26, 0x38	; 56
 aea:	bf 4f       	sbci	r27, 0xFF	; 255
 aec:	11 96       	adiw	r26, 0x01	; 1
 aee:	ed 91       	ld	r30, X+
 af0:	fc 91       	ld	r31, X
 af2:	12 97       	sbiw	r26, 0x02	; 2
 af4:	02 80       	ldd	r0, Z+2	; 0x02
 af6:	f3 81       	ldd	r31, Z+3	; 0x03
 af8:	e0 2d       	mov	r30, r0
 afa:	12 96       	adiw	r26, 0x02	; 2
 afc:	fc 93       	st	X, r31
 afe:	ee 93       	st	-X, r30
 b00:	11 97       	sbiw	r26, 0x01	; 1
 b02:	45 53       	subi	r20, 0x35	; 53
 b04:	5f 4f       	sbci	r21, 0xFF	; 255
 b06:	e4 17       	cp	r30, r20
 b08:	f5 07       	cpc	r31, r21
 b0a:	29 f4       	brne	.+10     	; 0xb16 <vTaskSwitchContext+0x9c>
 b0c:	42 81       	ldd	r20, Z+2	; 0x02
 b0e:	53 81       	ldd	r21, Z+3	; 0x03
 b10:	fd 01       	movw	r30, r26
 b12:	52 83       	std	Z+2, r21	; 0x02
 b14:	41 83       	std	Z+1, r20	; 0x01
 b16:	fc 01       	movw	r30, r24
 b18:	ee 0f       	add	r30, r30
 b1a:	ff 1f       	adc	r31, r31
 b1c:	ee 0f       	add	r30, r30
 b1e:	ff 1f       	adc	r31, r31
 b20:	ee 0f       	add	r30, r30
 b22:	ff 1f       	adc	r31, r31
 b24:	8e 0f       	add	r24, r30
 b26:	9f 1f       	adc	r25, r31
 b28:	fc 01       	movw	r30, r24
 b2a:	e8 53       	subi	r30, 0x38	; 56
 b2c:	ff 4f       	sbci	r31, 0xFF	; 255
 b2e:	01 80       	ldd	r0, Z+1	; 0x01
 b30:	f2 81       	ldd	r31, Z+2	; 0x02
 b32:	e0 2d       	mov	r30, r0
 b34:	86 81       	ldd	r24, Z+6	; 0x06
 b36:	97 81       	ldd	r25, Z+7	; 0x07
 b38:	90 93 db 00 	sts	0x00DB, r25	; 0x8000db <pxCurrentTCB+0x1>
 b3c:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <pxCurrentTCB>
 b40:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <uxTopReadyPriority>
 b44:	08 95       	ret

00000b46 <__udivmodsi4>:
 b46:	a1 e2       	ldi	r26, 0x21	; 33
 b48:	1a 2e       	mov	r1, r26
 b4a:	aa 1b       	sub	r26, r26
 b4c:	bb 1b       	sub	r27, r27
 b4e:	fd 01       	movw	r30, r26
 b50:	0d c0       	rjmp	.+26     	; 0xb6c <__udivmodsi4_ep>

00000b52 <__udivmodsi4_loop>:
 b52:	aa 1f       	adc	r26, r26
 b54:	bb 1f       	adc	r27, r27
 b56:	ee 1f       	adc	r30, r30
 b58:	ff 1f       	adc	r31, r31
 b5a:	a2 17       	cp	r26, r18
 b5c:	b3 07       	cpc	r27, r19
 b5e:	e4 07       	cpc	r30, r20
 b60:	f5 07       	cpc	r31, r21
 b62:	20 f0       	brcs	.+8      	; 0xb6c <__udivmodsi4_ep>
 b64:	a2 1b       	sub	r26, r18
 b66:	b3 0b       	sbc	r27, r19
 b68:	e4 0b       	sbc	r30, r20
 b6a:	f5 0b       	sbc	r31, r21

00000b6c <__udivmodsi4_ep>:
 b6c:	66 1f       	adc	r22, r22
 b6e:	77 1f       	adc	r23, r23
 b70:	88 1f       	adc	r24, r24
 b72:	99 1f       	adc	r25, r25
 b74:	1a 94       	dec	r1
 b76:	69 f7       	brne	.-38     	; 0xb52 <__udivmodsi4_loop>
 b78:	60 95       	com	r22
 b7a:	70 95       	com	r23
 b7c:	80 95       	com	r24
 b7e:	90 95       	com	r25
 b80:	9b 01       	movw	r18, r22
 b82:	ac 01       	movw	r20, r24
 b84:	bd 01       	movw	r22, r26
 b86:	cf 01       	movw	r24, r30
 b88:	08 95       	ret

00000b8a <__umulhisi3>:
 b8a:	a2 9f       	mul	r26, r18
 b8c:	b0 01       	movw	r22, r0
 b8e:	b3 9f       	mul	r27, r19
 b90:	c0 01       	movw	r24, r0
 b92:	a3 9f       	mul	r26, r19
 b94:	70 0d       	add	r23, r0
 b96:	81 1d       	adc	r24, r1
 b98:	11 24       	eor	r1, r1
 b9a:	91 1d       	adc	r25, r1
 b9c:	b2 9f       	mul	r27, r18
 b9e:	70 0d       	add	r23, r0
 ba0:	81 1d       	adc	r24, r1
 ba2:	11 24       	eor	r1, r1
 ba4:	91 1d       	adc	r25, r1
 ba6:	08 95       	ret

00000ba8 <__itoa_ncheck>:
 ba8:	bb 27       	eor	r27, r27
 baa:	4a 30       	cpi	r20, 0x0A	; 10
 bac:	31 f4       	brne	.+12     	; 0xbba <__itoa_ncheck+0x12>
 bae:	99 23       	and	r25, r25
 bb0:	22 f4       	brpl	.+8      	; 0xbba <__itoa_ncheck+0x12>
 bb2:	bd e2       	ldi	r27, 0x2D	; 45
 bb4:	90 95       	com	r25
 bb6:	81 95       	neg	r24
 bb8:	9f 4f       	sbci	r25, 0xFF	; 255
 bba:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <__utoa_common>

00000bbe <__utoa_ncheck>:
 bbe:	bb 27       	eor	r27, r27

00000bc0 <__utoa_common>:
 bc0:	fb 01       	movw	r30, r22
 bc2:	55 27       	eor	r21, r21
 bc4:	aa 27       	eor	r26, r26
 bc6:	88 0f       	add	r24, r24
 bc8:	99 1f       	adc	r25, r25
 bca:	aa 1f       	adc	r26, r26
 bcc:	a4 17       	cp	r26, r20
 bce:	10 f0       	brcs	.+4      	; 0xbd4 <__utoa_common+0x14>
 bd0:	a4 1b       	sub	r26, r20
 bd2:	83 95       	inc	r24
 bd4:	50 51       	subi	r21, 0x10	; 16
 bd6:	b9 f7       	brne	.-18     	; 0xbc6 <__utoa_common+0x6>
 bd8:	a0 5d       	subi	r26, 0xD0	; 208
 bda:	aa 33       	cpi	r26, 0x3A	; 58
 bdc:	08 f0       	brcs	.+2      	; 0xbe0 <__utoa_common+0x20>
 bde:	a9 5d       	subi	r26, 0xD9	; 217
 be0:	a1 93       	st	Z+, r26
 be2:	00 97       	sbiw	r24, 0x00	; 0
 be4:	79 f7       	brne	.-34     	; 0xbc4 <__utoa_common+0x4>
 be6:	b1 11       	cpse	r27, r1
 be8:	b1 93       	st	Z+, r27
 bea:	11 92       	st	Z+, r1
 bec:	cb 01       	movw	r24, r22
 bee:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <strrev>

00000bf2 <strrev>:
 bf2:	dc 01       	movw	r26, r24
 bf4:	fc 01       	movw	r30, r24
 bf6:	67 2f       	mov	r22, r23
 bf8:	71 91       	ld	r23, Z+
 bfa:	77 23       	and	r23, r23
 bfc:	e1 f7       	brne	.-8      	; 0xbf6 <strrev+0x4>
 bfe:	32 97       	sbiw	r30, 0x02	; 2
 c00:	04 c0       	rjmp	.+8      	; 0xc0a <strrev+0x18>
 c02:	7c 91       	ld	r23, X
 c04:	6d 93       	st	X+, r22
 c06:	70 83       	st	Z, r23
 c08:	62 91       	ld	r22, -Z
 c0a:	ae 17       	cp	r26, r30
 c0c:	bf 07       	cpc	r27, r31
 c0e:	c8 f3       	brcs	.-14     	; 0xc02 <strrev+0x10>
 c10:	08 95       	ret

00000c12 <_exit>:
 c12:	f8 94       	cli

00000c14 <__stop_program>:
 c14:	ff cf       	rjmp	.-2      	; 0xc14 <__stop_program>
