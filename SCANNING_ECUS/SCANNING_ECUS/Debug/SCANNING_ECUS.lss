
SCANNING_ECUS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000076a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  0000076a  000007fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000005a  00800064  00800064  00000802  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000802  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000834  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c8  00000000  00000000  00000870  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003c04  00000000  00000000  00000b38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010e8  00000000  00000000  0000473c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001cdb  00000000  00000000  00005824  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000824  00000000  00000000  00007500  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001584  00000000  00000000  00007d24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002c43  00000000  00000000  000092a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002b8  00000000  00000000  0000beeb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 01 	jmp	0x268	; 0x268 <__vector_1>
   8:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 06 01 	jmp	0x20c	; 0x20c <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e6       	ldi	r30, 0x6A	; 106
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 3b       	cpi	r26, 0xBE	; 190
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ca 01 	call	0x394	; 0x394 <main>
  8a:	0c 94 b3 03 	jmp	0x766	; 0x766 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <hal_spiInit>:

static void (*spi_interrupt_handler)(void);

spi_error_t hal_spiInit(str_spi_objectInfo_t *strg_obj,spi_driver_base_t driver_base,spi_sck_freq_select_t	freq_select,
						spi_operating_mode_t mode,spi_notifcs_mode_t notfics_mode,spi_transfer_modes_t transfer_mode,spi_data_order_t data_order)
{
  92:	cf 92       	push	r12
  94:	df 92       	push	r13
  96:	ef 92       	push	r14
  98:	0f 93       	push	r16
  9a:	fc 01       	movw	r30, r24
	     (mode == SLAVE_EN || mode == MASTER_EN) && (notfics_mode == SPI_POLLING || notfics_mode == SPI_INTERRUPTING) &&
		 ((transfer_mode >= MODE_1) && (transfer_mode <= MODE_4) ) && ((data_order == LSB_FIRST)||(data_order == MSB_FIRST)) 
	  )
	{
#endif
		cli();//to finish the driver initializations first
  9c:	f8 94       	cli
		//storing data 
		strg_obj->driver_base_obj	=driver_base;
  9e:	60 83       	st	Z, r22
		strg_obj->driver_state_obj	=DRIVER_INITIATED;
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	86 83       	std	Z+6, r24	; 0x06
		strg_obj->freq_select_obj	=freq_select;
  a4:	41 83       	std	Z+1, r20	; 0x01
		strg_obj->mode_obj			=mode;
  a6:	22 83       	std	Z+2, r18	; 0x02
		strg_obj->transfer_mode_obj	=transfer_mode;
  a8:	e4 82       	std	Z+4, r14	; 0x04
		strg_obj->notfics_mode_obj	=notfics_mode;
  aa:	03 83       	std	Z+3, r16	; 0x03
		strg_obj->data_order_obj	=data_order;
  ac:	c5 82       	std	Z+5, r12	; 0x05
		
		//actual initialization
		//&
		//configuring the driver pins
		if (mode == MASTER_EN)
  ae:	21 30       	cpi	r18, 0x01	; 1
  b0:	19 f5       	brne	.+70     	; 0xf8 <hal_spiInit+0x66>
		{
			//again,this is according to the atmega32 mcu
			SET_BIT(DDRB,SPI_PIN_SS);
  b2:	bc 9a       	sbi	0x17, 4	; 23
			SET_BIT(DDRB,SPI_PIN_SCK);
  b4:	bf 9a       	sbi	0x17, 7	; 23
			SET_BIT(DDRB,SPI_PIN_MOSI);
  b6:	bd 9a       	sbi	0x17, 5	; 23
			CLEAR_BIT(DDRB,SPI_PIN_MISO);
  b8:	be 98       	cbi	0x17, 6	; 23
			//actual initialization
			*((volatile msa_u8 *)driver_base+CTRL_REG_OFFSET)	|= (freq_select & 0x03)|(transfer_mode<<CPHA)|(mode << MSTR);
  ba:	e6 2f       	mov	r30, r22
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	90 81       	ld	r25, Z
  c0:	8e 2d       	mov	r24, r14
  c2:	88 0f       	add	r24, r24
  c4:	88 0f       	add	r24, r24
  c6:	80 61       	ori	r24, 0x10	; 16
  c8:	24 2f       	mov	r18, r20
  ca:	23 70       	andi	r18, 0x03	; 3
  cc:	82 2b       	or	r24, r18
  ce:	89 2b       	or	r24, r25
  d0:	80 83       	st	Z, r24
			*((volatile msa_u8 *)driver_base+CTRL_REG_OFFSET)	|= (ENABLE<<SPE)|(notfics_mode<<SPIE)|(data_order<<DORD);
  d2:	20 81       	ld	r18, Z
  d4:	30 e2       	ldi	r19, 0x20	; 32
  d6:	c3 9e       	mul	r12, r19
  d8:	c0 01       	movw	r24, r0
  da:	11 24       	eor	r1, r1
  dc:	80 64       	ori	r24, 0x40	; 64
  de:	90 e8       	ldi	r25, 0x80	; 128
  e0:	09 9f       	mul	r16, r25
  e2:	60 01       	movw	r12, r0
  e4:	11 24       	eor	r1, r1
  e6:	8c 29       	or	r24, r12
  e8:	82 2b       	or	r24, r18
  ea:	80 83       	st	Z, r24
			*((volatile msa_u8 *)driver_base+STATUS_REG_OFFSET) |= ( (freq_select&0xfcUL)>>2 );	//test the res is -4?? or worked well...>>edited and worked
  ec:	81 81       	ldd	r24, Z+1	; 0x01
  ee:	46 95       	lsr	r20
  f0:	46 95       	lsr	r20
  f2:	48 2b       	or	r20, r24
  f4:	41 83       	std	Z+1, r20	; 0x01
  f6:	0f c0       	rjmp	.+30     	; 0x116 <hal_spiInit+0x84>
			
		} 
		else //slave_en
		{
			//again,this is according to the atmega32 mcu
			CLEAR_BIT(DDRB,SPI_PIN_SS);
  f8:	bc 98       	cbi	0x17, 4	; 23
			CLEAR_BIT(DDRB,SPI_PIN_SCK);
  fa:	bf 98       	cbi	0x17, 7	; 23
			CLEAR_BIT(DDRB,SPI_PIN_MOSI);
  fc:	bd 98       	cbi	0x17, 5	; 23
			SET_BIT  (DDRB,SPI_PIN_MISO);
  fe:	be 9a       	sbi	0x17, 6	; 23
			//actual initialization
			*((volatile msa_u8 *)driver_base+CTRL_REG_OFFSET)	|= (ENABLE<<SPE)|(notfics_mode<<SPIE);
 100:	e6 2f       	mov	r30, r22
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	90 81       	ld	r25, Z
 106:	80 e8       	ldi	r24, 0x80	; 128
 108:	08 9f       	mul	r16, r24
 10a:	90 01       	movw	r18, r0
 10c:	11 24       	eor	r1, r1
 10e:	82 2f       	mov	r24, r18
 110:	80 64       	ori	r24, 0x40	; 64
 112:	89 2b       	or	r24, r25
 114:	80 83       	st	Z, r24
			
		}
		if (notfics_mode == SPI_INTERRUPTING) //re-edit not to override the interrupt status,or the condition with the previous interrupt status
 116:	01 30       	cpi	r16, 0x01	; 1
 118:	09 f4       	brne	.+2      	; 0x11c <hal_spiInit+0x8a>
		{
			sei();
 11a:	78 94       	sei
	{
		ret_val=INVALID_SPI_PARAMS;
	}
#endif
	return ret_val;
}
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	0f 91       	pop	r16
 120:	ef 90       	pop	r14
 122:	df 90       	pop	r13
 124:	cf 90       	pop	r12
 126:	08 95       	ret

00000128 <usart_init>:
	}
#endif
	return ret_val;
	
	
}
 128:	cf 92       	push	r12
 12a:	ef 92       	push	r14
 12c:	0f 93       	push	r16
 12e:	fc 01       	movw	r30, r24
 130:	e1 10       	cpse	r14, r1
 132:	0c c0       	rjmp	.+24     	; 0x14c <usart_init+0x24>
 134:	f8 94       	cli
 136:	61 30       	cpi	r22, 0x01	; 1
 138:	11 f4       	brne	.+4      	; 0x13e <usart_init+0x16>
 13a:	55 9a       	sbi	0x0a, 5	; 10
 13c:	07 c0       	rjmp	.+14     	; 0x14c <usart_init+0x24>
 13e:	62 30       	cpi	r22, 0x02	; 2
 140:	11 f4       	brne	.+4      	; 0x146 <usart_init+0x1e>
 142:	57 9a       	sbi	0x0a, 7	; 10
 144:	03 c0       	rjmp	.+6      	; 0x14c <usart_init+0x24>
 146:	8a b1       	in	r24, 0x0a	; 10
 148:	80 6a       	ori	r24, 0xA0	; 160
 14a:	8a b9       	out	0x0a, r24	; 10
 14c:	03 83       	std	Z+3, r16	; 0x03
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	85 83       	std	Z+5, r24	; 0x05
 152:	e4 82       	std	Z+4, r14	; 0x04
 154:	61 83       	std	Z+1, r22	; 0x01
 156:	22 83       	std	Z+2, r18	; 0x02
 158:	40 83       	st	Z, r20
 15a:	9a b1       	in	r25, 0x0a	; 10
 15c:	80 2f       	mov	r24, r16
 15e:	84 70       	andi	r24, 0x04	; 4
 160:	88 0f       	add	r24, r24
 162:	88 0f       	add	r24, r24
 164:	89 2b       	or	r24, r25
 166:	66 0f       	add	r22, r22
 168:	66 0f       	add	r22, r22
 16a:	66 0f       	add	r22, r22
 16c:	68 2b       	or	r22, r24
 16e:	6a b9       	out	0x0a, r22	; 10
 170:	44 0f       	add	r20, r20
 172:	44 0f       	add	r20, r20
 174:	44 0f       	add	r20, r20
 176:	8c 2d       	mov	r24, r12
 178:	80 68       	ori	r24, 0x80	; 128
 17a:	c4 2e       	mov	r12, r20
 17c:	c8 2a       	or	r12, r24
 17e:	80 e1       	ldi	r24, 0x10	; 16
 180:	28 9f       	mul	r18, r24
 182:	90 01       	movw	r18, r0
 184:	11 24       	eor	r1, r1
 186:	2c 29       	or	r18, r12
 188:	03 70       	andi	r16, 0x03	; 3
 18a:	00 0f       	add	r16, r16
 18c:	20 2b       	or	r18, r16
 18e:	20 bd       	out	0x20, r18	; 32
 190:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <UBRR_VAL>
 194:	89 b9       	out	0x09, r24	; 9
 196:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <UBRR_VAL+0x1>
 19a:	8f 77       	andi	r24, 0x7F	; 127
 19c:	80 bd       	out	0x20, r24	; 32
 19e:	e1 10       	cpse	r14, r1
 1a0:	01 c0       	rjmp	.+2      	; 0x1a4 <usart_init+0x7c>
 1a2:	78 94       	sei
 1a4:	85 e1       	ldi	r24, 0x15	; 21
 1a6:	0f 91       	pop	r16
 1a8:	ef 90       	pop	r14
 1aa:	cf 90       	pop	r12
 1ac:	08 95       	ret

000001ae <usart_set_isr_RXC_callback>:
 1ae:	70 93 65 00 	sts	0x0065, r23	; 0x800065 <__data_end+0x1>
 1b2:	60 93 64 00 	sts	0x0064, r22	; 0x800064 <__data_end>
 1b6:	85 e1       	ldi	r24, 0x15	; 21
 1b8:	08 95       	ret

000001ba <__vector_13>:
//TEST LATER THE FUNCTION
ISR(USART_RXC_vect)
{
 1ba:	1f 92       	push	r1
 1bc:	0f 92       	push	r0
 1be:	0f b6       	in	r0, 0x3f	; 63
 1c0:	0f 92       	push	r0
 1c2:	11 24       	eor	r1, r1
 1c4:	2f 93       	push	r18
 1c6:	3f 93       	push	r19
 1c8:	4f 93       	push	r20
 1ca:	5f 93       	push	r21
 1cc:	6f 93       	push	r22
 1ce:	7f 93       	push	r23
 1d0:	8f 93       	push	r24
 1d2:	9f 93       	push	r25
 1d4:	af 93       	push	r26
 1d6:	bf 93       	push	r27
 1d8:	ef 93       	push	r30
 1da:	ff 93       	push	r31
	if (vptr_RXC_cb)
 1dc:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <__data_end>
 1e0:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <__data_end+0x1>
 1e4:	30 97       	sbiw	r30, 0x00	; 0
 1e6:	09 f0       	breq	.+2      	; 0x1ea <__vector_13+0x30>
	{
		vptr_RXC_cb();
 1e8:	09 95       	icall
	}
		
}
 1ea:	ff 91       	pop	r31
 1ec:	ef 91       	pop	r30
 1ee:	bf 91       	pop	r27
 1f0:	af 91       	pop	r26
 1f2:	9f 91       	pop	r25
 1f4:	8f 91       	pop	r24
 1f6:	7f 91       	pop	r23
 1f8:	6f 91       	pop	r22
 1fa:	5f 91       	pop	r21
 1fc:	4f 91       	pop	r20
 1fe:	3f 91       	pop	r19
 200:	2f 91       	pop	r18
 202:	0f 90       	pop	r0
 204:	0f be       	out	0x3f, r0	; 63
 206:	0f 90       	pop	r0
 208:	1f 90       	pop	r1
 20a:	18 95       	reti

0000020c <__vector_11>:
	usart_send_arr(&uart_obj,arr_add2);
	
}

ISR(TIMER0_OVF_vect)
{
 20c:	1f 92       	push	r1
 20e:	0f 92       	push	r0
 210:	0f b6       	in	r0, 0x3f	; 63
 212:	0f 92       	push	r0
 214:	11 24       	eor	r1, r1
 216:	8f 93       	push	r24
 218:	9f 93       	push	r25
	OVF_CNTR_0++;
 21a:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <OVF_CNTR_0>
 21e:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <OVF_CNTR_0+0x1>
 222:	01 96       	adiw	r24, 0x01	; 1
 224:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <OVF_CNTR_0+0x1>
 228:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <OVF_CNTR_0>
}
 22c:	9f 91       	pop	r25
 22e:	8f 91       	pop	r24
 230:	0f 90       	pop	r0
 232:	0f be       	out	0x3f, r0	; 63
 234:	0f 90       	pop	r0
 236:	1f 90       	pop	r1
 238:	18 95       	reti

0000023a <__vector_5>:

ISR(TIMER2_OVF_vect)
{
 23a:	1f 92       	push	r1
 23c:	0f 92       	push	r0
 23e:	0f b6       	in	r0, 0x3f	; 63
 240:	0f 92       	push	r0
 242:	11 24       	eor	r1, r1
 244:	8f 93       	push	r24
 246:	9f 93       	push	r25
	OVF_CNTR_1++;
 248:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <OVF_CNTR_1>
 24c:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <OVF_CNTR_1+0x1>
 250:	01 96       	adiw	r24, 0x01	; 1
 252:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <OVF_CNTR_1+0x1>
 256:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <OVF_CNTR_1>
}
 25a:	9f 91       	pop	r25
 25c:	8f 91       	pop	r24
 25e:	0f 90       	pop	r0
 260:	0f be       	out	0x3f, r0	; 63
 262:	0f 90       	pop	r0
 264:	1f 90       	pop	r1
 266:	18 95       	reti

00000268 <__vector_1>:
 //later on if used this algo, notice if the val couldn't be read, dont move the servo this turn :D <3 


//interrupt service routine when there is a change in logic level for the USONIC_0
ISR(INT0_vect)
{
 268:	1f 92       	push	r1
 26a:	0f 92       	push	r0
 26c:	0f b6       	in	r0, 0x3f	; 63
 26e:	0f 92       	push	r0
 270:	11 24       	eor	r1, r1
 272:	8f 93       	push	r24
 274:	9f 93       	push	r25

	if (state0==1)//when logic from HIGH to LOW
 276:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <state0>
 27a:	81 30       	cpi	r24, 0x01	; 1
 27c:	71 f4       	brne	.+28     	; 0x29a <__vector_1+0x32>
	{

		TCCR0=0;//disabling counter
 27e:	13 be       	out	0x33, r1	; 51

		pulse0=TCNT0;//count memory is updated to integer
 280:	82 b7       	in	r24, 0x32	; 50
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <pulse0+0x1>
 288:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <pulse0>

		TCNT0=0;//resetting the counter memory
 28c:	12 be       	out	0x32, r1	; 50

		state0=0;
 28e:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <state0>
		ready_0=E_TRUE;
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <ready_0>
 298:	0a c0       	rjmp	.+20     	; 0x2ae <__vector_1+0x46>

	}
	else//when logic change from LOW to HIGH
	{

		TCCR0|=(1<<CS00);//enabling counter
 29a:	83 b7       	in	r24, 0x33	; 51
 29c:	81 60       	ori	r24, 0x01	; 1
 29e:	83 bf       	out	0x33, r24	; 51

		state0=1;
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <state0>
		OVF_CNTR_0=0;
 2a6:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <OVF_CNTR_0+0x1>
 2aa:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <OVF_CNTR_0>

	}

}
 2ae:	9f 91       	pop	r25
 2b0:	8f 91       	pop	r24
 2b2:	0f 90       	pop	r0
 2b4:	0f be       	out	0x3f, r0	; 63
 2b6:	0f 90       	pop	r0
 2b8:	1f 90       	pop	r1
 2ba:	18 95       	reti

000002bc <__vector_2>:

//interrupt service routine when there is a change in logic level for the USONIC_0
ISR(INT1_vect)
{
 2bc:	1f 92       	push	r1
 2be:	0f 92       	push	r0
 2c0:	0f b6       	in	r0, 0x3f	; 63
 2c2:	0f 92       	push	r0
 2c4:	11 24       	eor	r1, r1
 2c6:	8f 93       	push	r24
 2c8:	9f 93       	push	r25

	if (state1==1)//when logic from HIGH to LOW
 2ca:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <state1>
 2ce:	81 30       	cpi	r24, 0x01	; 1
 2d0:	79 f4       	brne	.+30     	; 0x2f0 <__vector_2+0x34>
	{

		TCCR2=0;//disabling counter
 2d2:	15 bc       	out	0x25, r1	; 37

		pulse1=TCNT2;//count memory is updated to integer
 2d4:	84 b5       	in	r24, 0x24	; 36
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <pulse1+0x1>
 2dc:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <pulse1>

		TCNT1=0;//resetting the counter memory
 2e0:	1d bc       	out	0x2d, r1	; 45
 2e2:	1c bc       	out	0x2c, r1	; 44

		state1=0;
 2e4:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <state1>
		ready_1=E_TRUE;
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <ready_1>
 2ee:	0a c0       	rjmp	.+20     	; 0x304 <__vector_2+0x48>

	}
	else//when logic change from LOW to HIGH
	{

		TCCR2|=(1<<CS20);//enabling counter
 2f0:	85 b5       	in	r24, 0x25	; 37
 2f2:	81 60       	ori	r24, 0x01	; 1
 2f4:	85 bd       	out	0x25, r24	; 37

		state1=1;
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <state1>
		OVF_CNTR_1=0;
 2fc:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <OVF_CNTR_1+0x1>
 300:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <OVF_CNTR_1>

	}

 304:	9f 91       	pop	r25
 306:	8f 91       	pop	r24
 308:	0f 90       	pop	r0
 30a:	0f be       	out	0x3f, r0	; 63
 30c:	0f 90       	pop	r0
 30e:	1f 90       	pop	r1
 310:	18 95       	reti

00000312 <usart_listen>:
}

//this will occur only if there is an emergency call from the tiva controller
void usart_listen(void)
{
	uart_data_got=UDR;
 312:	8c b1       	in	r24, 0x0c	; 12
 314:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <uart_data_got>
 318:	08 95       	ret

0000031a <system_init>:
    }
}


void system_init(void)
{
 31a:	cf 92       	push	r12
 31c:	ef 92       	push	r14
 31e:	0f 93       	push	r16
	//spi init...try polling i.e wait 10 m s or the time the longest scanning task will take plus some
	//time then ask for the status if reading is done or not
	//try to make the delay decreases by time :D
	hal_spiInit(&spi_obj,SPI_1_base,FREQ_BY_4,SLAVE_EN,SPI_POLLING,MODE_1,MSB_FIRST);
 320:	c1 2c       	mov	r12, r1
 322:	e1 2c       	mov	r14, r1
 324:	00 e0       	ldi	r16, 0x00	; 0
 326:	20 e0       	ldi	r18, 0x00	; 0
 328:	40 e0       	ldi	r20, 0x00	; 0
 32a:	6d e2       	ldi	r22, 0x2D	; 45
 32c:	8c e9       	ldi	r24, 0x9C	; 156
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	0e 94 49 00 	call	0x92	; 0x92 <hal_spiInit>
	//uart init
	usart_init(&uart_obj,A_RECEIVER,ONE_STP_BIT,NO_PARITY,EIGHT,INTERRUPT_DRIVEN,FALLING_EDGE);
 334:	cc 24       	eor	r12, r12
 336:	c3 94       	inc	r12
 338:	03 e0       	ldi	r16, 0x03	; 3
 33a:	20 e0       	ldi	r18, 0x00	; 0
 33c:	40 e0       	ldi	r20, 0x00	; 0
 33e:	62 e0       	ldi	r22, 0x02	; 2
 340:	83 ea       	ldi	r24, 0xA3	; 163
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	0e 94 94 00 	call	0x128	; 0x128 <usart_init>
	usart_set_isr_RXC_callback(&uart_obj,usart_listen);
 348:	69 e8       	ldi	r22, 0x89	; 137
 34a:	71 e0       	ldi	r23, 0x01	; 1
 34c:	83 ea       	ldi	r24, 0xA3	; 163
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	0e 94 d7 00 	call	0x1ae	; 0x1ae <usart_set_isr_RXC_callback>
	//usonics_init
	//output the control/triggering pins
	SET_BIT(DDRC,0);
 354:	a0 9a       	sbi	0x14, 0	; 20
	SET_BIT(DDRC,1);
 356:	a1 9a       	sbi	0x14, 1	; 20
	//ultrasonic
	//setting the interrupt pins as an input
	CLEAR_BIT(DDRD,2);
 358:	8a 98       	cbi	0x11, 2	; 17
	CLEAR_BIT(DDRD,3);
 35a:	8b 98       	cbi	0x11, 3	; 17
	//enabling interrupt0 & interrupt1
	SET_BIT(GICR,INT0);
 35c:	8b b7       	in	r24, 0x3b	; 59
 35e:	80 64       	ori	r24, 0x40	; 64
 360:	8b bf       	out	0x3b, r24	; 59
	SET_BIT(GICR,INT1);
 362:	8b b7       	in	r24, 0x3b	; 59
 364:	80 68       	ori	r24, 0x80	; 128
 366:	8b bf       	out	0x3b, r24	; 59
	//setting interrupt triggering at any logic change for both interrupts
	SET_BIT(MCUCR,ISC00);
 368:	85 b7       	in	r24, 0x35	; 53
 36a:	81 60       	ori	r24, 0x01	; 1
 36c:	85 bf       	out	0x35, r24	; 53
	SET_BIT(MCUCR,ISC10);
 36e:	85 b7       	in	r24, 0x35	; 53
 370:	84 60       	ori	r24, 0x04	; 4
 372:	85 bf       	out	0x35, r24	; 53
	//enable the over flow interrupts for timer 2 & time
	SET_BIT(TIMSK,TOIE2);
 374:	89 b7       	in	r24, 0x39	; 57
 376:	80 64       	ori	r24, 0x40	; 64
 378:	89 bf       	out	0x39, r24	; 57
	SET_BIT(TIMSK,TOIE0);
 37a:	89 b7       	in	r24, 0x39	; 57
 37c:	81 60       	ori	r24, 0x01	; 1
 37e:	89 bf       	out	0x39, r24	; 57
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 380:	8f e3       	ldi	r24, 0x3F	; 63
 382:	9c e9       	ldi	r25, 0x9C	; 156
 384:	01 97       	sbiw	r24, 0x01	; 1
 386:	f1 f7       	brne	.-4      	; 0x384 <system_init+0x6a>
 388:	00 c0       	rjmp	.+0      	; 0x38a <system_init+0x70>
 38a:	00 00       	nop
	_delay_ms(20);
}
 38c:	0f 91       	pop	r16
 38e:	ef 90       	pop	r14
 390:	cf 90       	pop	r12
 392:	08 95       	ret

00000394 <main>:

volatile msa_u32 usonic0;
volatile msa_u32 usonic1;
int main(void)
{
	system_init();
 394:	0e 94 8d 01 	call	0x31a	; 0x31a <system_init>
 398:	ff cf       	rjmp	.-2      	; 0x398 <main+0x4>

0000039a <vListInsertEnd>:
	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
}
 39a:	cf 93       	push	r28
 39c:	df 93       	push	r29
 39e:	9c 01       	movw	r18, r24
 3a0:	fb 01       	movw	r30, r22
 3a2:	dc 01       	movw	r26, r24
 3a4:	11 96       	adiw	r26, 0x01	; 1
 3a6:	cd 91       	ld	r28, X+
 3a8:	dc 91       	ld	r29, X
 3aa:	12 97       	sbiw	r26, 0x02	; 2
 3ac:	d3 83       	std	Z+3, r29	; 0x03
 3ae:	c2 83       	std	Z+2, r28	; 0x02
 3b0:	8c 81       	ldd	r24, Y+4	; 0x04
 3b2:	9d 81       	ldd	r25, Y+5	; 0x05
 3b4:	95 83       	std	Z+5, r25	; 0x05
 3b6:	84 83       	std	Z+4, r24	; 0x04
 3b8:	8c 81       	ldd	r24, Y+4	; 0x04
 3ba:	9d 81       	ldd	r25, Y+5	; 0x05
 3bc:	dc 01       	movw	r26, r24
 3be:	13 96       	adiw	r26, 0x03	; 3
 3c0:	7c 93       	st	X, r23
 3c2:	6e 93       	st	-X, r22
 3c4:	12 97       	sbiw	r26, 0x02	; 2
 3c6:	7d 83       	std	Y+5, r23	; 0x05
 3c8:	6c 83       	std	Y+4, r22	; 0x04
 3ca:	31 87       	std	Z+9, r19	; 0x09
 3cc:	20 87       	std	Z+8, r18	; 0x08
 3ce:	f9 01       	movw	r30, r18
 3d0:	80 81       	ld	r24, Z
 3d2:	8f 5f       	subi	r24, 0xFF	; 255
 3d4:	80 83       	st	Z, r24
 3d6:	df 91       	pop	r29
 3d8:	cf 91       	pop	r28
 3da:	08 95       	ret

000003dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 3dc:	cf 93       	push	r28
 3de:	df 93       	push	r29
 3e0:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 3e2:	a0 85       	ldd	r26, Z+8	; 0x08
 3e4:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 3e6:	c2 81       	ldd	r28, Z+2	; 0x02
 3e8:	d3 81       	ldd	r29, Z+3	; 0x03
 3ea:	84 81       	ldd	r24, Z+4	; 0x04
 3ec:	95 81       	ldd	r25, Z+5	; 0x05
 3ee:	9d 83       	std	Y+5, r25	; 0x05
 3f0:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 3f2:	c4 81       	ldd	r28, Z+4	; 0x04
 3f4:	d5 81       	ldd	r29, Z+5	; 0x05
 3f6:	82 81       	ldd	r24, Z+2	; 0x02
 3f8:	93 81       	ldd	r25, Z+3	; 0x03
 3fa:	9b 83       	std	Y+3, r25	; 0x03
 3fc:	8a 83       	std	Y+2, r24	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 3fe:	11 96       	adiw	r26, 0x01	; 1
 400:	8d 91       	ld	r24, X+
 402:	9c 91       	ld	r25, X
 404:	12 97       	sbiw	r26, 0x02	; 2
 406:	e8 17       	cp	r30, r24
 408:	f9 07       	cpc	r31, r25
 40a:	31 f4       	brne	.+12     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 40c:	84 81       	ldd	r24, Z+4	; 0x04
 40e:	95 81       	ldd	r25, Z+5	; 0x05
 410:	12 96       	adiw	r26, 0x02	; 2
 412:	9c 93       	st	X, r25
 414:	8e 93       	st	-X, r24
 416:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 418:	11 86       	std	Z+9, r1	; 0x09
 41a:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
 41c:	8c 91       	ld	r24, X
 41e:	81 50       	subi	r24, 0x01	; 1
 420:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
}
 422:	df 91       	pop	r29
 424:	cf 91       	pop	r28
 426:	08 95       	ret

00000428 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
 428:	0f 92       	push	r0
 42a:	0f b6       	in	r0, 0x3f	; 63
 42c:	f8 94       	cli
 42e:	0f 92       	push	r0
 430:	1f 92       	push	r1
 432:	11 24       	eor	r1, r1
 434:	2f 92       	push	r2
 436:	3f 92       	push	r3
 438:	4f 92       	push	r4
 43a:	5f 92       	push	r5
 43c:	6f 92       	push	r6
 43e:	7f 92       	push	r7
 440:	8f 92       	push	r8
 442:	9f 92       	push	r9
 444:	af 92       	push	r10
 446:	bf 92       	push	r11
 448:	cf 92       	push	r12
 44a:	df 92       	push	r13
 44c:	ef 92       	push	r14
 44e:	ff 92       	push	r15
 450:	0f 93       	push	r16
 452:	1f 93       	push	r17
 454:	2f 93       	push	r18
 456:	3f 93       	push	r19
 458:	4f 93       	push	r20
 45a:	5f 93       	push	r21
 45c:	6f 93       	push	r22
 45e:	7f 93       	push	r23
 460:	8f 93       	push	r24
 462:	9f 93       	push	r25
 464:	af 93       	push	r26
 466:	bf 93       	push	r27
 468:	cf 93       	push	r28
 46a:	df 93       	push	r29
 46c:	ef 93       	push	r30
 46e:	ff 93       	push	r31
 470:	a0 91 92 00 	lds	r26, 0x0092	; 0x800092 <pxCurrentTCB>
 474:	b0 91 93 00 	lds	r27, 0x0093	; 0x800093 <pxCurrentTCB+0x1>
 478:	0d b6       	in	r0, 0x3d	; 61
 47a:	0d 92       	st	X+, r0
 47c:	0e b6       	in	r0, 0x3e	; 62
 47e:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
 480:	0e 94 92 02 	call	0x524	; 0x524 <xTaskIncrementTick>
 484:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
 486:	0e 94 4d 03 	call	0x69a	; 0x69a <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
 48a:	a0 91 92 00 	lds	r26, 0x0092	; 0x800092 <pxCurrentTCB>
 48e:	b0 91 93 00 	lds	r27, 0x0093	; 0x800093 <pxCurrentTCB+0x1>
 492:	cd 91       	ld	r28, X+
 494:	cd bf       	out	0x3d, r28	; 61
 496:	dd 91       	ld	r29, X+
 498:	de bf       	out	0x3e, r29	; 62
 49a:	ff 91       	pop	r31
 49c:	ef 91       	pop	r30
 49e:	df 91       	pop	r29
 4a0:	cf 91       	pop	r28
 4a2:	bf 91       	pop	r27
 4a4:	af 91       	pop	r26
 4a6:	9f 91       	pop	r25
 4a8:	8f 91       	pop	r24
 4aa:	7f 91       	pop	r23
 4ac:	6f 91       	pop	r22
 4ae:	5f 91       	pop	r21
 4b0:	4f 91       	pop	r20
 4b2:	3f 91       	pop	r19
 4b4:	2f 91       	pop	r18
 4b6:	1f 91       	pop	r17
 4b8:	0f 91       	pop	r16
 4ba:	ff 90       	pop	r15
 4bc:	ef 90       	pop	r14
 4be:	df 90       	pop	r13
 4c0:	cf 90       	pop	r12
 4c2:	bf 90       	pop	r11
 4c4:	af 90       	pop	r10
 4c6:	9f 90       	pop	r9
 4c8:	8f 90       	pop	r8
 4ca:	7f 90       	pop	r7
 4cc:	6f 90       	pop	r6
 4ce:	5f 90       	pop	r5
 4d0:	4f 90       	pop	r4
 4d2:	3f 90       	pop	r3
 4d4:	2f 90       	pop	r2
 4d6:	1f 90       	pop	r1
 4d8:	0f 90       	pop	r0
 4da:	0f be       	out	0x3f, r0	; 63
 4dc:	0f 90       	pop	r0

	asm volatile ( "ret" );
 4de:	08 95       	ret

000004e0 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
 4e0:	0e 94 14 02 	call	0x428	; 0x428 <vPortYieldFromTick>
		asm volatile ( "reti" );
 4e4:	18 95       	reti

000004e6 <prvResetNextTaskUnblockTime>:
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 4e6:	e0 91 7e 00 	lds	r30, 0x007E	; 0x80007e <pxDelayedTaskList>
 4ea:	f0 91 7f 00 	lds	r31, 0x007F	; 0x80007f <pxDelayedTaskList+0x1>
 4ee:	80 81       	ld	r24, Z
 4f0:	81 11       	cpse	r24, r1
 4f2:	07 c0       	rjmp	.+14     	; 0x502 <prvResetNextTaskUnblockTime+0x1c>
 4f4:	8f ef       	ldi	r24, 0xFF	; 255
 4f6:	9f ef       	ldi	r25, 0xFF	; 255
 4f8:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <xNextTaskUnblockTime+0x1>
 4fc:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <xNextTaskUnblockTime>
 500:	08 95       	ret
 502:	e0 91 7e 00 	lds	r30, 0x007E	; 0x80007e <pxDelayedTaskList>
 506:	f0 91 7f 00 	lds	r31, 0x007F	; 0x80007f <pxDelayedTaskList+0x1>
 50a:	05 80       	ldd	r0, Z+5	; 0x05
 50c:	f6 81       	ldd	r31, Z+6	; 0x06
 50e:	e0 2d       	mov	r30, r0
 510:	06 80       	ldd	r0, Z+6	; 0x06
 512:	f7 81       	ldd	r31, Z+7	; 0x07
 514:	e0 2d       	mov	r30, r0
 516:	82 81       	ldd	r24, Z+2	; 0x02
 518:	93 81       	ldd	r25, Z+3	; 0x03
 51a:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <xNextTaskUnblockTime+0x1>
 51e:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <xNextTaskUnblockTime>
 522:	08 95       	ret

00000524 <xTaskIncrementTick>:
 524:	cf 92       	push	r12
 526:	df 92       	push	r13
 528:	ef 92       	push	r14
 52a:	ff 92       	push	r15
 52c:	0f 93       	push	r16
 52e:	1f 93       	push	r17
 530:	cf 93       	push	r28
 532:	df 93       	push	r29
 534:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <uxSchedulerSuspended>
 538:	81 11       	cpse	r24, r1
 53a:	99 c0       	rjmp	.+306    	; 0x66e <xTaskIncrementTick+0x14a>
 53c:	e0 90 7a 00 	lds	r14, 0x007A	; 0x80007a <xTickCount>
 540:	f0 90 7b 00 	lds	r15, 0x007B	; 0x80007b <xTickCount+0x1>
 544:	8f ef       	ldi	r24, 0xFF	; 255
 546:	e8 1a       	sub	r14, r24
 548:	f8 0a       	sbc	r15, r24
 54a:	f0 92 7b 00 	sts	0x007B, r15	; 0x80007b <xTickCount+0x1>
 54e:	e0 92 7a 00 	sts	0x007A, r14	; 0x80007a <xTickCount>
 552:	e1 14       	cp	r14, r1
 554:	f1 04       	cpc	r15, r1
 556:	b9 f4       	brne	.+46     	; 0x586 <xTaskIncrementTick+0x62>
 558:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <pxDelayedTaskList>
 55c:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <pxDelayedTaskList+0x1>
 560:	20 91 7c 00 	lds	r18, 0x007C	; 0x80007c <pxOverflowDelayedTaskList>
 564:	30 91 7d 00 	lds	r19, 0x007D	; 0x80007d <pxOverflowDelayedTaskList+0x1>
 568:	30 93 7f 00 	sts	0x007F, r19	; 0x80007f <pxDelayedTaskList+0x1>
 56c:	20 93 7e 00 	sts	0x007E, r18	; 0x80007e <pxDelayedTaskList>
 570:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <pxOverflowDelayedTaskList+0x1>
 574:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <pxOverflowDelayedTaskList>
 578:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <xNumOfOverflows>
 57c:	8f 5f       	subi	r24, 0xFF	; 255
 57e:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <xNumOfOverflows>
 582:	0e 94 73 02 	call	0x4e6	; 0x4e6 <prvResetNextTaskUnblockTime>
 586:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <xNextTaskUnblockTime>
 58a:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <xNextTaskUnblockTime+0x1>
 58e:	e8 16       	cp	r14, r24
 590:	f9 06       	cpc	r15, r25
 592:	10 f4       	brcc	.+4      	; 0x598 <xTaskIncrementTick+0x74>
 594:	d1 2c       	mov	r13, r1
 596:	53 c0       	rjmp	.+166    	; 0x63e <xTaskIncrementTick+0x11a>
 598:	d1 2c       	mov	r13, r1
 59a:	cc 24       	eor	r12, r12
 59c:	c3 94       	inc	r12
 59e:	e0 91 7e 00 	lds	r30, 0x007E	; 0x80007e <pxDelayedTaskList>
 5a2:	f0 91 7f 00 	lds	r31, 0x007F	; 0x80007f <pxDelayedTaskList+0x1>
 5a6:	80 81       	ld	r24, Z
 5a8:	81 11       	cpse	r24, r1
 5aa:	07 c0       	rjmp	.+14     	; 0x5ba <xTaskIncrementTick+0x96>
 5ac:	8f ef       	ldi	r24, 0xFF	; 255
 5ae:	9f ef       	ldi	r25, 0xFF	; 255
 5b0:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <xNextTaskUnblockTime+0x1>
 5b4:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <xNextTaskUnblockTime>
 5b8:	42 c0       	rjmp	.+132    	; 0x63e <xTaskIncrementTick+0x11a>
 5ba:	e0 91 7e 00 	lds	r30, 0x007E	; 0x80007e <pxDelayedTaskList>
 5be:	f0 91 7f 00 	lds	r31, 0x007F	; 0x80007f <pxDelayedTaskList+0x1>
 5c2:	05 80       	ldd	r0, Z+5	; 0x05
 5c4:	f6 81       	ldd	r31, Z+6	; 0x06
 5c6:	e0 2d       	mov	r30, r0
 5c8:	c6 81       	ldd	r28, Z+6	; 0x06
 5ca:	d7 81       	ldd	r29, Z+7	; 0x07
 5cc:	8a 81       	ldd	r24, Y+2	; 0x02
 5ce:	9b 81       	ldd	r25, Y+3	; 0x03
 5d0:	e8 16       	cp	r14, r24
 5d2:	f9 06       	cpc	r15, r25
 5d4:	28 f4       	brcc	.+10     	; 0x5e0 <xTaskIncrementTick+0xbc>
 5d6:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <xNextTaskUnblockTime+0x1>
 5da:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <xNextTaskUnblockTime>
 5de:	2f c0       	rjmp	.+94     	; 0x63e <xTaskIncrementTick+0x11a>
 5e0:	8e 01       	movw	r16, r28
 5e2:	0e 5f       	subi	r16, 0xFE	; 254
 5e4:	1f 4f       	sbci	r17, 0xFF	; 255
 5e6:	c8 01       	movw	r24, r16
 5e8:	0e 94 ee 01 	call	0x3dc	; 0x3dc <uxListRemove>
 5ec:	8c 89       	ldd	r24, Y+20	; 0x14
 5ee:	9d 89       	ldd	r25, Y+21	; 0x15
 5f0:	89 2b       	or	r24, r25
 5f2:	21 f0       	breq	.+8      	; 0x5fc <xTaskIncrementTick+0xd8>
 5f4:	ce 01       	movw	r24, r28
 5f6:	0c 96       	adiw	r24, 0x0c	; 12
 5f8:	0e 94 ee 01 	call	0x3dc	; 0x3dc <uxListRemove>
 5fc:	8e 89       	ldd	r24, Y+22	; 0x16
 5fe:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <uxTopReadyPriority>
 602:	98 17       	cp	r25, r24
 604:	10 f4       	brcc	.+4      	; 0x60a <xTaskIncrementTick+0xe6>
 606:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <uxTopReadyPriority>
 60a:	90 e0       	ldi	r25, 0x00	; 0
 60c:	9c 01       	movw	r18, r24
 60e:	22 0f       	add	r18, r18
 610:	33 1f       	adc	r19, r19
 612:	22 0f       	add	r18, r18
 614:	33 1f       	adc	r19, r19
 616:	22 0f       	add	r18, r18
 618:	33 1f       	adc	r19, r19
 61a:	82 0f       	add	r24, r18
 61c:	93 1f       	adc	r25, r19
 61e:	b8 01       	movw	r22, r16
 620:	80 58       	subi	r24, 0x80	; 128
 622:	9f 4f       	sbci	r25, 0xFF	; 255
 624:	0e 94 cd 01 	call	0x39a	; 0x39a <vListInsertEnd>
 628:	e0 91 92 00 	lds	r30, 0x0092	; 0x800092 <pxCurrentTCB>
 62c:	f0 91 93 00 	lds	r31, 0x0093	; 0x800093 <pxCurrentTCB+0x1>
 630:	9e 89       	ldd	r25, Y+22	; 0x16
 632:	86 89       	ldd	r24, Z+22	; 0x16
 634:	98 17       	cp	r25, r24
 636:	08 f4       	brcc	.+2      	; 0x63a <xTaskIncrementTick+0x116>
 638:	b2 cf       	rjmp	.-156    	; 0x59e <xTaskIncrementTick+0x7a>
 63a:	dc 2c       	mov	r13, r12
 63c:	b0 cf       	rjmp	.-160    	; 0x59e <xTaskIncrementTick+0x7a>
 63e:	e0 91 92 00 	lds	r30, 0x0092	; 0x800092 <pxCurrentTCB>
 642:	f0 91 93 00 	lds	r31, 0x0093	; 0x800093 <pxCurrentTCB+0x1>
 646:	86 89       	ldd	r24, Z+22	; 0x16
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	fc 01       	movw	r30, r24
 64c:	ee 0f       	add	r30, r30
 64e:	ff 1f       	adc	r31, r31
 650:	ee 0f       	add	r30, r30
 652:	ff 1f       	adc	r31, r31
 654:	ee 0f       	add	r30, r30
 656:	ff 1f       	adc	r31, r31
 658:	8e 0f       	add	r24, r30
 65a:	9f 1f       	adc	r25, r31
 65c:	fc 01       	movw	r30, r24
 65e:	e0 58       	subi	r30, 0x80	; 128
 660:	ff 4f       	sbci	r31, 0xFF	; 255
 662:	80 81       	ld	r24, Z
 664:	82 30       	cpi	r24, 0x02	; 2
 666:	48 f0       	brcs	.+18     	; 0x67a <xTaskIncrementTick+0x156>
 668:	dd 24       	eor	r13, r13
 66a:	d3 94       	inc	r13
 66c:	06 c0       	rjmp	.+12     	; 0x67a <xTaskIncrementTick+0x156>
 66e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <uxPendedTicks>
 672:	8f 5f       	subi	r24, 0xFF	; 255
 674:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <uxPendedTicks>
 678:	d1 2c       	mov	r13, r1
 67a:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <xYieldPending>
 67e:	88 23       	and	r24, r24
 680:	11 f0       	breq	.+4      	; 0x686 <xTaskIncrementTick+0x162>
 682:	dd 24       	eor	r13, r13
 684:	d3 94       	inc	r13
 686:	8d 2d       	mov	r24, r13
 688:	df 91       	pop	r29
 68a:	cf 91       	pop	r28
 68c:	1f 91       	pop	r17
 68e:	0f 91       	pop	r16
 690:	ff 90       	pop	r15
 692:	ef 90       	pop	r14
 694:	df 90       	pop	r13
 696:	cf 90       	pop	r12
 698:	08 95       	ret

0000069a <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 69a:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <uxSchedulerSuspended>
 69e:	88 23       	and	r24, r24
 6a0:	21 f0       	breq	.+8      	; 0x6aa <vTaskSwitchContext+0x10>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 6a2:	81 e0       	ldi	r24, 0x01	; 1
 6a4:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <xYieldPending>
 6a8:	08 95       	ret
	}
	else
	{
		xYieldPending = pdFALSE;
 6aa:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <xYieldPending>
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 6ae:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <uxTopReadyPriority>
 6b2:	82 2f       	mov	r24, r18
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	fc 01       	movw	r30, r24
 6b8:	ee 0f       	add	r30, r30
 6ba:	ff 1f       	adc	r31, r31
 6bc:	ee 0f       	add	r30, r30
 6be:	ff 1f       	adc	r31, r31
 6c0:	ee 0f       	add	r30, r30
 6c2:	ff 1f       	adc	r31, r31
 6c4:	e8 0f       	add	r30, r24
 6c6:	f9 1f       	adc	r31, r25
 6c8:	e0 58       	subi	r30, 0x80	; 128
 6ca:	ff 4f       	sbci	r31, 0xFF	; 255
 6cc:	30 81       	ld	r19, Z
 6ce:	31 11       	cpse	r19, r1
 6d0:	11 c0       	rjmp	.+34     	; 0x6f4 <vTaskSwitchContext+0x5a>
 6d2:	21 50       	subi	r18, 0x01	; 1
 6d4:	82 2f       	mov	r24, r18
 6d6:	90 e0       	ldi	r25, 0x00	; 0
 6d8:	fc 01       	movw	r30, r24
 6da:	ee 0f       	add	r30, r30
 6dc:	ff 1f       	adc	r31, r31
 6de:	ee 0f       	add	r30, r30
 6e0:	ff 1f       	adc	r31, r31
 6e2:	ee 0f       	add	r30, r30
 6e4:	ff 1f       	adc	r31, r31
 6e6:	e8 0f       	add	r30, r24
 6e8:	f9 1f       	adc	r31, r25
 6ea:	e0 58       	subi	r30, 0x80	; 128
 6ec:	ff 4f       	sbci	r31, 0xFF	; 255
 6ee:	30 81       	ld	r19, Z
 6f0:	33 23       	and	r19, r19
 6f2:	79 f3       	breq	.-34     	; 0x6d2 <vTaskSwitchContext+0x38>
 6f4:	ac 01       	movw	r20, r24
 6f6:	44 0f       	add	r20, r20
 6f8:	55 1f       	adc	r21, r21
 6fa:	44 0f       	add	r20, r20
 6fc:	55 1f       	adc	r21, r21
 6fe:	44 0f       	add	r20, r20
 700:	55 1f       	adc	r21, r21
 702:	48 0f       	add	r20, r24
 704:	59 1f       	adc	r21, r25
 706:	da 01       	movw	r26, r20
 708:	a0 58       	subi	r26, 0x80	; 128
 70a:	bf 4f       	sbci	r27, 0xFF	; 255
 70c:	11 96       	adiw	r26, 0x01	; 1
 70e:	ed 91       	ld	r30, X+
 710:	fc 91       	ld	r31, X
 712:	12 97       	sbiw	r26, 0x02	; 2
 714:	02 80       	ldd	r0, Z+2	; 0x02
 716:	f3 81       	ldd	r31, Z+3	; 0x03
 718:	e0 2d       	mov	r30, r0
 71a:	12 96       	adiw	r26, 0x02	; 2
 71c:	fc 93       	st	X, r31
 71e:	ee 93       	st	-X, r30
 720:	11 97       	sbiw	r26, 0x01	; 1
 722:	4d 57       	subi	r20, 0x7D	; 125
 724:	5f 4f       	sbci	r21, 0xFF	; 255
 726:	e4 17       	cp	r30, r20
 728:	f5 07       	cpc	r31, r21
 72a:	29 f4       	brne	.+10     	; 0x736 <vTaskSwitchContext+0x9c>
 72c:	42 81       	ldd	r20, Z+2	; 0x02
 72e:	53 81       	ldd	r21, Z+3	; 0x03
 730:	fd 01       	movw	r30, r26
 732:	52 83       	std	Z+2, r21	; 0x02
 734:	41 83       	std	Z+1, r20	; 0x01
 736:	fc 01       	movw	r30, r24
 738:	ee 0f       	add	r30, r30
 73a:	ff 1f       	adc	r31, r31
 73c:	ee 0f       	add	r30, r30
 73e:	ff 1f       	adc	r31, r31
 740:	ee 0f       	add	r30, r30
 742:	ff 1f       	adc	r31, r31
 744:	8e 0f       	add	r24, r30
 746:	9f 1f       	adc	r25, r31
 748:	fc 01       	movw	r30, r24
 74a:	e0 58       	subi	r30, 0x80	; 128
 74c:	ff 4f       	sbci	r31, 0xFF	; 255
 74e:	01 80       	ldd	r0, Z+1	; 0x01
 750:	f2 81       	ldd	r31, Z+2	; 0x02
 752:	e0 2d       	mov	r30, r0
 754:	86 81       	ldd	r24, Z+6	; 0x06
 756:	97 81       	ldd	r25, Z+7	; 0x07
 758:	90 93 93 00 	sts	0x0093, r25	; 0x800093 <pxCurrentTCB+0x1>
 75c:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <pxCurrentTCB>
 760:	20 93 79 00 	sts	0x0079, r18	; 0x800079 <uxTopReadyPriority>
 764:	08 95       	ret

00000766 <_exit>:
 766:	f8 94       	cli

00000768 <__stop_program>:
 768:	ff cf       	rjmp	.-2      	; 0x768 <__stop_program>
